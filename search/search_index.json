{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AgentCore CLI","text":"<p>The easiest way to deploy and manage AI agents on Amazon Bedrock AgentCore Runtime</p> <p>A sophisticated command-line interface that brings environment-first architecture and single-command deployment to AI agent management. Deploy from container to runtime in one command, manage multiple environments, and scale from development to production with confidence.</p> <p>Note</p> <p>Amazon Bedrock AgentCore is currently in preview release and is subject to change.</p>"},{"location":"#core-values","title":"\ud83d\ude80 Core Values","text":"<ul> <li> <p> | Environment-First Design</p> <p>Complete isolation between <code>dev</code>, <code>staging</code>, and <code>prod</code> environments. Each environment maintains its own agent runtimes, endpoints, and configurations with independent AWS regions.</p> </li> <li> <p> | Agent Lifecycle Management</p> <p>Immutable versioning system where every update creates a new version. Endpoints can point to any version, enabling safe rollbacks and blue-green deployments.</p> </li> <li> <p> | Container-Native</p> <p>Built for Docker workflows with Amazon Bedrock AgentCore Runtime. Works with any agent framework including LangGraph, CrewAI, Strands Agents, and custom implementations.</p> </li> <li> <p> | Infrastructure as Code</p> <p>CloudFormation templates for ECR repositories, IAM roles, and Cognito resources. Consistent, repeatable deployments with full resource lifecycle management.</p> </li> <li> <p> | Configuration Sync</p> <p>Synchronize configuration between local development and cloud (AWS Parameter Store) with intelligent drift detection using DeepDiff.</p> </li> <li> <p> | Security-First</p> <p>Integrated IAM role management and Cognito authentication. Every agent gets appropriate permissions and secure access patterns with built-in identity management.</p> </li> </ul>"},{"location":"#quick-start","title":"\u26a1 Quick Start","text":"InitializeDeploy an AgentTest ImmediatelyManage Environments Bash<pre><code># Interactive setup wizard\nagentcore-cli init\n\n# Or automated setup\nagentcore-cli init --no-interactive --region us-west-2 --environment dev\n</code></pre> Bash<pre><code># Creates ECR repo, builds image, creates IAM role, deploys runtime\nagentcore-cli agent create my-chat-bot\n\n# With custom settings\nagentcore-cli agent create ml-processor \\\n  --environment prod \\\n  --image-tag v1.0.0 \\\n  --dockerfile ./production.Dockerfile \\\n  --build-args API_KEY=secret123\n</code></pre> Bash<pre><code>agentcore-cli agent invoke my-chat-bot --prompt \"Hello, how are you?\"\n</code></pre> Bash<pre><code># Create production environment\nagentcore-cli env create prod --region us-east-1\n\n# Switch to production\nagentcore-cli env use prod\n\n# Deploy to production\nagentcore-cli agent create my-chat-bot --environment prod\n</code></pre>"},{"location":"#documentation-sections","title":"\ud83d\udcda Documentation Sections","text":"<ul> <li> <p> | Getting Started</p> <p>Install the CLI, set up your AWS credentials, and deploy your first agent in minutes.</p> </li> <li> <p> | User Guide</p> <p>Learn about environments, agent lifecycle, containers, configuration, and resource management.</p> </li> <li> <p> | Architecture</p> <p>Understand environment-first design, security model, and AgentCore Runtime capabilities.</p> </li> <li> <p> | CLI Reference</p> <p>Comprehensive reference for all commands, options, and arguments.</p> </li> <li> <p> | Tutorials</p> <p>Step-by-step guides for common workflows and advanced features.</p> </li> <li> <p> | Examples</p> <p>Ready-to-deploy examples for different agent frameworks.</p> </li> <li> <p> | Troubleshooting</p> <p>Common issues, error messages, and debugging tips.</p> </li> <li> <p> | API Reference</p> <p>Auto-generated documentation for the Python library.</p> </li> </ul>"},{"location":"#architecture-overview","title":"\ud83e\udde9 Architecture Overview","text":"<p>The AgentCore CLI uses an environment-first architecture that provides clean separation between development, staging, and production environments:</p> <pre><code>graph TD\n    A[Environment] --&gt; B[Agent Runtime]\n    B --&gt; C[Versions V1, V2, V3...]\n    B --&gt; D[Endpoints DEFAULT, production, staging]\n    D --&gt; C\n    C --&gt; E[Container Images]\n    E --&gt; F[ECR Repository]\n    B --&gt; G[IAM Role]\n    A --&gt; H[Cognito Auth]</code></pre>"},{"location":"#development-setup","title":"\ud83d\udee0\ufe0f Development Setup","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11+</li> <li>Docker installed and running</li> <li>AWS CLI configured with appropriate permissions</li> <li>Access to Amazon Bedrock AgentCore Runtime (Preview)</li> </ul>"},{"location":"#installation","title":"Installation","text":"Bash<pre><code># Install from PyPI (when published)\npip install agentcore-cli\n\n# Or install from source\ngit clone https://github.com/yourusername/agentcore-cli.git\ncd agentcore-cli\nuv sync  # Using uv for dependency management\n</code></pre> <p>Built with \u2764\ufe0f for the AI developer community</p> <p>Deploy smarter, not harder. One command, infinite possibilities.</p>"},{"location":"architecture/agentcore-runtime/","title":"AgentCore Runtime","text":"<p>Work in Progress</p> <p>This page is currently under development.</p>"},{"location":"architecture/agentcore-runtime/#overview","title":"Overview","text":"<p>Amazon Bedrock AgentCore Runtime is a managed service that enables running containerized AI agents with extended execution times, enhanced payloads, and isolated environments.</p>"},{"location":"architecture/agentcore-runtime/#key-features","title":"Key Features","text":""},{"location":"architecture/agentcore-runtime/#extended-execution","title":"Extended Execution","text":"<ul> <li>Long-Running Sessions: Up to 8 hours of execution time</li> <li>Complex Reasoning: Support for multi-step, sophisticated reasoning chains</li> <li>Multi-Agent Collaboration: Communication between agent instances</li> <li>Stateful Processing: Maintain context across multiple invocations</li> </ul>"},{"location":"architecture/agentcore-runtime/#enhanced-payloads","title":"Enhanced Payloads","text":"<ul> <li>Large Content Support: Up to 100MB payload size</li> <li>Multi-Modal Input: Support for text, images, audio, and video</li> <li>Structured Data: JSON, XML, and binary data handling</li> <li>File Processing: Document analysis and processing capabilities</li> </ul>"},{"location":"architecture/agentcore-runtime/#session-isolation","title":"Session Isolation","text":"<ul> <li>Dedicated microVMs: Isolated execution environment for each agent</li> <li>Resource Allocation: Configurable CPU and memory resources</li> <li>Filesystem Isolation: Separate disk storage per session</li> <li>Network Controls: Configurable network access policies</li> </ul>"},{"location":"architecture/agentcore-runtime/#framework-compatibility","title":"Framework Compatibility","text":"<p>AgentCore Runtime works with popular agent frameworks:</p> <ul> <li>LangGraph: Directed graphs for complex reasoning flows</li> <li>CrewAI: Multi-agent collaborative frameworks</li> <li>Strands Agents: Structured reasoning agents</li> <li>Custom Implementations: Any containerized agent system</li> </ul>"},{"location":"architecture/agentcore-runtime/#built-in-services","title":"Built-in Services","text":"<ul> <li>Authentication: Integration with identity providers</li> <li>Observability: Tracing, logging, and metrics</li> <li>Tool Access: Browser automation, code interpretation</li> <li>Memory Management: Short and long-term memory systems</li> </ul>"},{"location":"architecture/agentcore-runtime/#deployment-model","title":"Deployment Model","text":"<p>Details on how AgentCore CLI deploys agents to Amazon Bedrock AgentCore Runtime will be added in a future update.</p>"},{"location":"architecture/agentcore-runtime/#best-practices","title":"Best Practices","text":"<p>Recommended patterns for designing and implementing agents for AgentCore Runtime will be covered in a future update.</p>"},{"location":"architecture/environment-first/","title":"Environment-First Design","text":"<p>Work in Progress</p> <p>This page is currently under development.</p>"},{"location":"architecture/environment-first/#overview","title":"Overview","text":"<p>Environment-first design is a core architectural principle of AgentCore CLI that ensures complete separation between development, staging, and production environments.</p>"},{"location":"architecture/environment-first/#key-concepts","title":"Key Concepts","text":"<ul> <li>Environment Isolation: Each environment maintains its own resources</li> <li>Regional Deployment: Different AWS regions per environment</li> <li>Independent Configuration: Environment-specific settings</li> <li>Access Controls: Environment-specific authentication and authorization</li> </ul>"},{"location":"architecture/environment-first/#benefits","title":"Benefits","text":"<ol> <li>Development Safety: Changes to development don't impact production</li> <li>Testing Confidence: Staging exactly mirrors production architecture</li> <li>Regional Compliance: Deploy to regions that meet compliance requirements</li> <li>Disaster Recovery: Multiple region support for failover scenarios</li> </ol>"},{"location":"architecture/environment-first/#implementation","title":"Implementation","text":"<p>Details on how environment-first design is implemented in AgentCore CLI will be added in a future update.</p>"},{"location":"architecture/environment-first/#best-practices","title":"Best Practices","text":"<p>Recommended patterns for working with environments will be covered in a future update.</p>"},{"location":"architecture/overview/","title":"Architecture Overview","text":"<p>AgentCore CLI is built with an environment-first architecture that provides clean separation between development, staging, and production environments. This document explains the core architectural concepts and how they work together.</p>"},{"location":"architecture/overview/#environment-first-architecture","title":"Environment-First Architecture","text":"<p>The foundation of AgentCore CLI is its environment-first architecture. This means:</p> <ul> <li>Complete Environment Isolation: Dev, staging, and production environments are fully isolated from each other</li> <li>Region-Specific Deployments: Each environment can be deployed in a different AWS region</li> <li>Independent Resources: Each environment has its own set of AWS resources (IAM roles, agent runtimes, etc.)</li> <li>Configuration Separation: Environment-specific configuration with inheritance options</li> </ul> <p>This approach ensures that development and testing activities never impact production systems.</p>"},{"location":"architecture/overview/#hierarchical-structure","title":"Hierarchical Structure","text":"<p>The AgentCore CLI configuration follows a hierarchical structure:</p> Text Only<pre><code>AgentCore Config\n\u251c\u2500\u2500 Environments (dev, staging, prod)\n\u2502   \u251c\u2500\u2500 Region\n\u2502   \u251c\u2500\u2500 Agent Runtimes\n\u2502   \u2502   \u251c\u2500\u2500 Versions\n\u2502   \u2502   \u2514\u2500\u2500 Endpoints\n\u2502   \u251c\u2500\u2500 Environment Variables\n\u2502   \u2514\u2500\u2500 Cognito Configuration\n\u2514\u2500\u2500 Global Resources\n    \u251c\u2500\u2500 ECR Repositories\n    \u251c\u2500\u2500 IAM Roles\n    \u2514\u2500\u2500 Sync Configuration\n</code></pre> <p>This hierarchy is reflected in both the CLI commands and the underlying configuration file.</p>"},{"location":"architecture/overview/#agent-runtime-hierarchy","title":"Agent Runtime Hierarchy","text":"<p>Each agent runtime follows a versioned architecture:</p> <pre><code>graph TD\n    A[Environment] --&gt; B[Agent Runtime]\n    B --&gt; C[Versions V1, V2, V3...]\n    B --&gt; D[Endpoints DEFAULT, production, staging]\n    D --&gt; C\n    C --&gt; E[Container Images]\n    E --&gt; F[ECR Repository]\n    B --&gt; G[IAM Role]\n    A --&gt; H[Cognito Auth]</code></pre> <p>Key concepts:</p> <ul> <li>Immutable Versions: Each update creates a new version, never modifying existing ones</li> <li>Endpoint Management: Endpoints can point to any version, enabling safe rollbacks and blue-green deployments</li> <li>Resource Association: Each agent is associated with specific IAM roles and ECR repositories</li> </ul>"},{"location":"architecture/overview/#configuration-model","title":"Configuration Model","text":"<p>The configuration model uses a JSON structure stored locally and optionally synced to AWS Parameter Store:</p> JSON<pre><code>{\n  \"current_environment\": \"dev\",\n  \"environments\": {\n    \"dev\": {\n      \"region\": \"us-west-2\",\n      \"agent_runtimes\": { \"my-bot\": {...} },\n      \"default_agent_runtime\": \"my-bot\",\n      \"environment_variables\": { \"DEBUG\": \"true\" },\n      \"cognito\": { \"user_pool_id\": \"...\", \"app_client_id\": \"...\" }\n    },\n    \"prod\": {\n      \"region\": \"us-east-1\",\n      \"agent_runtimes\": { \"my-bot\": {...} },\n      \"default_agent_runtime\": \"my-bot\",\n      \"environment_variables\": { \"DEBUG\": \"false\" },\n      \"cognito\": { \"user_pool_id\": \"...\", \"app_client_id\": \"...\" }\n    }\n  },\n  \"global_resources\": {\n    \"ecr_repositories\": { \"my-bot\": {...} },\n    \"iam_roles\": { \"agentcore-my-bot-dev-role\": {...} },\n    \"sync_config\": {\n      \"cloud_config_enabled\": true,\n      \"auto_sync_enabled\": true,\n      \"parameter_store_prefix\": \"/agentcore\"\n    }\n  }\n}\n</code></pre> <p>The configuration tracks:</p> <ul> <li>Environment settings and resources</li> <li>Agent runtime versions and endpoints</li> <li>AWS resources across environments</li> <li>Cloud sync preferences</li> </ul>"},{"location":"architecture/overview/#infrastructure-as-code","title":"Infrastructure as Code","text":"<p>All AWS resources are created using CloudFormation templates:</p> <ul> <li>ECR Repositories: For storing container images</li> <li>IAM Roles: For agent runtime execution permissions</li> <li>Cognito Resources: For authentication</li> </ul> <p>This ensures consistent, repeatable deployments with proper lifecycle management.</p>"},{"location":"architecture/overview/#security-model","title":"Security Model","text":"<p>The security model is based on several key principles:</p> <ol> <li>Least Privilege: Each agent gets only the permissions it needs</li> <li>Identity Management: Integrated Cognito authentication</li> <li>Environment Isolation: Security boundaries between environments</li> <li>Session Isolation: Dedicated microVMs with isolated resources</li> </ol>"},{"location":"architecture/overview/#container-native-design","title":"Container-Native Design","text":"<p>AgentCore CLI is designed to work with Docker containers:</p> <ul> <li>Build Support: Integrated Docker build capabilities</li> <li>ECR Integration: Automatic repository creation and image management</li> <li>Runtime Compatibility: Works with the Amazon Bedrock AgentCore Runtime</li> </ul>"},{"location":"architecture/overview/#agentcore-runtime-capabilities","title":"AgentCore Runtime Capabilities","text":"<p>AgentCore CLI leverages the Amazon Bedrock AgentCore Runtime, which provides:</p> <ul> <li>Extended Execution: Up to 8 hours for complex reasoning tasks</li> <li>Enhanced Payloads: 100MB payload support for multi-modal content</li> <li>Session Isolation: Dedicated microVMs with isolated CPU, memory, and filesystem</li> <li>Framework Agnostic: Works with LangGraph, CrewAI, Strands Agents, and custom implementations</li> </ul>"},{"location":"architecture/overview/#configuration-sync","title":"Configuration Sync","text":"<p>The configuration sync system allows for:</p> <ul> <li>Local/Cloud Synchronization: Sync configuration between local development and AWS Parameter Store</li> <li>Drift Detection: Intelligent detection of configuration differences</li> <li>Team Collaboration: Share configuration across team members</li> <li>Automatic Sync: Optional automatic sync during operations</li> </ul>"},{"location":"architecture/overview/#command-structure","title":"Command Structure","text":"<p>The CLI command structure mirrors the architectural hierarchy:</p> <ul> <li> <code>agentcore-cli env</code> - Environment management</li> <li> <code>agentcore-cli agent</code> - Agent lifecycle management</li> <li> <code>agentcore-cli container</code> - Docker operations</li> <li> <code>agentcore-cli config</code> - Configuration management</li> <li> <code>agentcore-cli resources</code> - AWS resource management</li> </ul>"},{"location":"architecture/overview/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Environment-First Design</li> <li>Understand the Security Model</li> <li>Explore AgentCore Runtime capabilities</li> </ul>"},{"location":"architecture/security/","title":"Security Model","text":"<p>Work in Progress</p> <p>This page is currently under development.</p>"},{"location":"architecture/security/#overview","title":"Overview","text":"<p>The AgentCore CLI implements a comprehensive security model that focuses on least privilege, identity management, environment isolation, and secure deployment practices.</p>"},{"location":"architecture/security/#key-security-components","title":"Key Security Components","text":""},{"location":"architecture/security/#iam-role-management","title":"IAM Role Management","text":"<ul> <li>Least Privilege: Each agent gets only the permissions it needs</li> <li>Role Policies: Auto-generated IAM policies based on agent requirements</li> <li>Role Separation: Different roles for different environments</li> </ul>"},{"location":"architecture/security/#cognito-authentication","title":"Cognito Authentication","text":"<ul> <li>User Management: Integrated user registration and authentication</li> <li>Identity Pools: Secure token-based access</li> <li>Federation: Support for enterprise identity providers</li> </ul>"},{"location":"architecture/security/#environment-isolation","title":"Environment Isolation","text":"<ul> <li>Security Boundaries: Strict separation between environments</li> <li>Region-Specific Resources: Resources isolated by AWS region</li> <li>Access Control: Environment-specific access policies</li> </ul>"},{"location":"architecture/security/#session-isolation","title":"Session Isolation","text":"<ul> <li>Dedicated microVMs: Isolated CPU, memory, and filesystem resources</li> <li>Resource Constraints: Memory and timeout limits</li> <li>Runtime Security: AWS Bedrock AgentCore Runtime security protections</li> </ul>"},{"location":"architecture/security/#best-practices","title":"Best Practices","text":"<p>Recommended security practices when working with AgentCore CLI will be covered in a future update.</p>"},{"location":"architecture/security/#security-recommendations","title":"Security Recommendations","text":"<p>Guidelines for securing your agents and deployments will be added in a future update.</p>"},{"location":"cli-reference/agent/","title":"Agent Commands","text":"<p>The <code>agent</code> command group contains all commands related to managing agent runtimes, including creation, updates, invocation, and deletion.</p>"},{"location":"cli-reference/agent/#overview","title":"Overview","text":"<p>Agent commands provide complete lifecycle management for your agents on Amazon Bedrock AgentCore Runtime. Each agent represents a containerized AI application that can be deployed, versioned, and invoked through endpoints.</p> <ul> <li> <p> create</p> <p>Create and deploy a new agent runtime.</p> </li> <li> <p> update</p> <p>Update an existing agent with a new version.</p> </li> <li> <p> invoke</p> <p>Invoke an agent runtime with a prompt or payload.</p> </li> <li> <p> list</p> <p>List all deployed agent runtimes.</p> </li> <li> <p> status</p> <p>Show detailed status of an agent runtime.</p> </li> <li> <p> delete</p> <p>Delete an agent runtime and associated resources.</p> </li> </ul>"},{"location":"cli-reference/agent/#agent-create","title":"agent create","text":"<p>Create and deploy a new agent runtime.</p> Bash<pre><code>agentcore-cli agent create &lt;name&gt; [options]\n</code></pre>"},{"location":"cli-reference/agent/#arguments","title":"Arguments","text":"Argument Description <code>name</code> The name of the agent to create (required)"},{"location":"cli-reference/agent/#options","title":"Options","text":"Option Description <code>--dockerfile PATH</code> Path to the Dockerfile (default: <code>Dockerfile</code>) <code>--context PATH</code> Docker build context (default: current directory) <code>--build-args KEY=VALUE</code> Build arguments for Docker build (can be used multiple times) <code>--image-tag TAG</code> Tag for the container image (default: <code>latest</code>) <code>--environment ENV</code> Environment to deploy to (default: current environment) <code>--region REGION</code> AWS region for deployment <code>--no-deploy</code> Build the container but don't deploy the agent runtime <code>--role-prefix PREFIX</code> IAM role name prefix (default: <code>agentcore</code>) <code>--memory MB</code> Memory allocation in MB (default: <code>2048</code>) <code>--timeout SEC</code> Function timeout in seconds (default: <code>900</code>) <code>--concurrency NUM</code> Maximum concurrent executions (default: <code>10</code>) <code>--environment-vars KEY=VALUE</code> Environment variables for the agent (can be used multiple times)"},{"location":"cli-reference/agent/#examples","title":"Examples","text":"Basic CreationCustom DockerfileBuild ArgumentsEnvironment VariablesProduction DeploymentBuild Only Bash<pre><code># Create an agent with default settings\nagentcore-cli agent create my-agent\n</code></pre> Bash<pre><code># Create an agent with a custom Dockerfile\nagentcore-cli agent create my-agent --dockerfile ./path/to/Dockerfile\n</code></pre> Bash<pre><code># Create an agent with build arguments\nagentcore-cli agent create my-agent \\\n  --build-args API_KEY=secret123 \\\n  --build-args DEBUG=true\n</code></pre> Bash<pre><code># Create an agent with environment variables\nagentcore-cli agent create my-agent \\\n  --environment-vars MODEL=anthropic.claude-3-sonnet-20240229-v1:0 \\\n  --environment-vars MAX_TOKENS=4096\n</code></pre> Bash<pre><code># Create an agent in production environment\nagentcore-cli agent create my-agent \\\n  --environment prod \\\n  --memory 4096 \\\n  --timeout 1800 \\\n  --concurrency 25\n</code></pre> Bash<pre><code># Build the container without deploying\nagentcore-cli agent create my-agent --no-deploy\n</code></pre>"},{"location":"cli-reference/agent/#agent-update","title":"agent update","text":"<p>Update an existing agent with a new version.</p> Bash<pre><code>agentcore-cli agent update &lt;name&gt; [options]\n</code></pre>"},{"location":"cli-reference/agent/#arguments_1","title":"Arguments","text":"Argument Description <code>name</code> The name of the agent to update (required)"},{"location":"cli-reference/agent/#options_1","title":"Options","text":"Option Description <code>--dockerfile PATH</code> Path to the Dockerfile (default: <code>Dockerfile</code>) <code>--context PATH</code> Docker build context (default: current directory) <code>--build-args KEY=VALUE</code> Build arguments for Docker build (can be used multiple times) <code>--image-tag TAG</code> Tag for the container image (default: autogenerated) <code>--environment ENV</code> Environment to deploy to (default: current environment) <code>--region REGION</code> AWS region for deployment <code>--no-deploy</code> Build the container but don't deploy the agent runtime <code>--endpoint NAME</code> Endpoint to update (default: <code>DEFAULT</code>) <code>--memory MB</code> Memory allocation in MB <code>--timeout SEC</code> Function timeout in seconds <code>--concurrency NUM</code> Maximum concurrent executions <code>--environment-vars KEY=VALUE</code> Environment variables for the agent (can be used multiple times)"},{"location":"cli-reference/agent/#examples_1","title":"Examples","text":"Basic UpdateUpdate with Custom TagUpdate ConfigurationUpdate Endpoint Bash<pre><code># Update an agent with a new version\nagentcore-cli agent update my-agent\n</code></pre> Bash<pre><code># Update an agent with a specific tag\nagentcore-cli agent update my-agent --image-tag v2.0.0\n</code></pre> Bash<pre><code># Update an agent's configuration\nagentcore-cli agent update my-agent \\\n  --memory 4096 \\\n  --timeout 1800\n</code></pre> Bash<pre><code># Update a specific endpoint\nagentcore-cli agent update my-agent \\\n  --endpoint production \\\n  --image-tag stable-v1\n</code></pre>"},{"location":"cli-reference/agent/#agent-invoke","title":"agent invoke","text":"<p>Invoke an agent runtime with a prompt or payload.</p> Bash<pre><code>agentcore-cli agent invoke &lt;name&gt; [options]\n</code></pre>"},{"location":"cli-reference/agent/#arguments_2","title":"Arguments","text":"Argument Description <code>name</code> The name of the agent to invoke (required)"},{"location":"cli-reference/agent/#options_2","title":"Options","text":"Option Description <code>--prompt TEXT</code> Text prompt to send to the agent <code>--file PATH</code> Path to a file containing the prompt <code>--payload JSON</code> Raw JSON payload to send to the agent <code>--payload-file PATH</code> Path to a JSON file containing the payload <code>--endpoint NAME</code> Endpoint to invoke (default: <code>DEFAULT</code>) <code>--environment ENV</code> Environment to use (default: current environment) <code>--output FILE</code> Save the response to a file <code>--raw</code> Output raw response without formatting <code>--timeout SEC</code> Request timeout in seconds (default: <code>30</code>)"},{"location":"cli-reference/agent/#examples_2","title":"Examples","text":"Text PromptFrom FileCustom JSON PayloadSave OutputSpecific Endpoint Bash<pre><code># Invoke an agent with a text prompt\nagentcore-cli agent invoke my-agent \\\n  --prompt \"Tell me about AWS Bedrock\"\n</code></pre> Bash<pre><code># Invoke an agent with a prompt from a file\nagentcore-cli agent invoke my-agent \\\n  --file ./prompt.txt\n</code></pre> Bash<pre><code># Invoke an agent with a custom JSON payload\nagentcore-cli agent invoke my-agent \\\n  --payload '{\"query\": \"What is AWS Bedrock?\", \"max_tokens\": 500}'\n</code></pre> Bash<pre><code># Save the agent's response to a file\nagentcore-cli agent invoke my-agent \\\n  --prompt \"Generate a report\" \\\n  --output ./report.txt\n</code></pre> Bash<pre><code># Invoke a specific endpoint\nagentcore-cli agent invoke my-agent \\\n  --prompt \"Hello\" \\\n  --endpoint production\n</code></pre>"},{"location":"cli-reference/agent/#agent-list","title":"agent list","text":"<p>List all deployed agent runtimes.</p> Bash<pre><code>agentcore-cli agent list [options]\n</code></pre>"},{"location":"cli-reference/agent/#options_3","title":"Options","text":"Option Description <code>--environment ENV</code> Environment to list agents from (default: current environment) <code>--region REGION</code> AWS region to list agents from <code>--verbose</code>, <code>-v</code> Show detailed information for each agent"},{"location":"cli-reference/agent/#examples_3","title":"Examples","text":"Bash<pre><code># List all agents in the current environment\nagentcore-cli agent list\n\n# List all agents in production with details\nagentcore-cli agent list --environment prod --verbose\n</code></pre>"},{"location":"cli-reference/agent/#agent-status","title":"agent status","text":"<p>Show detailed status of an agent runtime.</p> Bash<pre><code>agentcore-cli agent status &lt;name&gt; [options]\n</code></pre>"},{"location":"cli-reference/agent/#arguments_3","title":"Arguments","text":"Argument Description <code>name</code> The name of the agent to show status for (required)"},{"location":"cli-reference/agent/#options_4","title":"Options","text":"Option Description <code>--environment ENV</code> Environment to use (default: current environment) <code>--region REGION</code> AWS region to use"},{"location":"cli-reference/agent/#examples_4","title":"Examples","text":"Bash<pre><code># Show status of an agent\nagentcore-cli agent status my-agent\n\n# Show status in a specific environment\nagentcore-cli agent status my-agent --environment prod\n</code></pre>"},{"location":"cli-reference/agent/#agent-delete","title":"agent delete","text":"<p>Delete an agent runtime and associated resources.</p> Bash<pre><code>agentcore-cli agent delete &lt;name&gt; [options]\n</code></pre>"},{"location":"cli-reference/agent/#arguments_4","title":"Arguments","text":"Argument Description <code>name</code> The name of the agent to delete (required)"},{"location":"cli-reference/agent/#options_5","title":"Options","text":"Option Description <code>--environment ENV</code> Environment to delete from (default: current environment) <code>--region REGION</code> AWS region to delete from <code>--force</code> Skip confirmation prompt <code>--keep-ecr</code> Keep the ECR repository and images <code>--keep-iam</code> Keep the IAM role"},{"location":"cli-reference/agent/#examples_5","title":"Examples","text":"Basic DeletionForce DeleteKeep Resources Bash<pre><code># Delete an agent (with confirmation)\nagentcore-cli agent delete my-agent\n</code></pre> Bash<pre><code># Force delete without confirmation\nagentcore-cli agent delete my-agent --force\n</code></pre> Bash<pre><code># Delete agent but keep ECR repository\nagentcore-cli agent delete my-agent --keep-ecr\n</code></pre>"},{"location":"cli-reference/agent/#next-steps","title":"Next Steps","text":"<p>Now that you understand the agent commands, you might want to explore:</p> <ul> <li>Environment Commands to manage your environments</li> <li>Container Commands to work directly with Docker containers</li> <li>Configuration Commands to manage your AgentCore configuration</li> </ul>"},{"location":"cli-reference/commands/","title":"CLI Commands Reference","text":"<p>This document provides a comprehensive reference for all AgentCore CLI commands, their options, and usage examples.</p>"},{"location":"cli-reference/commands/#command-structure","title":"Command Structure","text":"<p>AgentCore CLI follows a consistent command structure:</p> Bash<pre><code>agentcore-cli [global-options] &lt;command-group&gt; &lt;command&gt; [options] [arguments]\n</code></pre> <ul> <li>Global Options: Apply to all commands (e.g., <code>--verbose</code>, <code>--config</code>)</li> <li>Command Group: Logical grouping of related commands (e.g., <code>agent</code>, <code>env</code>)</li> <li>Command: Specific action to perform (e.g., <code>create</code>, <code>list</code>)</li> <li>Options: Command-specific flags and settings (e.g., <code>--dockerfile</code>, <code>--region</code>)</li> <li>Arguments: Required inputs for the command (e.g., agent name)</li> </ul>"},{"location":"cli-reference/commands/#global-options","title":"Global Options","text":"Option Description <code>--version</code> Show version and exit <code>--config PATH</code> Path to config file (default: <code>.agentcore/config.json</code>) <code>--verbose</code>, <code>-v</code> Enable verbose logging <code>--quiet</code>, <code>-q</code> Suppress non-error output <code>--help</code>, <code>-h</code> Show help message and exit"},{"location":"cli-reference/commands/#command-groups","title":"Command Groups","text":"<p>AgentCore CLI organizes commands into logical groups:</p> <ul> <li> <p> init</p> <p>Initialize and set up your AgentCore project.</p> </li> <li> <p> agent</p> <p>Create, update, invoke, and manage agent runtimes.</p> </li> <li> <p> env</p> <p>Manage environments (dev, staging, prod).</p> </li> <li> <p> container</p> <p>Build, push, and manage Docker containers.</p> </li> <li> <p> config</p> <p>Configure and synchronize your AgentCore setup.</p> </li> <li> <p> resources</p> <p>Manage AWS resources (ECR, IAM, Cognito).</p> </li> </ul>"},{"location":"cli-reference/commands/#quick-command-reference","title":"Quick Command Reference","text":"<p>Below is a quick reference for commonly used commands:</p>"},{"location":"cli-reference/commands/#initialization","title":"Initialization","text":"Bash<pre><code># Interactive setup wizard\nagentcore-cli init\n\n# Non-interactive setup\nagentcore-cli init --no-interactive --region us-west-2 --environment dev\n</code></pre>"},{"location":"cli-reference/commands/#agent-management","title":"Agent Management","text":"Bash<pre><code># Create a new agent\nagentcore-cli agent create my-bot --dockerfile ./Dockerfile\n\n# Update an existing agent\nagentcore-cli agent update my-bot --image-tag v2\n\n# Invoke an agent\nagentcore-cli agent invoke my-bot --prompt \"Hello!\"\n\n# List all agents in current environment\nagentcore-cli agent list\n\n# Show agent status\nagentcore-cli agent status my-bot\n\n# Delete an agent\nagentcore-cli agent delete my-bot\n</code></pre>"},{"location":"cli-reference/commands/#environment-management","title":"Environment Management","text":"Bash<pre><code># Create environment\nagentcore-cli env create prod --region us-east-1\n\n# Switch to environment\nagentcore-cli env use prod\n\n# List environments\nagentcore-cli env list\n\n# Show current environment\nagentcore-cli env current\n\n# Delete environment\nagentcore-cli env delete old-env --force\n</code></pre>"},{"location":"cli-reference/commands/#container-operations","title":"Container Operations","text":"Bash<pre><code># Build container\nagentcore-cli container build my-bot --dockerfile ./Dockerfile\n\n# Push to ECR\nagentcore-cli container push my-bot --tag v1.0.0\n\n# List images\nagentcore-cli container list --repository my-bot\n\n# Pull image\nagentcore-cli container pull my-bot --tag v1.0.0\n\n# Remove container image\nagentcore-cli container remove my-bot --local-only\n</code></pre>"},{"location":"cli-reference/commands/#configuration-management","title":"Configuration Management","text":"Bash<pre><code># Show current configuration\nagentcore-cli config show\n\n# Export configuration\nagentcore-cli config export --file backup.json\n\n# Import configuration\nagentcore-cli config import backup.json\n\n# Enable cloud sync\nagentcore-cli config sync enable --auto\n\n# Check sync status\nagentcore-cli config sync status\n</code></pre>"},{"location":"cli-reference/commands/#resource-management","title":"Resource Management","text":"Bash<pre><code># ECR Resources\nagentcore-cli resources ecr create my-repo\nagentcore-cli resources ecr list\nagentcore-cli resources ecr delete old-repo --force\n\n# IAM Resources\nagentcore-cli resources iam create my-agent\nagentcore-cli resources iam list\n\n# Cognito Resources\nagentcore-cli resources cognito create my-agent\nagentcore-cli resources cognito list\n</code></pre>"},{"location":"cli-reference/commands/#getting-help","title":"Getting Help","text":"<p>For detailed help on any command, use the <code>--help</code> flag:</p> Bash<pre><code># General help\nagentcore-cli --help\n\n# Command group help\nagentcore-cli agent --help\n\n# Specific command help\nagentcore-cli agent create --help\n</code></pre>"},{"location":"cli-reference/commands/#next-steps","title":"Next Steps","text":"<p>For detailed information about specific command groups, visit their individual pages:</p> <ul> <li>init Command</li> <li>agent Commands</li> <li>env Commands</li> <li>container Commands</li> <li>config Commands</li> <li>resources Commands</li> </ul>"},{"location":"cli-reference/config/","title":"Configuration Commands","text":"<p>Work in Progress</p> <p>This page is currently under development.</p>"},{"location":"cli-reference/config/#overview","title":"Overview","text":"<p>The <code>config</code> command group contains all commands related to managing AgentCore CLI configuration, including viewing, exporting, importing, and synchronizing configuration with AWS Parameter Store.</p>"},{"location":"cli-reference/config/#commands","title":"Commands","text":""},{"location":"cli-reference/config/#config-show","title":"config show","text":"<p>Show the current configuration.</p> Bash<pre><code>agentcore-cli config show [--environment ENV]\n</code></pre>"},{"location":"cli-reference/config/#config-validate","title":"config validate","text":"<p>Validate configuration integrity.</p> Bash<pre><code>agentcore-cli config validate\n</code></pre>"},{"location":"cli-reference/config/#config-export","title":"config export","text":"<p>Export configuration to a file.</p> Bash<pre><code>agentcore-cli config export [--file PATH]\n</code></pre>"},{"location":"cli-reference/config/#config-import","title":"config import","text":"<p>Import configuration from a file.</p> Bash<pre><code>agentcore-cli config import &lt;file&gt; [--force]\n</code></pre>"},{"location":"cli-reference/config/#config-set-default-agent","title":"config set-default-agent","text":"<p>Set the default agent for an environment.</p> Bash<pre><code>agentcore-cli config set-default-agent &lt;name&gt; [--environment ENV]\n</code></pre>"},{"location":"cli-reference/config/#config-sync","title":"config sync","text":"<p>Manage configuration synchronization with AWS Parameter Store.</p> Bash<pre><code>agentcore-cli config sync [enable|disable|status|push|pull]\n</code></pre>"},{"location":"cli-reference/config/#detailed-documentation","title":"Detailed Documentation","text":"<p>Complete documentation for each command will be added in a future update.</p>"},{"location":"cli-reference/container/","title":"Container Commands","text":"<p>Work in Progress</p> <p>This page is currently under development.</p>"},{"location":"cli-reference/container/#overview","title":"Overview","text":"<p>The <code>container</code> command group contains all commands related to Docker container operations, including building, pushing to ECR, and managing container images.</p>"},{"location":"cli-reference/container/#commands","title":"Commands","text":""},{"location":"cli-reference/container/#container-build","title":"container build","text":"<p>Build a Docker container image.</p> Bash<pre><code>agentcore-cli container build &lt;name&gt; [--dockerfile PATH] [--context PATH] [--build-args KEY=VALUE]\n</code></pre>"},{"location":"cli-reference/container/#container-push","title":"container push","text":"<p>Push a container image to Amazon ECR.</p> Bash<pre><code>agentcore-cli container push &lt;name&gt; [--tag TAG] [--region REGION] [--create-repo]\n</code></pre>"},{"location":"cli-reference/container/#container-list","title":"container list","text":"<p>List container images in a repository.</p> Bash<pre><code>agentcore-cli container list [--repository REPO] [--region REGION]\n</code></pre>"},{"location":"cli-reference/container/#container-pull","title":"container pull","text":"<p>Pull a container image from Amazon ECR.</p> Bash<pre><code>agentcore-cli container pull &lt;name&gt; [--tag TAG] [--region REGION]\n</code></pre>"},{"location":"cli-reference/container/#container-remove","title":"container remove","text":"<p>Remove container images locally and/or from ECR.</p> Bash<pre><code>agentcore-cli container remove &lt;name&gt; [--tag TAG] [--local-only] [--force]\n</code></pre>"},{"location":"cli-reference/container/#detailed-documentation","title":"Detailed Documentation","text":"<p>Complete documentation for each command will be added in a future update.</p>"},{"location":"cli-reference/env/","title":"Environment Commands","text":"<p>Work in Progress</p> <p>This page is currently under development.</p>"},{"location":"cli-reference/env/#overview","title":"Overview","text":"<p>The <code>env</code> command group contains all commands related to managing environments, including creation, switching between environments, and environment-specific configuration.</p>"},{"location":"cli-reference/env/#commands","title":"Commands","text":""},{"location":"cli-reference/env/#env-list","title":"env list","text":"<p>List all environments.</p> Bash<pre><code>agentcore-cli env list [--verbose]\n</code></pre>"},{"location":"cli-reference/env/#env-current","title":"env current","text":"<p>Show the current active environment.</p> Bash<pre><code>agentcore-cli env current\n</code></pre>"},{"location":"cli-reference/env/#env-create","title":"env create","text":"<p>Create a new environment.</p> Bash<pre><code>agentcore-cli env create &lt;name&gt; --region &lt;region&gt; [--set-current]\n</code></pre>"},{"location":"cli-reference/env/#env-use","title":"env use","text":"<p>Switch to a different environment.</p> Bash<pre><code>agentcore-cli env use &lt;name&gt;\n</code></pre>"},{"location":"cli-reference/env/#env-delete","title":"env delete","text":"<p>Delete an environment.</p> Bash<pre><code>agentcore-cli env delete &lt;name&gt; [--force] [--keep-resources]\n</code></pre>"},{"location":"cli-reference/env/#env-vars","title":"env vars","text":"<p>Manage environment variables.</p> Bash<pre><code>agentcore-cli env vars [--list] [--set KEY=VALUE]\n</code></pre>"},{"location":"cli-reference/env/#detailed-documentation","title":"Detailed Documentation","text":"<p>Complete documentation for each command will be added in a future update.</p>"},{"location":"cli-reference/init/","title":"Initialization Command","text":"<p>Work in Progress</p> <p>This page is currently under development.</p>"},{"location":"cli-reference/init/#overview","title":"Overview","text":"<p>The <code>init</code> command sets up your AgentCore CLI project with the necessary configuration and initial environment. It creates the configuration file and optionally sets up AWS resources.</p>"},{"location":"cli-reference/init/#usage","title":"Usage","text":"Bash<pre><code>agentcore-cli init [options]\n</code></pre>"},{"location":"cli-reference/init/#options","title":"Options","text":"Option Description <code>--no-interactive</code> Run in non-interactive mode <code>--region REGION</code> AWS region to use (default: <code>us-west-2</code>) <code>--environment ENV</code> Initial environment name (default: <code>dev</code>) <code>--config-file PATH</code> Custom config file path <code>--skip-aws-check</code> Skip AWS credential validation <code>--force</code> Overwrite existing configuration"},{"location":"cli-reference/init/#interactive-mode","title":"Interactive Mode","text":"<p>By default, the <code>init</code> command runs in interactive mode, guiding you through the setup process with a series of prompts:</p> <ol> <li>AWS region selection</li> <li>Environment name</li> <li>AWS credential validation</li> <li>Configuration file creation</li> </ol>"},{"location":"cli-reference/init/#non-interactive-mode","title":"Non-Interactive Mode","text":"<p>You can also run the command in non-interactive mode, which is useful for automated scripts:</p> Bash<pre><code>agentcore-cli init --no-interactive --region us-west-2 --environment dev\n</code></pre>"},{"location":"cli-reference/init/#configuration-file","title":"Configuration File","text":"<p>The <code>init</code> command creates a configuration file at <code>.agentcore/config.json</code> (or a custom path if specified). This file contains:</p> <ul> <li>Current environment</li> <li>Environment configurations</li> <li>AWS resources</li> <li>Sync settings</li> </ul>"},{"location":"cli-reference/init/#detailed-documentation","title":"Detailed Documentation","text":"<p>Complete documentation will be added in a future update.</p>"},{"location":"cli-reference/resources/","title":"Resources Commands","text":"<p>Work in Progress</p> <p>This page is currently under development.</p>"},{"location":"cli-reference/resources/#overview","title":"Overview","text":"<p>The <code>resources</code> command group contains all commands related to managing AWS resources, including ECR repositories, IAM roles, and Cognito user pools.</p>"},{"location":"cli-reference/resources/#commands","title":"Commands","text":""},{"location":"cli-reference/resources/#resources-ecr","title":"resources ecr","text":"<p>Manage ECR repositories.</p> Bash<pre><code># Create a repository\nagentcore-cli resources ecr create &lt;name&gt; [--image-scanning] [--region REGION]\n\n# List repositories\nagentcore-cli resources ecr list [--region REGION] [--environment ENV]\n\n# Delete a repository\nagentcore-cli resources ecr delete &lt;name&gt; [--region REGION] [--force]\n</code></pre>"},{"location":"cli-reference/resources/#resources-iam","title":"resources iam","text":"<p>Manage IAM roles.</p> Bash<pre><code># Create a role\nagentcore-cli resources iam create &lt;agent-name&gt; [--region REGION] [--role-prefix PREFIX] [--environment ENV]\n\n# List roles\nagentcore-cli resources iam list [--environment ENV]\n\n# Delete a role\nagentcore-cli resources iam delete &lt;agent-name&gt; [--environment ENV] [--force]\n</code></pre>"},{"location":"cli-reference/resources/#resources-cognito","title":"resources cognito","text":"<p>Manage Cognito resources.</p> Bash<pre><code># Create Cognito resources\nagentcore-cli resources cognito create &lt;agent-name&gt; [--allow-signup] [--environment ENV]\n\n# List Cognito resources\nagentcore-cli resources cognito list [--environment ENV]\n</code></pre>"},{"location":"cli-reference/resources/#detailed-documentation","title":"Detailed Documentation","text":"<p>Complete documentation for each command will be added in a future update.</p>"},{"location":"examples/langchain-agent/","title":"LangChain Agent Example","text":"<p>Work in Progress</p> <p>This page is currently under development.</p>"},{"location":"examples/langchain-agent/#overview","title":"Overview","text":"<p>This example demonstrates how to deploy a LangChain agent using AgentCore CLI. LangChain is a popular framework for building applications with large language models (LLMs).</p>"},{"location":"examples/langchain-agent/#prerequisites","title":"Prerequisites","text":"<p>Before starting this example, ensure you have:</p> <ul> <li>Completed the installation steps</li> <li>Initialized your project using <code>agentcore-cli init</code></li> <li>Basic understanding of LangChain</li> </ul>"},{"location":"examples/langchain-agent/#project-structure","title":"Project Structure","text":"<p>Create the following files:</p>"},{"location":"examples/langchain-agent/#dockerfile","title":"Dockerfile","text":"Docker<pre><code>FROM python:3.11-slim\n\nWORKDIR /app\n\n# Install dependencies\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy agent code\nCOPY app.py .\n\n# Run the agent\nCMD [\"python\", \"app.py\"]\n</code></pre>"},{"location":"examples/langchain-agent/#requirementstxt","title":"requirements.txt","text":"Text Only<pre><code>langchain&gt;=0.0.267\nlangchain-community&gt;=0.0.10\nlangchain-core&gt;=0.1.4\nboto3&gt;=1.28.0\nfastapi&gt;=0.104.1\nuvicorn&gt;=0.24.0\npydantic&gt;=2.4.2\n</code></pre>"},{"location":"examples/langchain-agent/#apppy","title":"app.py","text":"Python<pre><code># Example LangChain agent code will be added in a future update\n</code></pre>"},{"location":"examples/langchain-agent/#step-1-build-and-deploy","title":"Step 1: Build and Deploy","text":"<p>Deploy your LangChain agent:</p> Bash<pre><code>agentcore-cli agent create langchain-agent --dockerfile ./Dockerfile\n</code></pre>"},{"location":"examples/langchain-agent/#step-2-invoke-the-agent","title":"Step 2: Invoke the Agent","text":"<p>Invoke your deployed agent:</p> Bash<pre><code>agentcore-cli agent invoke langchain-agent --prompt \"What is the capital of France?\"\n</code></pre>"},{"location":"examples/langchain-agent/#langchain-agent-features","title":"LangChain Agent Features","text":"<p>The LangChain agent in this example includes:</p> <ul> <li>Chain of Thought Reasoning: Solving problems step-by-step</li> <li>Tool Usage: Accessing external tools when needed</li> <li>Memory: Maintaining conversation context</li> <li>Structured Output: Returning consistent response formats</li> </ul>"},{"location":"examples/langchain-agent/#advanced-configuration","title":"Advanced Configuration","text":"<p>Advanced LangChain configuration options will be added in a future update.</p>"},{"location":"examples/langchain-agent/#best-practices","title":"Best Practices","text":"<p>Guidelines for deploying LangChain agents will be added in a future update.</p>"},{"location":"examples/langchain-agent/#additional-resources","title":"Additional Resources","text":"<ul> <li>LangChain Documentation</li> <li>Agent Customization Tutorial</li> </ul>"},{"location":"getting-started/first-agent/","title":"Deploy Your First Agent","text":"<p>Work in Progress</p> <p>This page is currently under development.</p>"},{"location":"getting-started/first-agent/#overview","title":"Overview","text":"<p>This guide walks you through the process of deploying your first agent using AgentCore CLI. You'll learn how to create a simple agent, configure it, and deploy it to Amazon Bedrock AgentCore Runtime.</p>"},{"location":"getting-started/first-agent/#prerequisites","title":"Prerequisites","text":"<p>Before starting, ensure you have:</p> <ul> <li>Completed the installation steps</li> <li>Initialized your project using <code>agentcore-cli init</code></li> <li>Docker installed and running</li> </ul>"},{"location":"getting-started/first-agent/#step-1-create-a-simple-agent","title":"Step 1: Create a Simple Agent","text":"<p>Let's start by creating a basic agent that responds to prompts. Create the following files:</p>"},{"location":"getting-started/first-agent/#dockerfile","title":"Dockerfile","text":"Docker<pre><code>FROM python:3.11-slim\n\nWORKDIR /app\n\n# Install dependencies\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy agent code\nCOPY app.py .\n\n# Run the agent\nCMD [\"python\", \"app.py\"]\n</code></pre>"},{"location":"getting-started/first-agent/#apppy","title":"app.py","text":"Python<pre><code>import os\nimport json\nfrom http.server import HTTPServer, BaseHTTPRequestHandler\n\ndef handle_request(event, context):\n    \"\"\"Handle incoming requests to the agent.\"\"\"\n    # Parse the event\n    body = json.loads(event.get('body', '{}'))\n    prompt = body.get('prompt', 'Hello!')\n\n    # Process the prompt (customize this for your agent)\n    response = f\"You said: {prompt}\\nThis is my first AgentCore agent!\"\n\n    return {\n        \"statusCode\": 200,\n        \"headers\": {\n            \"Content-Type\": \"application/json\"\n        },\n        \"body\": json.dumps({\n            \"response\": response\n        })\n    }\n\nclass AgentHandler(BaseHTTPRequestHandler):\n    def do_POST(self):\n        content_length = int(self.headers['Content-Length'])\n        post_data = self.rfile.read(content_length)\n        event = json.loads(post_data.decode('utf-8'))\n\n        # Call the handler\n        result = handle_request(event, {})\n\n        # Send response\n        self.send_response(200)\n        self.send_header('Content-type', 'application/json')\n        self.end_headers()\n        self.wfile.write(json.dumps(result).encode('utf-8'))\n\nif __name__ == \"__main__\":\n    # Start server\n    port = int(os.environ.get('PORT', 8080))\n    httpd = HTTPServer(('0.0.0.0', port), AgentHandler)\n    print(f\"Starting agent on port {port}...\")\n    httpd.serve_forever()\n</code></pre>"},{"location":"getting-started/first-agent/#requirementstxt","title":"requirements.txt","text":"Text Only<pre><code># No external dependencies for this simple example\n</code></pre>"},{"location":"getting-started/first-agent/#step-2-deploy-the-agent","title":"Step 2: Deploy the Agent","text":"<p>Now that you have created the agent files, deploy it using AgentCore CLI:</p> Bash<pre><code>agentcore-cli agent create first-agent --dockerfile ./Dockerfile\n</code></pre> <p>This command will:</p> <ol> <li>Build your Docker image</li> <li>Create an ECR repository if it doesn't exist</li> <li>Push the image to ECR</li> <li>Create an IAM role with necessary permissions</li> <li>Deploy the agent runtime on Bedrock AgentCore</li> </ol>"},{"location":"getting-started/first-agent/#step-3-test-the-agent","title":"Step 3: Test the Agent","text":"<p>Test your deployed agent by invoking it:</p> Bash<pre><code>agentcore-cli agent invoke first-agent --prompt \"Hello, AgentCore!\"\n</code></pre> <p>You should see a response similar to:</p> Text Only<pre><code>\ud83e\udd16 Agent Response:\nYou said: Hello, AgentCore!\nThis is my first AgentCore agent!\n</code></pre>"},{"location":"getting-started/first-agent/#step-4-check-agent-status","title":"Step 4: Check Agent Status","text":"<p>Check the status of your agent:</p> Bash<pre><code>agentcore-cli agent status first-agent\n</code></pre> <p>This will show you:</p> <ul> <li>The agent's current version</li> <li>Available endpoints</li> <li>Deployment status</li> <li>Resource usage</li> </ul>"},{"location":"getting-started/first-agent/#next-steps","title":"Next Steps","text":"<p>Now that you've deployed your first agent, you can:</p> <ul> <li>Customize your agent with more advanced functionality</li> <li>Learn about agent lifecycle management</li> <li>Set up multiple environments</li> <li>Implement more sophisticated agents</li> </ul>"},{"location":"getting-started/first-agent/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues:</p> <ul> <li>Ensure Docker is running and properly configured</li> <li>Verify your AWS credentials are valid</li> <li>Check that you have the necessary permissions</li> <li>See the troubleshooting guide for more help</li> </ul>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>This guide will help you install and set up the AgentCore CLI on your system.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing the AgentCore CLI, ensure you have:</p> <ul> <li>Python 3.11+ installed on your system</li> <li>Docker installed and running (for building and managing container images)</li> <li>AWS CLI configured with appropriate permissions</li> <li>Access to Amazon Bedrock AgentCore Runtime (Preview)</li> </ul>"},{"location":"getting-started/installation/#installation-options","title":"Installation Options","text":"From PyPI (Recommended)From Source Bash<pre><code># Install using pip\npip install agentcore-cli\n\n# Or using uv (recommended)\nuv pip install agentcore-cli\n</code></pre> Bash<pre><code># Clone the repository\ngit clone https://github.com/theagenticguy/agentcore-cli.git\ncd agentcore-cli\n\n# Install dependencies using uv (recommended)\nuv sync\n\n# Or install using pip\npip install -e .\n</code></pre>"},{"location":"getting-started/installation/#verifying-installation","title":"Verifying Installation","text":"<p>After installation, verify that the AgentCore CLI is working correctly:</p> Bash<pre><code>agentcore-cli --version\n</code></pre> <p>You should see the version number and a welcome banner.</p>"},{"location":"getting-started/installation/#aws-credentials","title":"AWS Credentials","text":"<p>The AgentCore CLI requires valid AWS credentials to function. You can set these up in several ways:</p> AWS CLI ConfigurationEnvironment VariablesAWS SSOIAM Roles Bash<pre><code>aws configure\n</code></pre> <p>You'll be prompted to enter:</p> <ul> <li>AWS Access Key ID</li> <li>AWS Secret Access Key</li> <li>Default region name</li> <li>Default output format (optional)</li> </ul> Bash<pre><code>export AWS_ACCESS_KEY_ID=your_access_key_id\nexport AWS_SECRET_ACCESS_KEY=your_secret_access_key\nexport AWS_DEFAULT_REGION=us-west-2\n</code></pre> <p>If your organization uses AWS Single Sign-On:</p> Bash<pre><code>aws sso login --profile your-sso-profile\nexport AWS_PROFILE=your-sso-profile\n</code></pre> <p>If you're running on an EC2 instance or ECS container, you can use IAM roles attached to your compute resource.</p>"},{"location":"getting-started/installation/#required-aws-permissions","title":"Required AWS Permissions","text":"<p>The AgentCore CLI requires the following AWS permissions:</p> <ul> <li>Bedrock AgentCore: For runtime management</li> <li>ECR: For repository and image management</li> <li>IAM: For role creation and management</li> <li>CloudFormation: For stack management</li> <li>Cognito: For user pool management</li> <li>Parameter Store: For configuration sync</li> <li>CloudWatch Logs: For monitoring</li> </ul> <p>Here's a sample IAM policy with the minimum required permissions:</p> JSON<pre><code>{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"bedrock-agentcore:*\",\n        \"bedrock-agentcore-control:*\",\n        \"ecr:*\",\n        \"iam:CreateRole\",\n        \"iam:AttachRolePolicy\",\n        \"iam:PassRole\",\n        \"iam:GetRole\",\n        \"iam:DeleteRole\",\n        \"iam:DetachRolePolicy\",\n        \"cloudformation:*\",\n        \"cognito-idp:*\",\n        \"cognito-identity:*\",\n        \"ssm:GetParameter\",\n        \"ssm:PutParameter\",\n        \"ssm:DeleteParameter\",\n        \"ssm:DescribeParameters\",\n        \"logs:CreateLogGroup\",\n        \"logs:CreateLogStream\",\n        \"logs:PutLogEvents\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n</code></pre> <p>Warning</p> <p>This is a sample policy with broad permissions. In production, you should follow the principle of least privilege and restrict permissions to only what's necessary.</p>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Once you've installed the AgentCore CLI, you're ready to:</p> <ol> <li>Run the initialization wizard to set up your project</li> <li>Deploy your first agent</li> </ol> <p>If you encounter any issues during installation, see our troubleshooting guide.</p>"},{"location":"getting-started/quick-start/","title":"Quick Start Guide","text":"<p>This guide will get you up and running with AgentCore CLI in just a few minutes. Follow these steps to set up your environment and deploy your first agent.</p>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":"<p>Before starting, ensure you have:</p> <ul> <li>Installed AgentCore CLI</li> <li>AWS credentials configured</li> <li>Docker installed and running</li> </ul>"},{"location":"getting-started/quick-start/#step-1-initialize-your-project","title":"Step 1: Initialize Your Project","text":"<p>Start by initializing your AgentCore CLI project:</p> Interactive Setup (Recommended)Non-Interactive Setup <p>Run the initialization wizard with:</p> Bash<pre><code>agentcore-cli init\n</code></pre> <p>The interactive wizard will guide you through:</p> <ul> <li>AWS region selection</li> <li>Environment setup</li> <li>Confirmation of required AWS resources</li> </ul> <p>For automated or script-based setup:</p> Bash<pre><code>agentcore-cli init --no-interactive \\\n  --region us-west-2 \\\n  --environment dev\n</code></pre> <p>Once initialization is complete, you'll have:</p> <ul> <li>A default environment (<code>dev</code>) configured</li> <li>AWS region set</li> <li>Basic configuration file created at <code>.agentcore/config.json</code></li> </ul>"},{"location":"getting-started/quick-start/#step-2-deploy-your-first-agent","title":"Step 2: Deploy Your First Agent","text":"<p>Now let's deploy a simple agent. Create a minimal Dockerfile or use our example:</p> Dockerfile<pre><code>FROM python:3.11-slim\n\nWORKDIR /app\n\n# Install dependencies\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy agent code\nCOPY app.py .\n\n# Run the agent\nCMD [\"python\", \"app.py\"]\n</code></pre> <p>Create a simple Python agent:</p> app.py<pre><code>import os\nimport json\n\ndef handle_request(event, context):\n    # Parse the event\n    body = json.loads(event.get('body', '{}'))\n    prompt = body.get('prompt', 'Hello!')\n\n    # Simple echo agent\n    response = f\"You said: {prompt}\"\n\n    return {\n        \"statusCode\": 200,\n        \"headers\": {\n            \"Content-Type\": \"application/json\"\n        },\n        \"body\": json.dumps({\n            \"response\": response\n        })\n    }\n\nif __name__ == \"__main__\":\n    # AWS Bedrock AgentCore Runtime will invoke handle_request\n    from http.server import HTTPServer, BaseHTTPRequestHandler\n    import json\n\n    class AgentHandler(BaseHTTPRequestHandler):\n        def do_POST(self):\n            content_length = int(self.headers['Content-Length'])\n            post_data = self.rfile.read(content_length)\n            event = json.loads(post_data.decode('utf-8'))\n\n            # Call the handler\n            result = handle_request(event, {})\n\n            # Send response\n            self.send_response(200)\n            self.send_header('Content-type', 'application/json')\n            self.end_headers()\n            self.wfile.write(json.dumps(result).encode('utf-8'))\n\n    # Start server\n    port = int(os.environ.get('PORT', 8080))\n    httpd = HTTPServer(('0.0.0.0', port), AgentHandler)\n    print(f\"Starting server on port {port}...\")\n    httpd.serve_forever()\n</code></pre> <p>And a requirements file:</p> requirements.txt<pre><code># No external dependencies for this simple example\n</code></pre> <p>Now deploy your agent:</p> Bash<pre><code>agentcore-cli agent create echo-agent --dockerfile ./Dockerfile\n</code></pre> <p>This single command will:</p> <ol> <li>Build your Docker image</li> <li>Create an ECR repository if it doesn't exist</li> <li>Push the image to ECR</li> <li>Create an IAM role with necessary permissions</li> <li>Deploy the agent runtime on Bedrock AgentCore</li> <li>Configure a default endpoint</li> </ol>"},{"location":"getting-started/quick-start/#step-3-test-your-agent","title":"Step 3: Test Your Agent","text":"<p>Test your deployed agent with:</p> Bash<pre><code>agentcore-cli agent invoke echo-agent --prompt \"Hello from AgentCore!\"\n</code></pre> <p>You should see a response similar to:</p> Text Only<pre><code>\ud83e\udd16 Agent Response:\nYou said: Hello from AgentCore!\n</code></pre>"},{"location":"getting-started/quick-start/#step-4-check-agent-status","title":"Step 4: Check Agent Status","text":"<p>View the status of your deployed agent:</p> Bash<pre><code>agentcore-cli agent status echo-agent\n</code></pre> <p>This will show: - Current runtime version - Available endpoints - Deployment status - Container image details</p>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<p>You've successfully deployed your first agent! Here's what to explore next:</p> <ul> <li>Deploy your first agent - A more detailed tutorial</li> <li>Environment management - Learn about dev/staging/prod separation</li> <li>Agent lifecycle - Creating, updating, and managing agents</li> <li>Container operations - Docker and ECR management</li> </ul>"},{"location":"getting-started/quick-start/#common-issues","title":"Common Issues","text":"<p>If you encounter any problems:</p> <ul> <li>Ensure Docker is running (<code>docker ps</code>)</li> <li>Verify AWS credentials are valid (<code>aws sts get-caller-identity</code>)</li> <li>Check that you have required permissions for Bedrock AgentCore and ECR</li> <li>See our troubleshooting guide for more help</li> </ul>"},{"location":"troubleshooting/common-issues/","title":"Common Issues and Solutions","text":"<p>Work in Progress</p> <p>This page is currently under development.</p>"},{"location":"troubleshooting/common-issues/#overview","title":"Overview","text":"<p>This guide addresses common issues you might encounter when using AgentCore CLI and provides solutions to help you resolve them quickly.</p>"},{"location":"troubleshooting/common-issues/#aws-credentials","title":"AWS Credentials","text":""},{"location":"troubleshooting/common-issues/#issue-invalid-aws-credentials","title":"Issue: Invalid AWS Credentials","text":"<p>Symptoms: - Error message: \"\u274c AWS credentials not found or invalid\" - Commands fail with authentication errors</p> <p>Solutions:</p> <ol> <li> <p>Verify your credentials are set up:    Bash<pre><code>aws sts get-caller-identity\n</code></pre></p> </li> <li> <p>Configure AWS CLI:    Bash<pre><code>aws configure\n</code></pre></p> </li> <li> <p>Set environment variables:    Bash<pre><code>export AWS_ACCESS_KEY_ID=your_access_key_id\nexport AWS_SECRET_ACCESS_KEY=your_secret_access_key\nexport AWS_DEFAULT_REGION=us-west-2\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/common-issues/#issue-insufficient-permissions","title":"Issue: Insufficient Permissions","text":"<p>Symptoms: - Error message: \"AccessDenied\" or \"User is not authorized\" - Operations fail despite valid credentials</p> <p>Solutions:</p> <ol> <li>Review the required AWS permissions</li> <li>Ensure your IAM user or role has the necessary permissions</li> <li>Use the <code>--verbose</code> flag to see detailed error messages</li> </ol>"},{"location":"troubleshooting/common-issues/#docker-issues","title":"Docker Issues","text":""},{"location":"troubleshooting/common-issues/#issue-docker-not-running","title":"Issue: Docker Not Running","text":"<p>Symptoms: - Error message: \"Cannot connect to the Docker daemon\" - Container operations fail</p> <p>Solutions:</p> <ol> <li> <p>Start Docker service:    Bash<pre><code># Linux\nsudo systemctl start docker\n\n# macOS/Windows\n# Start Docker Desktop application\n</code></pre></p> </li> <li> <p>Verify Docker is running:    Bash<pre><code>docker ps\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/common-issues/#issue-docker-build-errors","title":"Issue: Docker Build Errors","text":"<p>Symptoms: - Error during container build process - Build fails with specific error messages</p> <p>Solutions:</p> <ol> <li>Check your Dockerfile syntax</li> <li>Ensure all referenced files exist</li> <li>Try building manually to see detailed errors:    Bash<pre><code>docker build -t test-image -f Dockerfile .\n</code></pre></li> </ol>"},{"location":"troubleshooting/common-issues/#configuration-issues","title":"Configuration Issues","text":""},{"location":"troubleshooting/common-issues/#issue-configuration-file-not-found","title":"Issue: Configuration File Not Found","text":"<p>Symptoms: - Error message: \"Configuration file not found\" - Commands fail with configuration-related errors</p> <p>Solutions:</p> <ol> <li> <p>Run initialization:    Bash<pre><code>agentcore-cli init\n</code></pre></p> </li> <li> <p>Specify custom config path:    Bash<pre><code>agentcore-cli --config /path/to/config.json &lt;command&gt;\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/common-issues/#issue-configuration-drift","title":"Issue: Configuration Drift","text":"<p>Symptoms: - Error message: \"Configuration drift detected\" - Local and cloud configurations are out of sync</p> <p>Solutions:</p> <ol> <li> <p>Check sync status:    Bash<pre><code>agentcore-cli config sync status\n</code></pre></p> </li> <li> <p>Push local changes to cloud:    Bash<pre><code>agentcore-cli config sync push\n</code></pre></p> </li> <li> <p>Pull cloud changes to local:    Bash<pre><code>agentcore-cli config sync pull\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/common-issues/#deployment-issues","title":"Deployment Issues","text":""},{"location":"troubleshooting/common-issues/#issue-agent-deployment-fails","title":"Issue: Agent Deployment Fails","text":"<p>Symptoms: - Error during agent creation or update - Agent status shows error state</p> <p>Solutions:</p> <ol> <li>Check AWS service quotas</li> <li>Verify IAM permissions</li> <li>Check CloudFormation stack events:    Bash<pre><code>aws cloudformation describe-stack-events --stack-name &lt;stack-name&gt;\n</code></pre></li> </ol>"},{"location":"troubleshooting/common-issues/#issue-agent-invocation-fails","title":"Issue: Agent Invocation Fails","text":"<p>Symptoms: - Error when invoking an agent - Timeouts or connection errors</p> <p>Solutions:</p> <ol> <li> <p>Check agent status:    Bash<pre><code>agentcore-cli agent status &lt;agent-name&gt;\n</code></pre></p> </li> <li> <p>Verify agent is deployed correctly</p> </li> <li>Check agent logs in CloudWatch</li> </ol>"},{"location":"troubleshooting/common-issues/#general-troubleshooting","title":"General Troubleshooting","text":""},{"location":"troubleshooting/common-issues/#using-verbose-mode","title":"Using Verbose Mode","text":"<p>For detailed error information, use the verbose flag:</p> Bash<pre><code>agentcore-cli --verbose &lt;command&gt;\n</code></pre>"},{"location":"troubleshooting/common-issues/#checking-logs","title":"Checking Logs","text":"<p>View logs in CloudWatch for runtime issues:</p> Bash<pre><code>aws logs describe-log-groups --log-group-name-prefix /aws/lambda/agentcore\n</code></pre>"},{"location":"troubleshooting/common-issues/#getting-help","title":"Getting Help","text":"<p>If you continue to encounter issues:</p> <ol> <li>Check the GitHub repository for known issues</li> <li>Submit a detailed bug report including:</li> <li>Command being run</li> <li>Error message</li> <li>Environment information</li> <li>Steps to reproduce</li> </ol>"},{"location":"tutorials/agent-customization/","title":"Agent Customization","text":"<p>Work in Progress</p> <p>This page is currently under development.</p>"},{"location":"tutorials/agent-customization/#overview","title":"Overview","text":"<p>This tutorial guides you through the process of customizing an agent with advanced functionality, including integration with external APIs, handling complex prompts, and implementing custom logic.</p>"},{"location":"tutorials/agent-customization/#prerequisites","title":"Prerequisites","text":"<p>Before starting this tutorial, ensure you have:</p> <ul> <li>Completed the Deploy Your First Agent guide</li> <li>Basic understanding of Python and Docker</li> <li>AWS credentials properly configured</li> </ul>"},{"location":"tutorials/agent-customization/#basic-agent-structure","title":"Basic Agent Structure","text":"<p>A standard agent consists of:</p> <ol> <li>Dockerfile - Defines the container environment</li> <li>app.py - Contains the agent's logic</li> <li>requirements.txt - Lists Python dependencies</li> </ol>"},{"location":"tutorials/agent-customization/#adding-external-api-integration","title":"Adding External API Integration","text":"<p>To integrate with external APIs:</p> Python<pre><code># Example code will be added in a future update\n</code></pre>"},{"location":"tutorials/agent-customization/#implementing-custom-logic","title":"Implementing Custom Logic","text":"<p>Add custom logic to your agent:</p> Python<pre><code># Example code will be added in a future update\n</code></pre>"},{"location":"tutorials/agent-customization/#handling-complex-prompts","title":"Handling Complex Prompts","text":"<p>Process structured prompts:</p> Python<pre><code># Example code will be added in a future update\n</code></pre>"},{"location":"tutorials/agent-customization/#advanced-configuration","title":"Advanced Configuration","text":"<p>Configure advanced options:</p> Python<pre><code># Example code will be added in a future update\n</code></pre>"},{"location":"tutorials/agent-customization/#deployment-and-testing","title":"Deployment and Testing","text":"<p>Deploy and test your customized agent:</p> Bash<pre><code># Example commands will be added in a future update\n</code></pre>"},{"location":"tutorials/agent-customization/#best-practices","title":"Best Practices","text":"<p>Guidelines for agent customization will be added in a future update.</p>"},{"location":"tutorials/agent-customization/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about agent lifecycle management</li> <li>Implement more sophisticated agents</li> </ul>"},{"location":"user-guide/agents/","title":"Agent Lifecycle Management","text":"<p>Work in Progress</p> <p>This page is currently under development.</p>"},{"location":"user-guide/agents/#overview","title":"Overview","text":"<p>Agent lifecycle management is a fundamental aspect of AgentCore CLI that covers the creation, versioning, deployment, invocation, and deletion of agent runtimes.</p>"},{"location":"user-guide/agents/#agent-concepts","title":"Agent Concepts","text":"<ul> <li>Agent Runtime: A containerized AI application deployed on Amazon Bedrock AgentCore Runtime</li> <li>Versions: Immutable snapshots of an agent at a specific point in time</li> <li>Endpoints: Named pointers to specific versions (e.g., DEFAULT, production, staging)</li> <li>Invocation: Sending requests to an agent through an endpoint</li> <li>Lifecycle: The complete process from creation to deletion</li> </ul>"},{"location":"user-guide/agents/#agent-creation","title":"Agent Creation","text":"<p>Create a new agent using the <code>agent create</code> command:</p> Bash<pre><code>agentcore-cli agent create my-bot --dockerfile ./Dockerfile\n</code></pre>"},{"location":"user-guide/agents/#agent-versioning","title":"Agent Versioning","text":"<p>AgentCore CLI uses an immutable versioning system where every update creates a new version:</p> Bash<pre><code># Update an agent, creating a new version\nagentcore-cli agent update my-bot --image-tag v2.0.0\n</code></pre>"},{"location":"user-guide/agents/#endpoint-management","title":"Endpoint Management","text":"<p>Endpoints can point to any version, enabling safe rollbacks and blue-green deployments:</p> Bash<pre><code># Update a specific endpoint to point to a version\nagentcore-cli agent update my-bot --endpoint production --image-tag stable-v1\n</code></pre>"},{"location":"user-guide/agents/#agent-invocation","title":"Agent Invocation","text":"<p>Invoke an agent with a prompt or payload:</p> Bash<pre><code># Invoke with a text prompt\nagentcore-cli agent invoke my-bot --prompt \"Hello, agent!\"\n\n# Invoke with a custom payload\nagentcore-cli agent invoke my-bot --payload '{\"query\": \"Hello\", \"max_tokens\": 100}'\n</code></pre>"},{"location":"user-guide/agents/#agent-status-and-listing","title":"Agent Status and Listing","text":"<p>View the status of agents and list deployed agents:</p> Bash<pre><code># Show status of a specific agent\nagentcore-cli agent status my-bot\n\n# List all agents\nagentcore-cli agent list\n</code></pre>"},{"location":"user-guide/agents/#agent-deletion","title":"Agent Deletion","text":"<p>Delete agents that are no longer needed:</p> Bash<pre><code>agentcore-cli agent delete my-bot --force\n</code></pre>"},{"location":"user-guide/agents/#best-practices","title":"Best Practices","text":"<p>Guidelines for agent lifecycle management will be added in a future update.</p>"},{"location":"user-guide/agents/#detailed-documentation","title":"Detailed Documentation","text":"<p>Complete documentation will be added in a future update.</p>"},{"location":"user-guide/containers/","title":"Container Operations","text":"<p>Work in Progress</p> <p>This page is currently under development.</p>"},{"location":"user-guide/containers/#overview","title":"Overview","text":"<p>Container operations in AgentCore CLI allow you to build, push, pull, and manage Docker containers that run your AI agents.</p>"},{"location":"user-guide/containers/#container-concepts","title":"Container Concepts","text":"<ul> <li>Docker Integration: Built-in support for Docker operations</li> <li>ECR Integration: Automatic Amazon ECR repository management</li> <li>Image Tags: Versioning system for container images</li> <li>Build Arguments: Custom variables passed during Docker build</li> <li>Container Registry: Central storage for container images</li> </ul>"},{"location":"user-guide/containers/#building-containers","title":"Building Containers","text":"<p>Build a container image from a Dockerfile:</p> Bash<pre><code>agentcore-cli container build my-bot \\\n  --dockerfile ./Dockerfile \\\n  --context ./src \\\n  --build-args API_KEY=secret123\n</code></pre>"},{"location":"user-guide/containers/#pushing-to-ecr","title":"Pushing to ECR","text":"<p>Push a container image to Amazon ECR:</p> Bash<pre><code>agentcore-cli container push my-bot \\\n  --tag v1.0.0 \\\n  --region us-west-2 \\\n  --create-repo\n</code></pre>"},{"location":"user-guide/containers/#listing-images","title":"Listing Images","text":"<p>List container images in a repository:</p> Bash<pre><code>agentcore-cli container list --repository my-bot\n</code></pre>"},{"location":"user-guide/containers/#pulling-images","title":"Pulling Images","text":"<p>Pull a container image from ECR:</p> Bash<pre><code>agentcore-cli container pull my-bot --tag v1.0.0\n</code></pre>"},{"location":"user-guide/containers/#removing-images","title":"Removing Images","text":"<p>Remove container images locally and/or from ECR:</p> Bash<pre><code>agentcore-cli container remove my-bot --tag v1.0.0 --local-only\n</code></pre>"},{"location":"user-guide/containers/#container-architecture","title":"Container Architecture","text":"<p>AgentCore CLI uses a container architecture that:</p> <ul> <li>Provides consistent execution environments</li> <li>Enables easy deployment and scaling</li> <li>Supports any AI framework or library</li> <li>Integrates with AWS Bedrock AgentCore Runtime</li> </ul>"},{"location":"user-guide/containers/#best-practices","title":"Best Practices","text":"<p>Guidelines for container operations will be added in a future update.</p>"},{"location":"user-guide/containers/#detailed-documentation","title":"Detailed Documentation","text":"<p>Complete documentation will be added in a future update.</p>"},{"location":"user-guide/environments/","title":"Environment Management","text":"<p>Work in Progress</p> <p>This page is currently under development.</p>"},{"location":"user-guide/environments/#overview","title":"Overview","text":"<p>Environment management is a core feature of AgentCore CLI that allows you to create, manage, and switch between isolated environments such as development, staging, and production.</p>"},{"location":"user-guide/environments/#environment-concepts","title":"Environment Concepts","text":"<ul> <li>Environment: A logical grouping of AWS resources and configurations</li> <li>Environment Isolation: Complete separation of resources between environments</li> <li>Regional Deployment: Each environment can be deployed to a different AWS region</li> <li>Environment Variables: Environment-specific configuration values</li> <li>Default Agent: Each environment can have a default agent runtime</li> </ul>"},{"location":"user-guide/environments/#creating-environments","title":"Creating Environments","text":"<p>Create new environments using the <code>env create</code> command:</p> Bash<pre><code>agentcore-cli env create prod --region us-east-1 --set-current\n</code></pre>"},{"location":"user-guide/environments/#switching-between-environments","title":"Switching Between Environments","text":"<p>Switch the active environment with the <code>env use</code> command:</p> Bash<pre><code>agentcore-cli env use dev\n</code></pre>"},{"location":"user-guide/environments/#environment-variables","title":"Environment Variables","text":"<p>Manage environment-specific variables:</p> Bash<pre><code># Set environment variables\nagentcore-cli env vars --set DEBUG=true --set API_URL=https://api.dev.example.com\n\n# List environment variables\nagentcore-cli env vars --list\n</code></pre>"},{"location":"user-guide/environments/#environment-specific-resources","title":"Environment-Specific Resources","text":"<p>When creating resources, you can specify the target environment:</p> Bash<pre><code># Create agent in a specific environment\nagentcore-cli agent create my-bot --environment prod\n\n# List resources in a specific environment\nagentcore-cli resources iam list --environment staging\n</code></pre>"},{"location":"user-guide/environments/#environment-deletion","title":"Environment Deletion","text":"<p>Delete environments that are no longer needed:</p> Bash<pre><code>agentcore-cli env delete old-env --force\n</code></pre>"},{"location":"user-guide/environments/#best-practices","title":"Best Practices","text":"<p>Guidelines for working with environments will be added in a future update.</p>"},{"location":"user-guide/environments/#detailed-documentation","title":"Detailed Documentation","text":"<p>Complete documentation will be added in a future update.</p>"},{"location":"reference/agentcore_cli/","title":"agentcore_cli","text":""},{"location":"reference/agentcore_cli/#agentcore_cli","title":"<code>agentcore_cli</code>","text":""},{"location":"reference/agentcore_cli/cli/","title":"agentcore_cli.cli","text":""},{"location":"reference/agentcore_cli/cli/#agentcore_cli.cli","title":"<code>agentcore_cli.cli</code>","text":"<p>AgentCore Platform CLI - Main entry point.</p> <p>A production-ready CLI for deploying and managing AI agents on AWS Bedrock AgentCore Runtime. Built with environment-first architecture, robust CloudFormation automation, and sophisticated configuration management.</p>"},{"location":"reference/agentcore_cli/cli/#agentcore_cli.cli.cli","title":"<code>cli(ctx, config=None, verbose=False, quiet=False)</code>","text":"<p>\ud83d\ude80 AgentCore Platform CLI - Deploy and manage AI agents on AWS Bedrock AgentCore Runtime</p> <p>\b ARCHITECTURE HIGHLIGHTS: \u2022 Environment-First Design: Clean dev/staging/prod separation \u2022 Container-Native: Docker build and ECR integration \u2022 Infrastructure as Code: CloudFormation with robust polling \u2022 Configuration Sync: Sophisticated drift detection with DeepDiff \u2022 Security-First: Integrated Cognito auth and IAM management</p> <p>\b QUICK START: \u2022 Initialize project:    agentcore-cli init \u2022 Create agent:          agentcore-cli agent create my-bot --dockerfile ./Dockerfile \u2022 Invoke agent:          agentcore-cli agent invoke my-bot --prompt \"Hello!\" \u2022 Switch environment:    agentcore-cli env use prod \u2022 Sync configuration:    agentcore-cli config sync --push</p> <p>\b COMMAND GROUPS: \u2022 init        Interactive setup wizard \u2022 agent       Agent lifecycle management (create, deploy, invoke, delete) \u2022 env         Environment management (dev, staging, prod) \u2022 container   Docker build and push operations \u2022 config      Configuration and cloud sync management \u2022 resources   AWS resource management (ECR, IAM, Cognito)</p> <p>Use 'agentcore-cli  --help' for detailed help on any command. Source code in <code>agentcore_cli/cli.py</code> Python<pre><code>@click.group(context_settings={\"help_option_names\": [\"-h\", \"--help\"], \"max_content_width\": 120})\n@click.option(\n    \"--version\", is_flag=True, callback=print_version, expose_value=False, is_eager=True, help=\"Show version and exit\"\n)\n@click.option(\"--config\", help=\"Path to config file (default: .agentcore/config.json)\", envvar=\"AGENTCORE_CONFIG\")\n@click.option(\"--verbose\", \"-v\", is_flag=True, help=\"Enable verbose logging\", envvar=\"AGENTCORE_VERBOSE\")\n@click.option(\"--quiet\", \"-q\", is_flag=True, help=\"Suppress non-error output\")\n@click.pass_context\ndef cli(ctx: click.Context, config: str | None = None, verbose: bool = False, quiet: bool = False) -&gt; None:\n    \"\"\"\n    \ud83d\ude80 AgentCore Platform CLI - Deploy and manage AI agents on AWS Bedrock AgentCore Runtime\n\n    \\b\n    ARCHITECTURE HIGHLIGHTS:\n    \u2022 Environment-First Design: Clean dev/staging/prod separation\n    \u2022 Container-Native: Docker build and ECR integration\n    \u2022 Infrastructure as Code: CloudFormation with robust polling\n    \u2022 Configuration Sync: Sophisticated drift detection with DeepDiff\n    \u2022 Security-First: Integrated Cognito auth and IAM management\n\n    \\b\n    QUICK START:\n    \u2022 Initialize project:    agentcore-cli init\n    \u2022 Create agent:          agentcore-cli agent create my-bot --dockerfile ./Dockerfile\n    \u2022 Invoke agent:          agentcore-cli agent invoke my-bot --prompt \"Hello!\"\n    \u2022 Switch environment:    agentcore-cli env use prod\n    \u2022 Sync configuration:    agentcore-cli config sync --push\n\n    \\b\n    COMMAND GROUPS:\n    \u2022 init        Interactive setup wizard\n    \u2022 agent       Agent lifecycle management (create, deploy, invoke, delete)\n    \u2022 env         Environment management (dev, staging, prod)\n    \u2022 container   Docker build and push operations\n    \u2022 config      Configuration and cloud sync management\n    \u2022 resources   AWS resource management (ECR, IAM, Cognito)\n\n    Use 'agentcore-cli &lt;command&gt; --help' for detailed help on any command.\n    \"\"\"\n    # Ensure context object exists\n    ctx.ensure_object(dict)\n\n    # Configure logging based on flags\n    if verbose:\n        logger.remove()\n        logger.add(\n            sys.stderr,\n            format=\"&lt;green&gt;{time:HH:mm:ss.SSS}&lt;/green&gt; | &lt;level&gt;{level: &lt;8}&lt;/level&gt; | &lt;cyan&gt;{name}&lt;/cyan&gt;:&lt;cyan&gt;{function}&lt;/cyan&gt;:&lt;cyan&gt;{line}&lt;/cyan&gt; - &lt;level&gt;{message}&lt;/level&gt;\",\n            level=\"DEBUG\",\n        )\n        ctx.obj[\"verbose\"] = True\n    elif quiet:\n        logger.remove()\n        logger.add(sys.stderr, level=\"ERROR\")\n        ctx.obj[\"quiet\"] = True\n\n    # Store config path if provided\n    if config:\n        ctx.obj[\"config_path\"] = Path(config)\n\n    # Validate AWS credentials early for most commands\n    if ctx.invoked_subcommand not in [\"init\", \"--help\", \"--version\"]:\n        from agentcore_cli.utils.aws_utils import validate_aws_credentials\n\n        if not validate_aws_credentials():\n            click.echo(\"\u274c \", nl=False, err=True)\n            click.echo(click.style(\"AWS credentials not found or invalid\", fg=\"red\"), err=True)\n            click.echo(\"\", err=True)\n            click.echo(\"Please configure AWS credentials using one of:\", err=True)\n            click.echo(\"  \u2022 aws configure\", err=True)\n            click.echo(\"  \u2022 export AWS_ACCESS_KEY_ID=... &amp;&amp; export AWS_SECRET_ACCESS_KEY=...\", err=True)\n            click.echo(\"  \u2022 Use IAM roles or AWS SSO\", err=True)\n            click.echo(\"\", err=True)\n            click.echo(\"Then run: agentcore-cli init\", err=True)\n            sys.exit(1)\n</code></pre>"},{"location":"reference/agentcore_cli/cli/#agentcore_cli.cli.deploy_shortcut","title":"<code>deploy_shortcut(name, dockerfile='Dockerfile')</code>","text":"<p>Quick deploy shortcut (hidden - use 'agent create' instead).</p> Source code in <code>agentcore_cli/cli.py</code> Python<pre><code>@cli.command(\"deploy\", hidden=True)\n@click.argument(\"name\")\n@click.option(\"--dockerfile\", default=\"Dockerfile\", help=\"Path to Dockerfile\")\ndef deploy_shortcut(name: str, dockerfile: str = \"Dockerfile\") -&gt; None:\n    \"\"\"Quick deploy shortcut (hidden - use 'agent create' instead).\"\"\"\n    click.echo(\"\ud83d\udca1 Use 'agentcore-cli agent create' for full functionality:\")\n    click.echo(f\"   agentcore-cli agent create {name} --dockerfile {dockerfile}\")\n</code></pre>"},{"location":"reference/agentcore_cli/cli/#agentcore_cli.cli.handle_exception","title":"<code>handle_exception(exc_type, exc_value, exc_traceback)</code>","text":"<p>Global exception handler for better error messages.</p> Source code in <code>agentcore_cli/cli.py</code> Python<pre><code>def handle_exception(\n    exc_type: type[BaseException], exc_value: BaseException, exc_traceback: TracebackType | None\n) -&gt; None:\n    \"\"\"Global exception handler for better error messages.\"\"\"\n    if issubclass(exc_type, KeyboardInterrupt):\n        click.echo(\"\\n\u26a0\ufe0f  Operation cancelled by user\", err=True)\n        sys.exit(1)\n    elif issubclass(exc_type, click.ClickException):\n        # Let Click handle its own exceptions\n        raise exc_value\n    else:\n        # Log unexpected errors\n        logger.error(f\"Unexpected error: {exc_value}\")\n        # Show full traceback in verbose mode (check environment variable)\n        import os\n\n        if os.getenv(\"AGENTCORE_VERBOSE\"):\n            import traceback\n\n            traceback.print_exception(exc_type, exc_value, exc_traceback)\n        else:\n            click.echo(\"\u274c An unexpected error occurred. Use --verbose for details.\", err=True)\n        sys.exit(1)\n</code></pre>"},{"location":"reference/agentcore_cli/cli/#agentcore_cli.cli.invoke_shortcut","title":"<code>invoke_shortcut(name, prompt=None)</code>","text":"<p>Quick invoke shortcut (hidden - use 'agent invoke' instead).</p> Source code in <code>agentcore_cli/cli.py</code> Python<pre><code>@cli.command(\"invoke\", hidden=True)\n@click.argument(\"name\")\n@click.option(\"--prompt\", help=\"Prompt for the agent\")\ndef invoke_shortcut(name: str, prompt: str | None = None) -&gt; None:\n    \"\"\"Quick invoke shortcut (hidden - use 'agent invoke' instead).\"\"\"\n    click.echo(\"\ud83d\udca1 Use 'agentcore-cli agent invoke' for full functionality:\")\n    if prompt:\n        click.echo(f'   agentcore-cli agent invoke {name} --prompt \"{prompt}\"')\n    else:\n        click.echo(f\"   agentcore-cli agent invoke {name}\")\n</code></pre>"},{"location":"reference/agentcore_cli/cli/#agentcore_cli.cli.print_banner","title":"<code>print_banner()</code>","text":"<p>Print welcome banner for interactive commands.</p> Source code in <code>agentcore_cli/cli.py</code> Python<pre><code>def print_banner() -&gt; None:\n    \"\"\"Print welcome banner for interactive commands.\"\"\"\n    print_ascii_banner(\"Deploy and manage AI agents on AWS Bedrock AgentCore Runtime\")\n</code></pre>"},{"location":"reference/agentcore_cli/cli/#agentcore_cli.cli.print_version","title":"<code>print_version(ctx, _, value)</code>","text":"<p>Print version information and exit.</p> Source code in <code>agentcore_cli/cli.py</code> Python<pre><code>def print_version(ctx: click.Context, _: Any, value: bool) -&gt; None:\n    \"\"\"Print version information and exit.\"\"\"\n    if not value or ctx.resilient_parsing:\n        return\n\n    try:\n        from agentcore_cli import __version__\n\n        print_ascii_banner()\n        console.print(f\"[bright_green bold]Version {__version__}[/bright_green bold]\")\n        console.print(\"[dim]Built with \u2764\ufe0f for the AI agent development community[/dim]\")\n        console.print()\n        console.print(\"\ud83d\udcda [bold cyan]Documentation:[/bold cyan] https://docs.agentcore.dev\")\n        console.print(\"\ud83d\udc1b [bold cyan]Issues:[/bold cyan] https://github.com/agentcore/agentcore-platform-cli/issues\")\n    except ImportError:\n        print_ascii_banner()\n        console.print(\"[bright_green bold]Development Version[/bright_green bold]\")\n\n    ctx.exit()\n</code></pre>"},{"location":"reference/agentcore_cli/cli/#agentcore_cli.cli.register_commands","title":"<code>register_commands()</code>","text":"<p>Register all command groups with the main CLI.</p> Source code in <code>agentcore_cli/cli.py</code> Python<pre><code>def register_commands() -&gt; None:\n    \"\"\"Register all command groups with the main CLI.\"\"\"\n\n    # Register all commands\n    cli.add_command(setup_cli, name=\"init\")\n    cli.add_command(unified_agent_cli, name=\"agent\")\n    cli.add_command(env_group, name=\"env\")\n    cli.add_command(container_group, name=\"container\")\n    cli.add_command(config_cli, name=\"config\")\n    cli.add_command(resources_group, name=\"resources\")\n</code></pre>"},{"location":"reference/agentcore_cli/commands/","title":"agentcore_cli.commands","text":""},{"location":"reference/agentcore_cli/commands/#agentcore_cli.commands","title":"<code>agentcore_cli.commands</code>","text":"<p>Command modules for AgentCore CLI.</p>"},{"location":"reference/agentcore_cli/commands/config/","title":"agentcore_cli.commands.config","text":""},{"location":"reference/agentcore_cli/commands/config/#agentcore_cli.commands.config","title":"<code>agentcore_cli.commands.config</code>","text":"<p>Configuration management commands for AgentCore Platform CLI.</p> <p>This module provides CLI commands for managing configuration, environments, and synchronization settings.</p>"},{"location":"reference/agentcore_cli/commands/config/#agentcore_cli.commands.config.add_environment","title":"<code>add_environment(name, region='us-west-2')</code>","text":"<p>Add a new environment.</p> Source code in <code>agentcore_cli/commands/config.py</code> Python<pre><code>@env.command(\"add\")\n@click.argument(\"name\")\n@click.option(\"--region\", default=\"us-west-2\", help=\"AWS region for the environment\")\ndef add_environment(name: str, region: str = \"us-west-2\") -&gt; None:\n    \"\"\"Add a new environment.\"\"\"\n    if config_manager.add_environment(name, region):\n        print_success(\"Environment added\", f\"'{name}' with region '{region}'\")\n    else:\n        print_error(\"Failed to add environment\", name)\n        return\n</code></pre>"},{"location":"reference/agentcore_cli/commands/config/#agentcore_cli.commands.config.config_cli","title":"<code>config_cli()</code>","text":"<p>Configuration management commands.</p> Source code in <code>agentcore_cli/commands/config.py</code> Python<pre><code>@click.group()\ndef config_cli() -&gt; None:\n    \"\"\"Configuration management commands.\"\"\"\n    pass\n</code></pre>"},{"location":"reference/agentcore_cli/commands/config/#agentcore_cli.commands.config.delete_environment","title":"<code>delete_environment(name, force=False)</code>","text":"<p>Delete an environment.</p> Source code in <code>agentcore_cli/commands/config.py</code> Python<pre><code>@env.command(\"delete\")\n@click.argument(\"name\")\n@click.option(\"--force\", is_flag=True, help=\"Force deletion without confirmation\")\ndef delete_environment(name: str, force: bool = False) -&gt; None:\n    \"\"\"Delete an environment.\"\"\"\n    if not force:\n        if not confirm_action(f\"Are you sure you want to delete environment '{name}'?\"):\n            print_info(\"Deletion cancelled\")\n            return\n\n    if config_manager.delete_environment(name):\n        print_success(\"Environment deleted\", name)\n    else:\n        print_error(\"Failed to delete environment\", name)\n        return\n</code></pre>"},{"location":"reference/agentcore_cli/commands/config/#agentcore_cli.commands.config.disable_sync","title":"<code>disable_sync()</code>","text":"<p>Disable configuration synchronization with cloud.</p> Source code in <code>agentcore_cli/commands/config.py</code> Python<pre><code>@sync.command(\"disable\")\ndef disable_sync() -&gt; None:\n    \"\"\"Disable configuration synchronization with cloud.\"\"\"\n    if config_manager.enable_cloud_sync(False):\n        print_success(\"Cloud configuration sync disabled\")\n    else:\n        print_error(\"Failed to disable cloud configuration sync\")\n        return\n</code></pre>"},{"location":"reference/agentcore_cli/commands/config/#agentcore_cli.commands.config.enable_sync","title":"<code>enable_sync(auto=False)</code>","text":"<p>Enable configuration synchronization with cloud.</p> Source code in <code>agentcore_cli/commands/config.py</code> Python<pre><code>@sync.command(\"enable\")\n@click.option(\"--auto\", is_flag=True, help=\"Enable automatic sync\")\ndef enable_sync(auto: bool = False) -&gt; None:\n    \"\"\"Enable configuration synchronization with cloud.\"\"\"\n    if config_manager.enable_cloud_sync(True):\n        print_success(\"Cloud configuration sync enabled\")\n\n        if auto:\n            if config_manager.enable_auto_sync(True):\n                print_success(\"Automatic sync enabled\")\n            else:\n                print_error(\"Failed to enable automatic sync\")\n                return\n    else:\n        print_error(\"Failed to enable cloud configuration sync\")\n        return\n</code></pre>"},{"location":"reference/agentcore_cli/commands/config/#agentcore_cli.commands.config.env","title":"<code>env()</code>","text":"<p>Environment management commands.</p> Source code in <code>agentcore_cli/commands/config.py</code> Python<pre><code>@config_cli.group()\ndef env() -&gt; None:\n    \"\"\"Environment management commands.\"\"\"\n    pass\n</code></pre>"},{"location":"reference/agentcore_cli/commands/config/#agentcore_cli.commands.config.export_config","title":"<code>export_config(file)</code>","text":"<p>Export configuration to a file.</p> Source code in <code>agentcore_cli/commands/config.py</code> Python<pre><code>@config_cli.command(\"export\")\n@click.option(\"--file\", \"-f\", default=\"agentcore-config.json\", help=\"Output file path\")\ndef export_config(file: str) -&gt; None:\n    \"\"\"Export configuration to a file.\"\"\"\n    if config_manager.export_config(file):\n        print_success(\"Configuration exported\", file)\n    else:\n        print_error(\"Failed to export configuration\", file)\n        return\n</code></pre>"},{"location":"reference/agentcore_cli/commands/config/#agentcore_cli.commands.config.import_config","title":"<code>import_config(file, force=False)</code>","text":"<p>Import configuration from a file.</p> Source code in <code>agentcore_cli/commands/config.py</code> Python<pre><code>@config_cli.command(\"import\")\n@click.argument(\"file\")\n@click.option(\"--force\", is_flag=True, help=\"Force import without confirmation\")\ndef import_config(file: str, force: bool = False) -&gt; None:\n    \"\"\"Import configuration from a file.\"\"\"\n    if not Path(file).exists():\n        print_error(\"Configuration file not found\", file)\n        return\n\n    if not force:\n        if not confirm_action(\n            f\"Are you sure you want to import configuration from '{file}'? This will overwrite current configuration.\"\n        ):\n            print_info(\"Import cancelled\")\n            return\n\n    if config_manager.import_config(file):\n        print_success(\"Configuration imported\", file)\n    else:\n        print_error(\"Failed to import configuration\", file)\n        return\n</code></pre>"},{"location":"reference/agentcore_cli/commands/config/#agentcore_cli.commands.config.list_environments","title":"<code>list_environments()</code>","text":"<p>List all environments.</p> Source code in <code>agentcore_cli/commands/config.py</code> Python<pre><code>@env.command(\"list\")\ndef list_environments() -&gt; None:\n    \"\"\"List all environments.\"\"\"\n    if not config_manager.config.environments:\n        print_info(\"No environments configured\")\n        print_commands([(\"agentcore-cli env create dev\", \"Create your first environment\")])\n        return\n\n    console.print(\"\ud83d\udccb [bold]Available Environments[/bold]\")\n    console.print()\n\n    table_data = []\n    for env_name, env_config in config_manager.config.environments.items():\n        current_marker = \"\u2705\" if env_name == config_manager.current_environment else \"\"\n        table_data.append(\n            [\n                current_marker,\n                env_name,\n                env_config.region,\n                len(env_config.agent_runtimes),\n                env_config.default_agent_runtime or \"-\",\n            ]\n        )\n\n    headers = [\"\", \"Environment\", \"Region\", \"Agents\", \"Default Agent\"]\n    console.print(tabulate(table_data, headers=headers, tablefmt=\"simple\"))\n</code></pre>"},{"location":"reference/agentcore_cli/commands/config/#agentcore_cli.commands.config.list_resources","title":"<code>list_resources()</code>","text":"<p>List all global resources.</p> Source code in <code>agentcore_cli/commands/config.py</code> Python<pre><code>@resources.command(\"list\")\ndef list_resources() -&gt; None:\n    \"\"\"List all global resources.\"\"\"\n    global_resources = config_manager.config.global_resources\n\n    console.print(\"\ud83c\udf10 [bold]Global Resources[/bold]\")\n    console.print()\n\n    # ECR Repositories\n    if global_resources.ecr_repositories:\n        console.print(\"\ud83d\udce6 [bold]ECR Repositories:[/bold]\")\n        for repo_name, repo in global_resources.ecr_repositories.items():\n            console.print(f\"  \u2022 {repo_name}\")\n            console.print(f\"    URI: {repo.repository_uri}\")\n            console.print(f\"    Registry: {repo.registry_id}\")\n            console.print(f\"    Tags: {len(repo.available_tags)}\")\n        console.print()\n\n    # IAM Roles\n    if global_resources.iam_roles:\n        console.print(\"\ud83d\udd10 [bold]IAM Roles:[/bold]\")\n        for role_name, role in global_resources.iam_roles.items():\n            console.print(f\"  \u2022 {role_name}\")\n            console.print(f\"    ARN: {role.arn}\")\n        console.print()\n\n    if not global_resources.ecr_repositories and not global_resources.iam_roles:\n        print_info(\"No global resources configured\")\n        print_commands([(\"agentcore-cli resources ecr create &lt;name&gt;\", \"Create resources\")])\n</code></pre>"},{"location":"reference/agentcore_cli/commands/config/#agentcore_cli.commands.config.list_runtimes","title":"<code>list_runtimes(environment=None)</code>","text":"<p>List agent runtimes in an environment.</p> Source code in <code>agentcore_cli/commands/config.py</code> Python<pre><code>@runtime.command(\"list\")\n@click.option(\"--environment\", \"-e\", help=\"Environment to list (defaults to current)\")\ndef list_runtimes(environment: str | None = None) -&gt; None:\n    \"\"\"List agent runtimes in an environment.\"\"\"\n    env_name = environment or config_manager.current_environment\n\n    try:\n        env_config = config_manager.get_environment(env_name)\n\n        if not env_config.agent_runtimes:\n            print_info(f\"No agent runtimes in environment '{env_name}'\")\n            print_commands([(\"agentcore-cli agent create &lt;name&gt;\", \"Create one\")])\n            return\n\n        console.print(f\"\ud83e\udd16 [bold]Agent Runtimes in '{env_name}'[/bold]:\")\n        console.print()\n\n        for runtime_name, runtime in env_config.agent_runtimes.items():\n            is_default = \" \u2b50\" if runtime_name == env_config.default_agent_runtime else \"\"\n            console.print(f\"\u2022 [bright_blue bold]{runtime_name}{is_default}[/bright_blue bold]\")\n            console.print(f\"  Runtime ID: {runtime.agent_runtime_id}\")\n            console.print(f\"  Latest Version: {runtime.latest_version}\")\n            console.print(f\"  Endpoints: {len(runtime.endpoints)}\")\n            console.print(f\"  Versions: {len(runtime.versions)}\")\n            console.print()\n\n    except KeyError:\n        print_error(\"Environment not found\", env_name)\n        return\n</code></pre>"},{"location":"reference/agentcore_cli/commands/config/#agentcore_cli.commands.config.resources","title":"<code>resources()</code>","text":"<p>Global resource management commands.</p> Source code in <code>agentcore_cli/commands/config.py</code> Python<pre><code>@config_cli.group()\ndef resources() -&gt; None:\n    \"\"\"Global resource management commands.\"\"\"\n    pass\n</code></pre>"},{"location":"reference/agentcore_cli/commands/config/#agentcore_cli.commands.config.runtime","title":"<code>runtime()</code>","text":"<p>Agent runtime management commands.</p> Source code in <code>agentcore_cli/commands/config.py</code> Python<pre><code>@config_cli.group()\ndef runtime() -&gt; None:\n    \"\"\"Agent runtime management commands.\"\"\"\n    pass\n</code></pre>"},{"location":"reference/agentcore_cli/commands/config/#agentcore_cli.commands.config.set_default_agent","title":"<code>set_default_agent(name, environment=None)</code>","text":"<p>Set the default agent for an environment.</p> Source code in <code>agentcore_cli/commands/config.py</code> Python<pre><code>@config_cli.command(\"set-default-agent\")\n@click.argument(\"name\")\n@click.option(\"--environment\", \"-e\", help=\"Environment (defaults to current)\")\ndef set_default_agent(name: str, environment: str | None = None) -&gt; None:\n    \"\"\"Set the default agent for an environment.\"\"\"\n    env_name = environment or config_manager.current_environment\n\n    if config_manager.set_default_agent_runtime(env_name, name):\n        print_success(\"Default agent set\", f\"'{name}' in environment '{env_name}'\")\n    else:\n        print_error(\"Failed to set default agent\", f\"'{name}' in environment '{env_name}'\")\n        return\n</code></pre>"},{"location":"reference/agentcore_cli/commands/config/#agentcore_cli.commands.config.show_config","title":"<code>show_config(environment=None)</code>","text":"<p>Show current configuration.</p> Source code in <code>agentcore_cli/commands/config.py</code> Python<pre><code>@config_cli.command(\"show\")\n@click.option(\"--environment\", \"-e\", help=\"Environment to show (defaults to current)\")\ndef show_config(environment: str | None = None) -&gt; None:\n    \"\"\"Show current configuration.\"\"\"\n    env_name = environment or config_manager.current_environment\n\n    console.print(\"\ud83d\udccb [bold]Configuration Summary[/bold]\")\n\n    config_data = {\n        \"Current Environment\": config_manager.current_environment,\n        \"Config File\": str(config_manager.config_file),\n    }\n\n    print_summary_box(\"General Configuration\", config_data)\n\n    try:\n        env_config = config_manager.get_environment(env_name)\n\n        env_data = {\n            \"Region\": env_config.region,\n            \"Default Agent Runtime\": env_config.default_agent_runtime or \"None\",\n            \"Agent Runtimes\": str(len(env_config.agent_runtimes)),\n            \"Environment Variables\": str(len(env_config.environment_variables)),\n        }\n\n        print_summary_box(f\"Environment '{env_name}'\", env_data)\n\n        if env_config.agent_runtimes:\n            console.print()\n            console.print(\"[bold]Runtimes:[/bold]\")\n            for runtime_name in env_config.agent_runtimes.keys():\n                marker = \" (default)\" if runtime_name == env_config.default_agent_runtime else \"\"\n                console.print(f\"    \u2022 {runtime_name}{marker}\")\n\n    except KeyError:\n        print_error(\"Environment not found\", env_name)\n        return\n\n    # Show global resources\n    global_resources = config_manager.config.global_resources\n\n    global_data = {\n        \"ECR Repositories\": str(len(global_resources.ecr_repositories)),\n        \"IAM Roles\": str(len(global_resources.iam_roles)),\n    }\n\n    print_summary_box(\"Global Resources\", global_data)\n\n    # Show sync configuration\n    sync_config = global_resources.sync_config\n\n    sync_data = {\n        \"Cloud Sync Enabled\": str(sync_config.cloud_config_enabled),\n        \"Auto Sync Enabled\": str(sync_config.auto_sync_enabled),\n        \"Parameter Store Prefix\": sync_config.parameter_store_prefix,\n        \"Sync Interval\": f\"{sync_config.sync_interval_minutes} minutes\",\n        \"Last Full Sync\": str(sync_config.last_full_sync) if sync_config.last_full_sync else \"Never\",\n    }\n\n    print_summary_box(\"Sync Configuration\", sync_data)\n</code></pre>"},{"location":"reference/agentcore_cli/commands/config/#agentcore_cli.commands.config.show_runtime","title":"<code>show_runtime(name, environment=None)</code>","text":"<p>Show detailed information about an agent runtime.</p> Source code in <code>agentcore_cli/commands/config.py</code> Python<pre><code>@runtime.command(\"show\")\n@click.argument(\"name\")\n@click.option(\"--environment\", \"-e\", help=\"Environment (defaults to current)\")\ndef show_runtime(name: str, environment: str | None = None) -&gt; None:\n    \"\"\"Show detailed information about an agent runtime.\"\"\"\n    env_name = environment or config_manager.current_environment\n\n    try:\n        runtime = config_manager.get_agent_runtime(name, env_name)\n        if not runtime:\n            print_error(\"Agent runtime not found\", f\"'{name}' in environment '{env_name}'\")\n            return\n\n        console.print(f\"\ud83e\udd16 [bright_blue bold]Agent Runtime: {name}[/bright_blue bold]\")\n\n        runtime_data = {\n            \"Environment\": env_name,\n            \"Runtime ID\": runtime.agent_runtime_id,\n            \"Runtime ARN\": runtime.agent_runtime_arn or \"Not set\",\n            \"Latest Version\": runtime.latest_version,\n            \"Primary ECR Repository\": runtime.primary_ecr_repository,\n            \"Region\": runtime.region,\n        }\n\n        print_summary_box(\"Runtime Information\", runtime_data)\n\n        if runtime.versions:\n            console.print()\n            console.print(\"[bold]Versions:[/bold]\")\n            for version_id, version in runtime.versions.items():\n                console.print(f\"  \u2022 {version_id} ({version.status.value})\")\n                console.print(f\"    Image: {version.ecr_repository_name}:{version.image_tag}\")\n                console.print(\n                    f\"    Created: {version.created_at.strftime('%Y-%m-%d %H:%M') if version.created_at else 'Unknown'}\"\n                )\n\n        if runtime.endpoints:\n            console.print()\n            console.print(\"[bold]Endpoints:[/bold]\")\n            for endpoint_name, endpoint in runtime.endpoints.items():\n                console.print(f\"  \u2022 {endpoint_name} \u2192 {endpoint.target_version} ({endpoint.status.value})\")\n\n    except Exception as e:\n        print_error(\"Failed to show runtime\", str(e))\n        return\n</code></pre>"},{"location":"reference/agentcore_cli/commands/config/#agentcore_cli.commands.config.sync","title":"<code>sync()</code>","text":"<p>Configuration synchronization commands.</p> Source code in <code>agentcore_cli/commands/config.py</code> Python<pre><code>@config_cli.group()\ndef sync() -&gt; None:\n    \"\"\"Configuration synchronization commands.\"\"\"\n    pass\n</code></pre>"},{"location":"reference/agentcore_cli/commands/config/#agentcore_cli.commands.config.sync_pull","title":"<code>sync_pull()</code>","text":"<p>Pull configuration from cloud.</p> Source code in <code>agentcore_cli/commands/config.py</code> Python<pre><code>@sync.command(\"pull\")\ndef sync_pull() -&gt; None:\n    \"\"\"Pull configuration from cloud.\"\"\"\n    if config_manager.pull_from_cloud():\n        print_success(\"Configuration pulled from cloud\")\n    else:\n        print_error(\"Failed to pull configuration from cloud\")\n        return\n</code></pre>"},{"location":"reference/agentcore_cli/commands/config/#agentcore_cli.commands.config.sync_push","title":"<code>sync_push()</code>","text":"<p>Push configuration to cloud.</p> Source code in <code>agentcore_cli/commands/config.py</code> Python<pre><code>@sync.command(\"push\")\ndef sync_push() -&gt; None:\n    \"\"\"Push configuration to cloud.\"\"\"\n    result = config_manager.sync_with_cloud(auto=False)\n\n    if result.success:\n        print_success(\"Configuration pushed to cloud\")\n        if result.synced_items:\n            print_info(f\"Synced items: {len(result.synced_items)}\")\n    else:\n        print_error(\"Failed to push configuration to cloud\", result.message)\n        if result.errors:\n            for error in result.errors:\n                console.print(f\"  [red]\u2022 {error}[/red]\")\n        return\n</code></pre>"},{"location":"reference/agentcore_cli/commands/config/#agentcore_cli.commands.config.sync_status","title":"<code>sync_status(environment=None)</code>","text":"<p>Check synchronization status.</p> Source code in <code>agentcore_cli/commands/config.py</code> Python<pre><code>@sync.command(\"status\")\n@click.option(\"--environment\", \"-e\", help=\"Environment to check (defaults to current)\")\ndef sync_status(environment: str | None = None) -&gt; None:\n    \"\"\"Check synchronization status.\"\"\"\n    env_name = environment or config_manager.current_environment\n\n    try:\n        status = config_manager.get_cloud_sync_status(env_name)\n\n        console.print(f\"\ud83d\udcca [bold]Sync Status for environment '{env_name}'[/bold]:\")\n\n        status_data = {\n            \"Cloud Sync Enabled\": str(status.cloud_config_enabled),\n            \"Auto Sync Enabled\": str(status.auto_sync_enabled),\n            \"Last Sync\": str(status.last_sync) if status.last_sync else \"Never\",\n            \"In Sync\": str(status.in_sync),\n        }\n\n        print_summary_box(\"Configuration Sync Status\", status_data)\n\n        if status.drift_details:\n            print_warning(\"Configuration drift detected!\")\n            for category, items in status.drift_details.items():\n                if items:\n                    console.print(f\"  [yellow]{category}[/yellow]: {len(items)} items differ\")\n\n    except Exception as e:\n        print_error(\"Failed to get sync status\", str(e))\n        return\n</code></pre>"},{"location":"reference/agentcore_cli/commands/config/#agentcore_cli.commands.config.update_environment","title":"<code>update_environment(name, region=None)</code>","text":"<p>Update an environment.</p> Source code in <code>agentcore_cli/commands/config.py</code> Python<pre><code>@env.command(\"update\")\n@click.argument(\"name\")\n@click.option(\"--region\", help=\"AWS region for the environment\")\ndef update_environment(name: str, region: str | None = None) -&gt; None:\n    \"\"\"Update an environment.\"\"\"\n    updates = {}\n    if region:\n        updates[\"region\"] = region\n\n    if not updates:\n        print_error(\"No updates specified\")\n        return\n\n    if config_manager.update_environment(name, **updates):\n        print_success(\"Environment updated\", name)\n    else:\n        print_error(\"Failed to update environment\", name)\n        return\n</code></pre>"},{"location":"reference/agentcore_cli/commands/config/#agentcore_cli.commands.config.use_environment","title":"<code>use_environment(name)</code>","text":"<p>Switch to a different environment.</p> Source code in <code>agentcore_cli/commands/config.py</code> Python<pre><code>@env.command(\"use\")\n@click.argument(\"name\")\ndef use_environment(name: str) -&gt; None:\n    \"\"\"Switch to a different environment.\"\"\"\n    if config_manager.set_current_environment(name):\n        print_success(\"Switched to environment\", name)\n    else:\n        print_error(\"Failed to switch to environment\", name)\n        return\n</code></pre>"},{"location":"reference/agentcore_cli/commands/config/#agentcore_cli.commands.config.validate_config","title":"<code>validate_config()</code>","text":"<p>Validate current configuration.</p> Source code in <code>agentcore_cli/commands/config.py</code> Python<pre><code>@config_cli.command(\"validate\")\ndef validate_config() -&gt; None:\n    \"\"\"Validate current configuration.\"\"\"\n    console.print(\"\ud83d\udd0d [bold]Validating configuration...[/bold]\")\n\n    errors = []\n    warnings = []\n\n    # Check if current environment exists\n    if config_manager.current_environment not in config_manager.config.environments:\n        errors.append(f\"Current environment '{config_manager.current_environment}' does not exist\")\n\n    # Check environment configurations\n    for env_name, env_config in config_manager.config.environments.items():\n        if not env_config.region:\n            errors.append(f\"Environment '{env_name}' has no region specified\")\n\n        # Check default agent runtime\n        if env_config.default_agent_runtime and env_config.default_agent_runtime not in env_config.agent_runtimes:\n            errors.append(\n                f\"Environment '{env_name}' has non-existent default agent runtime '{env_config.default_agent_runtime}'\"\n            )\n\n        # Check agent runtime configurations\n        for agent_name, runtime in env_config.agent_runtimes.items():\n            if not runtime.agent_runtime_id:\n                errors.append(f\"Agent '{agent_name}' in environment '{env_name}' has no runtime ID\")\n\n            if not runtime.agent_runtime_arn:\n                errors.append(f\"Agent '{agent_name}' in environment '{env_name}' has no runtime ARN\")\n\n            # Check if ECR repository exists\n            if runtime.primary_ecr_repository not in config_manager.config.global_resources.ecr_repositories:\n                warnings.append(\n                    f\"Agent '{agent_name}' in environment '{env_name}' references non-existent ECR repository '{runtime.primary_ecr_repository}'\"\n                )\n\n            # Check endpoint configurations\n            for endpoint_name, endpoint in runtime.endpoints.items():\n                if endpoint.target_version not in runtime.versions:\n                    warnings.append(\n                        f\"Agent '{agent_name}' endpoint '{endpoint_name}' in environment '{env_name}' references non-existent version '{endpoint.target_version}'\"\n                    )\n\n    # Report results\n    if errors:\n        print_error(\"Configuration validation failed\")\n        for error in errors:\n            console.print(f\"  [red]\u2022 {error}[/red]\")\n        return\n\n    if warnings:\n        print_warning(\"Configuration warnings detected\")\n        for warning in warnings:\n            console.print(f\"  [yellow]\u2022 {warning}[/yellow]\")\n\n    print_success(\"Configuration is valid\")\n    return\n</code></pre>"},{"location":"reference/agentcore_cli/commands/container/","title":"agentcore_cli.commands.container","text":""},{"location":"reference/agentcore_cli/commands/container/#agentcore_cli.commands.container","title":"<code>agentcore_cli.commands.container</code>","text":"<p>Container management commands for AgentCore Platform CLI.</p> <p>This module provides commands for building, pushing, and managing Docker containers with integrated ECR support.</p>"},{"location":"reference/agentcore_cli/commands/container/#agentcore_cli.commands.container.build_container","title":"<code>build_container(name, dockerfile, context, tag, no_cache, build_arg, region)</code>","text":"<p>Build a Docker container image.</p> <p>Builds a Docker image for the specified agent name using the provided Dockerfile. The image is tagged with the agent name and specified tag.</p> <p>Examples:</p> <p>agentcore-cli container build my-agent agentcore-cli container build my-agent --dockerfile ./docker/Dockerfile --tag v1.0.0 agentcore-cli container build my-agent --build-arg API_KEY=secret --no-cache</p> Source code in <code>agentcore_cli/commands/container.py</code> Python<pre><code>@container_group.command(\"build\")\n@click.argument(\"name\")\n@click.option(\"--dockerfile\", \"-f\", default=\"Dockerfile\", help=\"Path to Dockerfile\")\n@click.option(\"--context\", \"-c\", default=\".\", help=\"Build context directory\")\n@click.option(\"--tag\", \"-t\", default=\"latest\", help=\"Image tag\")\n@click.option(\"--no-cache\", is_flag=True, help=\"Disable build cache\")\n@click.option(\"--build-arg\", multiple=True, help=\"Build arguments (KEY=VALUE)\")\n@click.option(\"--region\", help=\"AWS region (defaults to current environment)\")\ndef build_container(\n    name: str, dockerfile: str, context: str, tag: str, no_cache: bool, build_arg: tuple[str, ...], region: str | None\n) -&gt; None:\n    \"\"\"Build a Docker container image.\n\n    Builds a Docker image for the specified agent name using the provided Dockerfile.\n    The image is tagged with the agent name and specified tag.\n\n    Examples:\n      agentcore-cli container build my-agent\n      agentcore-cli container build my-agent --dockerfile ./docker/Dockerfile --tag v1.0.0\n      agentcore-cli container build my-agent --build-arg API_KEY=secret --no-cache\n    \"\"\"\n    # Validate agent name\n    is_valid, error_msg = validate_agent_name(name)\n    if not is_valid:\n        print_error(\"Invalid agent name\", error_msg)\n        return\n\n    # Validate dockerfile exists\n    dockerfile_path = Path(dockerfile)\n    if not dockerfile_path.exists():\n        print_error(\"Dockerfile not found\", dockerfile)\n        return\n\n    # Validate context directory exists\n    context_path = Path(context)\n    if not context_path.exists():\n        print_error(\"Build context directory not found\", context)\n        return\n\n    # Get region\n    if not region:\n        try:\n            region = config_manager.get_region()\n        except Exception:\n            from agentcore_cli.utils.aws_utils import get_aws_region\n\n            region = get_aws_region() or \"us-east-1\"\n\n    print_step(1, \"Building Container\", f\"Building container image for '{name}'\")\n\n    build_data = {\n        \"Agent\": name,\n        \"Dockerfile\": dockerfile,\n        \"Context\": context,\n        \"Tag\": tag,\n        \"Region\": region,\n        \"Cache\": \"Disabled\" if no_cache else \"Enabled\",\n    }\n\n    print_summary_box(\"Build Configuration\", build_data)\n\n    if build_arg:\n        console.print()\n        console.print(\"[bold]Build Arguments:[/bold]\")\n        for arg in build_arg:\n            # Mask sensitive values\n            if any(sensitive in arg.lower() for sensitive in [\"key\", \"secret\", \"token\", \"password\"]):\n                key, _ = arg.split(\"=\", 1) if \"=\" in arg else (arg, \"\")\n                console.print(f\"     {key}=***\")\n            else:\n                console.print(f\"     {arg}\")\n\n    console.print()\n\n    try:\n        # Parse build arguments\n        build_args = {}\n        for arg in build_arg:\n            if \"=\" in arg:\n                key, value = arg.split(\"=\", 1)\n                build_args[key] = value\n            else:\n                print_warning(f\"Ignoring invalid build arg: {arg}\")\n\n        # Create build input\n        build_input = ContainerBuildInput(\n            ecr_repository_name=name,\n            image_tag=tag,\n            dockerfile_path=str(dockerfile_path.absolute()),\n            build_context=str(context_path.absolute()),\n            no_cache=no_cache,\n            build_args=build_args,\n        )\n\n        # Initialize container service\n        container_service = ContainerService(region=region)\n\n        # Build the image\n        success = container_service.build_image(\n            repo_name=build_input.ecr_repository_name,\n            tag=build_input.image_tag,\n            dockerfile=build_input.dockerfile_path,\n            build_args=[f\"{k}={v}\" for k, v in build_input.build_args.items()],\n            platform=build_input.platform,\n            use_cache=not build_input.no_cache,\n        )\n\n        if success:\n            print_success(\"Container image built successfully\")\n            console.print()\n\n            next_steps: list[tuple[str, str | None]] = [\n                (f\"agentcore-cli container push {name} --tag {tag}\", \"Push to ECR\"),\n                (f\"agentcore-cli agent create {name}\", \"Create agent\"),\n                (f\"docker images {name}\", \"List images\"),\n            ]\n\n            print_commands(next_steps, title=\"\ud83c\udf89 Next steps\")\n            return\n        else:\n            print_error(\"Failed to build container image\")\n            return\n\n    except Exception as e:\n        print_error(\"Build failed\", str(e))\n        return\n</code></pre>"},{"location":"reference/agentcore_cli/commands/container/#agentcore_cli.commands.container.container_group","title":"<code>container_group()</code>","text":"<p>Container and Docker management commands.</p> <p>Build, tag, and push Docker containers to ECR repositories. Integrated with the environment-first architecture.</p> Source code in <code>agentcore_cli/commands/container.py</code> Python<pre><code>@click.group()\ndef container_group() -&gt; None:\n    \"\"\"Container and Docker management commands.\n\n    Build, tag, and push Docker containers to ECR repositories.\n    Integrated with the environment-first architecture.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/agentcore_cli/commands/container/#agentcore_cli.commands.container.list_images","title":"<code>list_images(repository, region)</code>","text":"<p>List container images in ECR repositories.</p> <p>Shows available images and tags in ECR repositories associated with the current environment.</p> <p>Examples:</p> <p>agentcore-cli container list agentcore-cli container list --repository my-agent</p> Source code in <code>agentcore_cli/commands/container.py</code> Python<pre><code>@container_group.command(\"list\")\n@click.option(\"--repository\", \"-r\", help=\"Filter by ECR repository name\")\n@click.option(\"--region\", help=\"AWS region (defaults to current environment)\")\ndef list_images(repository: str | None, region: str | None) -&gt; None:\n    \"\"\"List container images in ECR repositories.\n\n    Shows available images and tags in ECR repositories associated with\n    the current environment.\n\n    Examples:\n      agentcore-cli container list\n      agentcore-cli container list --repository my-agent\n    \"\"\"\n    # Get region\n    if not region:\n        try:\n            region = config_manager.get_region()\n        except Exception:\n            from agentcore_cli.utils.aws_utils import get_aws_region\n\n            region = get_aws_region() or \"us-east-1\"\n\n    console.print(f\"\ud83d\udce6 [bold]Container images in region {region}[/bold]\")\n    console.print()\n\n    try:\n        ecr_service = ECRService(region=region)\n\n        # Get repositories to check\n        repositories = []\n        if repository:\n            repositories = [repository]\n        else:\n            # Get repositories from global config\n            if config_manager.config.global_resources and config_manager.config.global_resources.ecr_repositories:\n                repositories = list(config_manager.config.global_resources.ecr_repositories.keys())\n\n        if not repositories:\n            print_info(\"No ECR repositories found in configuration\")\n            print_commands([(\"agentcore-cli container push &lt;name&gt; --create-repo\", \"Create one\")])\n            return\n\n        for repo_name in repositories:\n            success, repo_info, message = ecr_service.get_repository(repo_name)\n\n            if success and repo_info:\n                console.print(f\"\ud83d\uddc2\ufe0f  [bright_blue bold]{repo_name}[/bright_blue bold]\")\n                console.print(f\"   URI: {repo_info.repository_uri}\")\n                console.print(f\"   Registry: {repo_info.registry_id}\")\n\n                if repo_info.available_tags:\n                    tags_list = sorted(repo_info.available_tags)\n                    console.print(f\"   Tags: {', '.join(tags_list[:10])}\")\n                    if len(tags_list) &gt; 10:\n                        console.print(f\"         ... and {len(tags_list) - 10} more\")\n                else:\n                    console.print(\"   Tags: No images pushed yet\")\n\n                if repo_info.last_push:\n                    console.print(f\"   Last Push: {repo_info.last_push.strftime('%Y-%m-%d %H:%M')}\")\n\n                console.print()\n            else:\n                print_warning(f\"Repository '{repo_name}' not found in AWS\", message)\n\n    except Exception as e:\n        print_error(\"Failed to list images\", str(e))\n</code></pre>"},{"location":"reference/agentcore_cli/commands/container/#agentcore_cli.commands.container.pull_container","title":"<code>pull_container(name, tag, region)</code>","text":"<p>Pull a container image from ECR.</p> <p>Downloads a container image from ECR to the local Docker environment. Useful for testing or running images locally.</p> <p>Examples:</p> <p>agentcore-cli container pull my-agent agentcore-cli container pull my-agent --tag v1.0.0</p> Source code in <code>agentcore_cli/commands/container.py</code> Python<pre><code>@container_group.command(\"pull\")\n@click.argument(\"name\")\n@click.option(\"--tag\", \"-t\", default=\"latest\", help=\"Image tag to pull\")\n@click.option(\"--region\", help=\"AWS region (defaults to current environment)\")\ndef pull_container(name: str, tag: str, region: str | None) -&gt; None:\n    \"\"\"Pull a container image from ECR.\n\n    Downloads a container image from ECR to the local Docker environment.\n    Useful for testing or running images locally.\n\n    Examples:\n      agentcore-cli container pull my-agent\n      agentcore-cli container pull my-agent --tag v1.0.0\n    \"\"\"\n    # Validate agent name\n    is_valid, error_msg = validate_agent_name(name)\n    if not is_valid:\n        print_error(\"Invalid agent name\", error_msg)\n        return\n\n    # Get region\n    if not region:\n        try:\n            region = config_manager.get_region()\n        except Exception:\n            from agentcore_cli.utils.aws_utils import get_aws_region\n\n            region = get_aws_region() or \"us-west-2\"\n\n    print_step(1, \"Pulling Container\", f\"Pulling container image '{name}:{tag}' from ECR\")\n    print_info(f\"Region: {region}\")\n\n    try:\n        # Initialize services\n        container_service = ContainerService(region=region)\n        ecr_service = ECRService(region=region)\n\n        # Get ECR repository info\n        success, repo_info, message = ecr_service.get_repository(name)\n        if not success or not repo_info:\n            print_error(\"ECR repository not found\", f\"{name}: {message}\")\n            return\n\n        ecr_uri = repo_info.repository_uri\n        full_image = f\"{ecr_uri}:{tag}\"\n\n        print_info(f\"Source: {full_image}\")\n\n        # Pull the image using Docker CLI directly\n        try:\n            # Authenticate with ECR first\n            if not container_service._authenticate_ecr():\n                print_error(\"Failed to authenticate with ECR\")\n                return\n\n            # Pull the image\n            returncode, stdout, stderr = execute_command([\"docker\", \"pull\", full_image], log_cmd=True, log_output=False)\n\n            if returncode == 0:\n                print_success(\"Image pulled successfully\", full_image)\n                console.print()\n\n                commands: list[tuple[str, str | None]] = [\n                    (f\"docker run -it {name}:{tag}\", \"Run locally\"),\n                    (f\"docker inspect {name}:{tag}\", \"Inspect\"),\n                    (f\"docker rmi {name}:{tag}\", \"Remove\"),\n                ]\n\n                print_commands(commands, title=\"\ud83c\udf89 Available commands\")\n                return\n            else:\n                print_error(\"Failed to pull image from ECR\")\n                if stderr:\n                    print_info(f\"Error: {stderr.strip()}\")\n                return\n        except Exception as e:\n            print_error(\"Pull failed\", str(e))\n            return\n\n    except Exception as e:\n        print_error(\"Pull failed\", str(e))\n        return\n</code></pre>"},{"location":"reference/agentcore_cli/commands/container/#agentcore_cli.commands.container.push_container","title":"<code>push_container(name, tag, region, create_repo)</code>","text":"<p>Push a container image to ECR.</p> <p>Pushes a locally built Docker image to the corresponding ECR repository. Requires the image to be built first with 'agentcore container build'.</p> <p>Examples:</p> <p>agentcore-cli container push my-agent agentcore-cli container push my-agent --tag v1.0.0 agentcore-cli container push my-agent --create-repo</p> Source code in <code>agentcore_cli/commands/container.py</code> Python<pre><code>@container_group.command(\"push\")\n@click.argument(\"name\")\n@click.option(\"--tag\", \"-t\", default=\"latest\", help=\"Image tag to push\")\n@click.option(\"--region\", help=\"AWS region (defaults to current environment)\")\n@click.option(\"--create-repo\", is_flag=True, help=\"Create ECR repository if it doesn't exist\")\ndef push_container(name: str, tag: str, region: str | None, create_repo: bool) -&gt; None:\n    \"\"\"Push a container image to ECR.\n\n    Pushes a locally built Docker image to the corresponding ECR repository.\n    Requires the image to be built first with 'agentcore container build'.\n\n    Examples:\n      agentcore-cli container push my-agent\n      agentcore-cli container push my-agent --tag v1.0.0\n      agentcore-cli container push my-agent --create-repo\n    \"\"\"\n    # Validate agent name\n    is_valid, error_msg = validate_agent_name(name)\n    if not is_valid:\n        print_error(\"Invalid agent name\", error_msg)\n        return\n\n    # Get region\n    if not region:\n        try:\n            region = config_manager.get_region()\n        except Exception:\n            from agentcore_cli.utils.aws_utils import get_aws_region\n\n            region = get_aws_region() or \"us-east-1\"\n\n    print_step(1, \"Pushing Container\", f\"Pushing container image '{name}:{tag}' to ECR\")\n    print_info(f\"Region: {region}\")\n\n    try:\n        # Initialize services\n        container_service = ContainerService(region=region)\n        ecr_service = ECRService(region=region)\n\n        # Check if ECR repository exists\n        success, repo_info, message = ecr_service.get_repository(name)\n\n        if not success:\n            if create_repo:\n                print_info(f\"Creating ECR repository '{name}'...\")\n                success, repo_info, message = ecr_service.create_repository(name)\n                if not success:\n                    print_error(\"Failed to create ECR repository\", message)\n                    return\n                print_success(\"ECR repository created\", name)\n            else:\n                print_error(\"ECR repository not found\", name)\n                print_commands([(\"agentcore-cli container push --create-repo\", \"Create it first\")])\n                return\n\n        # Get ECR URI\n        ecr_uri = repo_info.repository_uri if repo_info else None\n        if not ecr_uri:\n            print_error(\"Could not determine ECR repository URI\")\n            return\n\n        print_info(f\"Target repository: {ecr_uri}\")\n\n        # Push the image\n        pushed_uri = container_service.push_image(name, tag, ecr_uri)\n\n        if pushed_uri:\n            print_success(\"Image pushed successfully\", pushed_uri)\n\n            # Update config if agent runtime exists\n            try:\n                agent_runtime = config_manager.get_agent_runtime(name)\n                if agent_runtime:\n                    print_info(\"Updating agent runtime configuration...\")\n                    # Update the primary ECR repository reference\n                    agent_runtime.primary_ecr_repository = name\n                    config_manager.save_config()\n                    print_success(\"Configuration updated\")\n            except Exception:\n                print_warning(\"Failed to update agent runtime configuration\")\n\n            console.print()\n\n            next_steps: list[tuple[str, str | None]] = [\n                (f\"agentcore-cli agent create {name}\", \"Deploy agent\"),\n                (f\"agentcore-cli agent update {name} --image-tag {tag}\", \"Update runtime\"),\n                (f\"AWS ECR &gt; {name}\", \"View in console\"),\n            ]\n\n            print_commands(next_steps, title=\"\ud83c\udf89 Next steps\")\n            return\n        else:\n            print_error(\"Failed to push image to ECR\")\n            return\n\n    except Exception as e:\n        print_error(\"Push failed\", str(e))\n        return\n</code></pre>"},{"location":"reference/agentcore_cli/commands/container/#agentcore_cli.commands.container.remove_container","title":"<code>remove_container(name, tag, local_only, force)</code>","text":"<p>Remove container images.</p> <p>Removes container images from local Docker and optionally from ECR. Use --local-only to keep ECR images intact.</p> <p>Examples:</p> <p>agentcore-cli container remove my-agent --local-only agentcore-cli container remove my-agent --tag latest agentcore-cli container remove my-agent --force</p> Source code in <code>agentcore_cli/commands/container.py</code> Python<pre><code>@container_group.command(\"remove\")\n@click.argument(\"name\")\n@click.option(\"--tag\", \"-t\", help=\"Specific tag to remove (default: remove all tags)\")\n@click.option(\"--local-only\", is_flag=True, help=\"Remove only local images, keep ECR\")\n@click.option(\"--force\", \"-f\", is_flag=True, help=\"Skip confirmation prompt\")\ndef remove_container(name: str, tag: str | None, local_only: bool, force: bool) -&gt; None:\n    \"\"\"Remove container images.\n\n    Removes container images from local Docker and optionally from ECR.\n    Use --local-only to keep ECR images intact.\n\n    Examples:\n        agentcore-cli container remove my-agent --local-only\n        agentcore-cli container remove my-agent --tag latest\n        agentcore-cli container remove my-agent --force\n    \"\"\"\n    # Validate agent name\n    is_valid, error_msg = validate_agent_name(name)\n    if not is_valid:\n        print_error(\"Invalid agent name\", error_msg)\n        return\n\n    print_step(1, \"Removing Container\", f\"Removing container images for '{name}'\")\n\n    removal_data = {\n        \"Agent\": name,\n        \"Tag\": tag if tag else \"All tags\",\n        \"Location\": \"Local only (ECR preserved)\" if local_only else \"Local and ECR\",\n    }\n\n    print_summary_box(\"Removal Configuration\", removal_data)\n\n    # Confirmation\n    if not force:\n        console.print()\n        if local_only:\n            message = f\"Remove local images for '{name}'?\"\n        else:\n            message = f\"Remove ALL images for '{name}' (local and ECR)?\"\n\n        if not confirm_action(message):\n            print_info(\"Removal cancelled\")\n            return\n\n    try:\n        # Get region for services\n        try:\n            region = config_manager.get_region()\n        except Exception:\n            from agentcore_cli.utils.aws_utils import get_aws_region\n\n            region = get_aws_region() or \"us-west-2\"\n\n        removed_items = []\n        errors = []\n\n        # Remove local images using Docker CLI directly\n        print_info(\"\ud83d\udc33 Removing local Docker images...\")\n        try:\n            if tag:\n                # Remove specific tag\n                returncode, stdout, stderr = execute_command(\n                    [\"docker\", \"rmi\", f\"{name}:{tag}\"], log_cmd=True, log_output=False\n                )\n                if returncode == 0:\n                    removed_items.append(f\"Local image: {name}:{tag}\")\n                else:\n                    errors.append(f\"Failed to remove local image: {name}:{tag}\")\n            else:\n                # Remove all tags for this name\n                returncode, stdout, stderr = execute_command(\n                    [\"docker\", \"images\", \"--format\", \"{{.Repository}}:{{.Tag}}\", name], log_cmd=True, log_output=False\n                )\n\n                if returncode == 0:\n                    local_images = stdout.strip().split(\"\\n\")\n                    for image in local_images:\n                        if image.strip() and image.strip() != f\"{name}:&lt;none&gt;\":\n                            remove_returncode, remove_stdout, remove_stderr = execute_command(\n                                [\"docker\", \"rmi\", image.strip()], log_cmd=True, log_output=False\n                            )\n                            if remove_returncode == 0:\n                                removed_items.append(f\"Local image: {image.strip()}\")\n                            else:\n                                errors.append(f\"Failed to remove local image: {image.strip()}\")\n        except Exception as e:\n            errors.append(f\"Local image removal error: {str(e)}\")\n\n        # Remove ECR images if not local-only\n        if not local_only:\n            try:\n                ecr_service = ECRService(region=region)\n                print_info(\"\u2601\ufe0f  Removing ECR images...\")\n\n                if tag:\n                    # For specific tags, we'd need to implement ECR image deletion\n                    # For now, suggest using AWS CLI or console\n                    print_warning(\"ECR tag deletion not implemented. Use AWS CLI:\")\n                    console.print(f\"   aws ecr batch-delete-image --repository-name {name} --image-ids imageTag={tag}\")\n                    errors.append(f\"ECR tag deletion not implemented: {name}:{tag}\")\n                else:\n                    # Remove entire repository\n                    current_env = config_manager.current_environment\n                    success, message = ecr_service.delete_repository(name, current_env, force=True)\n                    if success:\n                        removed_items.append(f\"ECR repository: {name}\")\n                    else:\n                        errors.append(f\"Failed to remove ECR repository: {message}\")\n\n            except Exception as e:\n                errors.append(f\"ECR removal error: {str(e)}\")\n\n        # Show results\n        console.print()\n        if removed_items:\n            print_success(\"Removed successfully\")\n            for item in removed_items:\n                console.print(f\"   \u2022 {item}\")\n\n        if errors:\n            console.print()\n            print_error(\"Errors encountered\")\n            for error in errors:\n                console.print(f\"   \u2022 {error}\")\n\n        if removed_items and not errors:\n            console.print()\n            print_success(\"Container removal completed successfully\")\n        elif not removed_items and not errors:\n            print_info(\"No images found to remove\")\n\n    except Exception as e:\n        print_error(\"Removal failed\", str(e))\n</code></pre>"},{"location":"reference/agentcore_cli/commands/environment/","title":"agentcore_cli.commands.environment","text":""},{"location":"reference/agentcore_cli/commands/environment/#agentcore_cli.commands.environment","title":"<code>agentcore_cli.commands.environment</code>","text":"<p>Environment management commands for AgentCore Platform CLI.</p> <p>This module provides commands for managing environments (dev, staging, prod) in our environment-first architecture.</p>"},{"location":"reference/agentcore_cli/commands/environment/#agentcore_cli.commands.environment.create_environment","title":"<code>create_environment(name, region='us-west-2', description=None, set_current=False)</code>","text":"<p>Create a new environment.</p> <p>Creates a new isolated environment for deploying agents. Each environment maintains its own agent runtimes, endpoints, and configuration.</p> <p>Examples:</p> <p>agentcore-cli env create dev --region us-east-1 --set-current agentcore-cli env create staging --region us-west-2 agentcore-cli env create prod --region eu-west-1 --description \"Production environment\"</p> Source code in <code>agentcore_cli/commands/environment.py</code> Python<pre><code>@env_group.command(\"create\")\n@click.argument(\"name\")\n@click.option(\"--region\", \"-r\", help=\"AWS region for the environment\")\n@click.option(\"--description\", \"-d\", help=\"Description for the environment\")\n@click.option(\"--set-current\", is_flag=True, help=\"Set as current environment after creation\")\ndef create_environment(\n    name: str, region: str = \"us-west-2\", description: str | None = None, set_current: bool = False\n) -&gt; None:\n    \"\"\"Create a new environment.\n\n    Creates a new isolated environment for deploying agents.\n    Each environment maintains its own agent runtimes, endpoints, and configuration.\n\n    Examples:\n      agentcore-cli env create dev --region us-east-1 --set-current\n      agentcore-cli env create staging --region us-west-2\n      agentcore-cli env create prod --region eu-west-1 --description \"Production environment\"\n    \"\"\"\n    # Validate environment name\n    if not name.replace(\"-\", \"\").replace(\"_\", \"\").isalnum():\n        print_error(\"Environment name must contain only letters, numbers, hyphens, and underscores\")\n        return\n\n    if len(name) &gt; 20:\n        print_error(\"Environment name must be 20 characters or less\")\n        return\n\n    # Check if environment already exists\n    if name in config_manager.config.environments:\n        print_error(\"Environment already exists\", name)\n        return\n\n    # Get region from current environment or AWS default if not provided\n    if not region:\n        from agentcore_cli.utils.aws_utils import get_aws_region\n\n        region = get_aws_region() or \"us-east-1\"\n        print_info(f\"Using region: {region}\")\n\n    # Validate region\n    is_valid, error_msg = validate_region(region)\n    if not is_valid:\n        print_error(error_msg)\n        return\n\n    console.print(f\"\ud83d\ude80 [bold]Creating environment '{name}' in region {region}...[/bold]\")\n\n    try:\n        # Create environment\n        success = config_manager.add_environment(name, region)\n\n        if not success:\n            print_error(\"Failed to create environment\", name)\n            return\n\n        # Add description if provided\n        if description:\n            env_config = config_manager.config.environments[name]\n            # We don't have a description field in the model, but we could add it to environment_variables\n            env_config.environment_variables[\"ENVIRONMENT_DESCRIPTION\"] = description\n            config_manager.save_config()\n\n        print_success(\"Environment created successfully\", name)\n\n        # Set as current if requested\n        if set_current:\n            config_manager.set_current_environment(name)\n            print_success(\"Environment set as current\", name)\n\n        # Show next steps\n        console.print()\n        next_steps: list[tuple[str, str | None]] = []\n        if not set_current:\n            next_steps.append((f\"agentcore-cli env use {name}\", \"Switch to environment\"))\n        next_steps.extend(\n            [\n                (f\"agentcore-cli agent create my-agent\", \"Create an agent\"),\n                (f\"agentcore-cli env current\", \"View environment\"),\n            ]\n        )\n\n        print_commands(next_steps, title=\"\ud83c\udf89 Next steps\")\n\n    except Exception as e:\n        print_error(\"Failed to create environment\", str(e))\n</code></pre>"},{"location":"reference/agentcore_cli/commands/environment/#agentcore_cli.commands.environment.delete_environment","title":"<code>delete_environment(name, force=False, keep_resources=False)</code>","text":"<p>Delete an environment.</p> <p>\u26a0\ufe0f  WARNING: This will delete the environment and optionally its AWS resources. All agent runtimes and endpoints in this environment will be removed.</p> <p>Examples:</p> <p>agentcore-cli env delete old-env --force agentcore-cli env delete dev --keep-resources  # Remove from config only</p> Source code in <code>agentcore_cli/commands/environment.py</code> Python<pre><code>@env_group.command(\"delete\")\n@click.argument(\"name\")\n@click.option(\"--force\", \"-f\", is_flag=True, help=\"Skip confirmation prompt\")\n@click.option(\"--keep-resources\", is_flag=True, help=\"Keep AWS resources (only remove from config)\")\ndef delete_environment(name: str, force: bool = False, keep_resources: bool = False) -&gt; None:\n    \"\"\"Delete an environment.\n\n    \u26a0\ufe0f  WARNING: This will delete the environment and optionally its AWS resources.\n    All agent runtimes and endpoints in this environment will be removed.\n\n    Examples:\n      agentcore-cli env delete old-env --force\n      agentcore-cli env delete dev --keep-resources  # Remove from config only\n    \"\"\"\n    if name not in config_manager.config.environments:\n        print_error(\"Environment not found\", name)\n        return\n\n    # Prevent deletion of current environment without explicit force\n    if name == config_manager.current_environment and not force:\n        print_error(\"Cannot delete current environment without --force\", name)\n        print_commands([(\"agentcore-cli env use &lt;other-env&gt;\", \"Switch to another environment first\")])\n        return\n\n    env_config = config_manager.config.environments[name]\n\n    # Show what will be deleted\n    console.print(f\"\u26a0\ufe0f  [red bold]Environment '{name}' Deletion[/red bold]\")\n    console.print()\n\n    deletion_data = {\n        \"Environment\": name,\n        \"Region\": env_config.region,\n        \"Agent Runtimes\": str(len(env_config.agent_runtimes)),\n        \"AWS Resources\": \"Will be deleted\" if not keep_resources else \"Will be kept\",\n    }\n\n    print_summary_box(\"Deletion Plan\", deletion_data, style=\"red\")\n\n    if env_config.agent_runtimes:\n        console.print(\"[bold]Runtimes to be removed:[/bold]\")\n        for runtime_name in env_config.agent_runtimes.keys():\n            console.print(f\"  \u2022 {runtime_name}\")\n\n    if not keep_resources:\n        console.print()\n        print_warning(\"AWS resources will also be deleted!\")\n        console.print(\"This includes CloudFormation stacks, ECR repositories, and IAM roles.\")\n\n    # Confirmation\n    if not force:\n        console.print()\n        if keep_resources:\n            message = f\"Remove environment '{name}' from configuration only?\"\n        else:\n            message = f\"DELETE environment '{name}' and all its AWS resources?\"\n\n        if not confirm_action(message):\n            print_info(\"Deletion cancelled\")\n            return\n\n    console.print(f\"\ud83d\uddd1\ufe0f  [bold]Deleting environment '{name}'...[/bold]\")\n\n    try:\n        # Delete agent runtimes first if not keeping resources\n        deleted_resources = []\n        errors = []\n\n        if not keep_resources and env_config.agent_runtimes:\n            print_info(\"\ud83e\udd16 Deleting agent runtimes...\")\n            for runtime_name in list(env_config.agent_runtimes.keys()):\n                try:\n                    # Use the agent delete command logic\n                    from agentcore_cli.services.agentcore import AgentCoreService\n                    from agentcore_cli.services.ecr import ECRService\n                    from agentcore_cli.services.iam import IAMService\n\n                    agentcore_service = AgentCoreService(region=env_config.region)\n                    ecr_service = ECRService(region=env_config.region)\n                    iam_service = IAMService(region=env_config.region)\n\n                    runtime = env_config.agent_runtimes[runtime_name]\n\n                    # Delete agent runtime\n                    if runtime.agent_runtime_id:\n                        result = agentcore_service.delete_agent_runtime(runtime.agent_runtime_id)\n                        if result.success:\n                            deleted_resources.extend(result.deleted_resources)\n\n                    # Delete ECR repository\n                    ecr_success, ecr_message = ecr_service.delete_repository(runtime_name, name, force=True)\n                    if ecr_success:\n                        deleted_resources.append(f\"ECR Repository: {runtime_name}\")\n\n                    # Delete IAM role\n                    iam_success, iam_message = iam_service.delete_agent_role(runtime_name, name)\n                    if iam_success:\n                        deleted_resources.append(f\"IAM Role: agentcore-{runtime_name}-{name}\")\n\n                except Exception as e:\n                    errors.append(f\"Failed to delete resources for {runtime_name}: {str(e)}\")\n\n        # Delete environment from config\n        if config_manager.delete_environment(name):\n            print_success(\"Environment deleted successfully\", name)\n\n            # Switch to another environment if this was current\n            if name == config_manager.current_environment:\n                remaining_envs = list(config_manager.config.environments.keys())\n                if remaining_envs:\n                    new_current = remaining_envs[0]\n                    config_manager.set_current_environment(new_current)\n                    print_success(\"Switched to environment\", new_current)\n                else:\n                    print_info(\"No environments remaining\")\n                    print_commands([(\"agentcore-cli env create &lt;name&gt;\", \"Create one\")])\n\n            # Show summary\n            if deleted_resources:\n                console.print()\n                console.print(\"[bold green]Deleted AWS resources:[/bold green]\")\n                for resource in deleted_resources:\n                    console.print(f\"  \u2705 {resource}\")\n\n            if errors:\n                console.print()\n                console.print(\"[bold red]Errors encountered:[/bold red]\")\n                for error in errors:\n                    console.print(f\"  \u274c {error}\")\n        else:\n            print_error(\"Failed to delete environment\", name)\n\n    except Exception as e:\n        print_error(\"Failed to delete environment\", str(e))\n</code></pre>"},{"location":"reference/agentcore_cli/commands/environment/#agentcore_cli.commands.environment.env_group","title":"<code>env_group()</code>","text":"<p>Environment management commands.</p> <p>Manage development, staging, and production environments. Each environment maintains isolated agent runtimes, endpoints, and configurations.</p> Source code in <code>agentcore_cli/commands/environment.py</code> Python<pre><code>@click.group()\ndef env_group() -&gt; None:\n    \"\"\"Environment management commands.\n\n    Manage development, staging, and production environments.\n    Each environment maintains isolated agent runtimes, endpoints, and configurations.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/agentcore_cli/commands/environment/#agentcore_cli.commands.environment.list_environments","title":"<code>list_environments(verbose)</code>","text":"<p>List all environments.</p> <p>Shows all configured environments with their basic information. Use --verbose to see detailed configuration for each environment.</p> Source code in <code>agentcore_cli/commands/environment.py</code> Python<pre><code>@env_group.command(\"list\")\n@click.option(\"--verbose\", \"-v\", is_flag=True, help=\"Show detailed environment information\")\ndef list_environments(verbose: bool) -&gt; None:\n    \"\"\"List all environments.\n\n    Shows all configured environments with their basic information.\n    Use --verbose to see detailed configuration for each environment.\n    \"\"\"\n    if not config_manager.config.environments:\n        print_info(\"No environments configured\")\n        print_commands([(\"agentcore-cli env create dev\", \"Create your first environment\")])\n        return\n\n    current_env = config_manager.current_environment\n    console.print(\"\ud83d\udccb [bold]Configured Environments[/bold]\")\n    console.print()\n\n    if verbose:\n        # Detailed view\n        for env_name, env_config in config_manager.config.environments.items():\n            is_current = \"\u2705 CURRENT\" if env_name == current_env else \"\"\n\n            console.print(f\"\ud83c\udf0d [bright_blue bold]{env_name}[/bright_blue bold] {is_current}\")\n\n            env_data = {\n                \"Region\": env_config.region,\n                \"Created\": env_config.created_at.strftime(\"%Y-%m-%d %H:%M\") if env_config.created_at else \"Unknown\",\n                \"Updated\": env_config.updated_at.strftime(\"%Y-%m-%d %H:%M\") if env_config.updated_at else \"Never\",\n                \"Agent Runtimes\": str(len(env_config.agent_runtimes)),\n                \"Default Runtime\": env_config.default_agent_runtime or \"None\",\n                \"Environment Variables\": str(len(env_config.environment_variables)),\n            }\n\n            print_summary_box(f\"Environment Details\", env_data, style=\"blue\")\n\n            if env_config.agent_runtimes:\n                console.print(\"   [bold]Runtimes:[/bold]\")\n                for runtime_name in env_config.agent_runtimes.keys():\n                    marker = \" (default)\" if runtime_name == env_config.default_agent_runtime else \"\"\n                    console.print(f\"     \u2022 {runtime_name}{marker}\")\n            console.print()\n    else:\n        # Table view\n        table_data = []\n        for env_name, env_config in config_manager.config.environments.items():\n            is_current = \"\u2705\" if env_name == current_env else \"\"\n            table_data.append(\n                [\n                    is_current,\n                    env_name,\n                    env_config.region,\n                    len(env_config.agent_runtimes),\n                    env_config.default_agent_runtime or \"-\",\n                ]\n            )\n\n        headers = [\"\", \"Environment\", \"Region\", \"Agents\", \"Default Agent\"]\n        console.print(tabulate(table_data, headers=headers, tablefmt=\"simple\"))\n        console.print()\n        print_info(\"Use --verbose for detailed information\")\n</code></pre>"},{"location":"reference/agentcore_cli/commands/environment/#agentcore_cli.commands.environment.manage_variables","title":"<code>manage_variables(set_var=None, unset=None, list_vars=False, environment=None)</code>","text":"<p>Manage environment variables.</p> <p>Environment variables are available to all agent runtimes in the environment.</p> <p>Examples:</p> <p>agentcore-cli env vars --list agentcore-cli env vars --set API_KEY=secret123 agentcore-cli env vars --unset OLD_CONFIG agentcore-cli env vars --set DEBUG=true --env staging</p> Source code in <code>agentcore_cli/commands/environment.py</code> Python<pre><code>@env_group.command(\"vars\")\n@click.option(\"--set\", \"set_var\", help=\"Set variable (format: KEY=VALUE)\")\n@click.option(\"--unset\", help=\"Remove variable\")\n@click.option(\"--list\", \"list_vars\", is_flag=True, help=\"List all variables\")\n@click.option(\"--env\", \"environment\", help=\"Target environment (defaults to current)\")\ndef manage_variables(\n    set_var: str | None = None, unset: str | None = None, list_vars: bool = False, environment: str | None = None\n) -&gt; None:\n    \"\"\"Manage environment variables.\n\n    Environment variables are available to all agent runtimes in the environment.\n\n    Examples:\n        agentcore-cli env vars --list\n        agentcore-cli env vars --set API_KEY=secret123\n        agentcore-cli env vars --unset OLD_CONFIG\n        agentcore-cli env vars --set DEBUG=true --env staging\n    \"\"\"\n    target_env = environment or config_manager.current_environment\n\n    if target_env not in config_manager.config.environments:\n        print_error(\"Environment not found\", target_env)\n        return\n\n    env_config = config_manager.config.environments[target_env]\n\n    if list_vars or (not set_var and not unset):\n        # List variables\n        console.print(f\"\ud83c\udf0d [bold]Environment Variables for '{target_env}'[/bold]:\")\n        if not env_config.environment_variables:\n            print_info(\"No variables set\")\n        else:\n            for key, value in sorted(env_config.environment_variables.items()):\n                # Mask sensitive values\n                display_value = (\n                    \"***\"\n                    if any(sensitive in key.lower() for sensitive in [\"key\", \"secret\", \"token\", \"password\"])\n                    else value\n                )\n                console.print(f\"   {key}={display_value}\")\n        return\n\n    if set_var:\n        # Set variable\n        if \"=\" not in set_var:\n            print_error(\"Invalid format. Use: KEY=VALUE\")\n            return\n\n        key, value = set_var.split(\"=\", 1)\n        key = key.strip()\n        value = value.strip()\n\n        if not key:\n            print_error(\"Variable name cannot be empty\")\n            return\n\n        env_config.environment_variables[key] = value\n        env_config.updated_at = datetime.now()\n        config_manager.save_config()\n\n        masked_value = \"***\" if any(s in key.lower() for s in [\"key\", \"secret\", \"token\", \"password\"]) else value\n        print_success(\"Variable set\", f\"{key}={masked_value} in '{target_env}'\")\n\n    if unset:\n        # Remove variable\n        if unset in env_config.environment_variables:\n            del env_config.environment_variables[unset]\n            env_config.updated_at = datetime.now()\n            config_manager.save_config()\n            print_success(\"Variable removed\", f\"{unset} from '{target_env}'\")\n        else:\n            print_error(\"Variable not found\", f\"'{unset}' in '{target_env}'\")\n</code></pre>"},{"location":"reference/agentcore_cli/commands/environment/#agentcore_cli.commands.environment.show_current","title":"<code>show_current()</code>","text":"<p>Show current environment details.</p> Source code in <code>agentcore_cli/commands/environment.py</code> Python<pre><code>@env_group.command(\"current\")\ndef show_current() -&gt; None:\n    \"\"\"Show current environment details.\"\"\"\n    current_env = config_manager.current_environment\n\n    if current_env not in config_manager.config.environments:\n        print_error(\"Current environment not found\", f\"'{current_env}' not in configuration\")\n        return\n\n    env_config = config_manager.config.environments[current_env]\n\n    console.print(f\"\ud83c\udfaf [bright_green bold]Current Environment: {current_env}[/bright_green bold]\")\n    console.print()\n\n    current_data = {\n        \"Region\": env_config.region,\n        \"Default Runtime\": env_config.default_agent_runtime or \"None\",\n        \"Agent Runtimes\": str(len(env_config.agent_runtimes)),\n        \"Environment Variables\": str(len(env_config.environment_variables)),\n        \"Created\": env_config.created_at.strftime(\"%Y-%m-%d %H:%M\") if env_config.created_at else \"Unknown\",\n        \"Updated\": env_config.updated_at.strftime(\"%Y-%m-%d %H:%M\") if env_config.updated_at else \"Never\",\n    }\n\n    print_summary_box(\"Environment Information\", current_data, style=\"green\")\n\n    if env_config.agent_runtimes:\n        console.print()\n        console.print(\"[bold]Agent Runtimes:[/bold]\")\n        for runtime_name, runtime in env_config.agent_runtimes.items():\n            marker = \" \u2b50\" if runtime_name == env_config.default_agent_runtime else \"\"\n            console.print(f\"  \u2022 [bright_blue]{runtime_name}{marker}[/bright_blue]\")\n            console.print(f\"    Runtime ID: {runtime.agent_runtime_id}\")\n            console.print(f\"    Latest Version: {runtime.latest_version}\")\n            console.print(f\"    Region: {runtime.region}\")\n\n    if env_config.environment_variables:\n        console.print()\n        console.print(\"[bold]Environment Variables:[/bold]\")\n        for key, value in env_config.environment_variables.items():\n            # Mask sensitive values\n            display_value = (\n                \"***\"\n                if any(sensitive in key.lower() for sensitive in [\"key\", \"secret\", \"token\", \"password\"])\n                else value\n            )\n            console.print(f\"  \u2022 {key}={display_value}\")\n</code></pre>"},{"location":"reference/agentcore_cli/commands/environment/#agentcore_cli.commands.environment.use_environment","title":"<code>use_environment(name)</code>","text":"<p>Switch to a different environment.</p> <p>Changes the current active environment for all subsequent commands. All agent operations will target the selected environment.</p> <p>Examples:</p> <p>agentcore-cli env use dev agentcore-cli env use staging agentcore-cli env use prod</p> Source code in <code>agentcore_cli/commands/environment.py</code> Python<pre><code>@env_group.command(\"use\")\n@click.argument(\"name\")\ndef use_environment(name: str) -&gt; None:\n    \"\"\"Switch to a different environment.\n\n    Changes the current active environment for all subsequent commands.\n    All agent operations will target the selected environment.\n\n    Examples:\n      agentcore-cli env use dev\n      agentcore-cli env use staging\n      agentcore-cli env use prod\n    \"\"\"\n    if name not in config_manager.config.environments:\n        print_error(\"Environment not found\", name)\n        console.print()\n        console.print(\"[bold]Available environments:[/bold]\")\n        for env_name in config_manager.config.environments.keys():\n            console.print(f\"  \u2022 {env_name}\")\n        return\n\n    # Switch environment\n    if config_manager.set_current_environment(name):\n        print_success(\"Switched to environment\", name)\n\n        # Show environment summary\n        env_config = config_manager.config.environments[name]\n\n        summary_data = {\"Region\": env_config.region, \"Agent Runtimes\": str(len(env_config.agent_runtimes))}\n\n        if env_config.default_agent_runtime:\n            summary_data[\"Default Runtime\"] = env_config.default_agent_runtime\n\n        print_summary_box(\"Environment Summary\", summary_data, style=\"green\")\n\n        if not env_config.agent_runtimes:\n            print_info(\"No agent runtimes yet\")\n            print_commands([(\"agentcore-cli agent create &lt;name&gt;\", \"Create one\")])\n    else:\n        print_error(\"Failed to switch to environment\", name)\n</code></pre>"},{"location":"reference/agentcore_cli/commands/resources/","title":"agentcore_cli.commands.resources","text":""},{"location":"reference/agentcore_cli/commands/resources/#agentcore_cli.commands.resources","title":"<code>agentcore_cli.commands.resources</code>","text":"<p>AWS resource management commands for AgentCore Platform CLI.</p> <p>This module provides commands for managing AWS resources including ECR repositories, IAM roles, and Cognito authentication resources.</p>"},{"location":"reference/agentcore_cli/commands/resources/#agentcore_cli.commands.resources.cognito_group","title":"<code>cognito_group()</code>","text":"<p>Cognito authentication resource management.</p> Source code in <code>agentcore_cli/commands/resources.py</code> Python<pre><code>@resources_group.group(\"cognito\")\ndef cognito_group() -&gt; None:\n    \"\"\"Cognito authentication resource management.\"\"\"\n    pass\n</code></pre>"},{"location":"reference/agentcore_cli/commands/resources/#agentcore_cli.commands.resources.create_cognito_resources","title":"<code>create_cognito_resources(agent_name, region, environment, allow_signup, email_verification, resource_prefix)</code>","text":"<p>Create Cognito authentication resources.</p> <p>Creates a Cognito User Pool, User Pool Client, Identity Pool, and associated IAM roles for agent authentication.</p> <p>Examples:</p> <p>agentcore-cli resources cognito create my-agent agentcore-cli resources cognito create my-agent --allow-signup --email-verification</p> Source code in <code>agentcore_cli/commands/resources.py</code> Python<pre><code>@cognito_group.command(\"create\")\n@click.argument(\"agent_name\")\n@click.option(\"--region\", \"-r\", help=\"AWS region (defaults to current environment)\")\n@click.option(\"--environment\", \"-e\", help=\"Environment (defaults to current)\")\n@click.option(\"--allow-signup\", is_flag=True, help=\"Allow self-registration\")\n@click.option(\"--email-verification\", is_flag=True, default=True, help=\"Require email verification\")\n@click.option(\"--resource-prefix\", default=\"agentcore\", help=\"Resource name prefix\")\ndef create_cognito_resources(\n    agent_name: str,\n    region: str | None,\n    environment: str | None,\n    allow_signup: bool,\n    email_verification: bool,\n    resource_prefix: str,\n) -&gt; None:\n    \"\"\"Create Cognito authentication resources.\n\n    Creates a Cognito User Pool, User Pool Client, Identity Pool, and associated IAM roles\n    for agent authentication.\n\n    Examples:\n      agentcore-cli resources cognito create my-agent\n      agentcore-cli resources cognito create my-agent --allow-signup --email-verification\n    \"\"\"\n    # Validate agent name\n    is_valid, error_msg = validate_agent_name(agent_name)\n    if not is_valid:\n        print_error(\"Invalid agent name\", error_msg)\n        return\n\n    # Get region and environment\n    if not region:\n        try:\n            region = config_manager.get_region(environment)\n        except Exception:\n            from agentcore_cli.utils.aws_utils import get_aws_region\n\n            region = get_aws_region() or \"us-east-1\"\n\n    if not environment:\n        environment = config_manager.current_environment\n\n    print_step(1, \"Creating Cognito Resources\", f\"Setting up authentication for '{agent_name}'\")\n\n    cognito_data = {\n        \"Agent\": agent_name,\n        \"Environment\": environment,\n        \"Region\": region,\n        \"Self-registration\": \"Enabled\" if allow_signup else \"Disabled\",\n        \"Email verification\": \"Required\" if email_verification else \"Optional\",\n    }\n\n    print_summary_box(\"Authentication Configuration\", cognito_data)\n    console.print()\n    print_info(\"\u23f3 This may take a few minutes...\")\n\n    try:\n        cognito_service = CognitoService(region=region)\n\n        # Create Cognito resources\n        cognito_config = cognito_service.create_cognito_resources(\n            agent_name=agent_name,\n            environment=environment,\n            resource_name_prefix=resource_prefix,\n            allow_self_registration=allow_signup,\n            email_verification_required=email_verification,\n        )\n\n        if cognito_config:\n            print_success(\"Cognito resources created successfully\")\n            console.print()\n            console.print(\"\ud83d\udccb [bold]Created Resources:[/bold]\")\n\n            if cognito_config.user_pool:\n                console.print(f\"   User Pool ID: {cognito_config.user_pool.user_pool_id}\")\n                if cognito_config.user_pool.client_id:\n                    console.print(f\"   Client ID: {cognito_config.user_pool.client_id}\")\n\n            if cognito_config.identity_pool:\n                console.print(f\"   Identity Pool ID: {cognito_config.identity_pool.identity_pool_id}\")\n\n            # Add to environment config\n            config_manager.add_cognito_config(environment, cognito_config)\n            print_success(\"Cognito configuration saved\")\n\n            console.print()\n            next_steps: list[tuple[str, str | None]] = [\n                (\"Integrate with your application using the User Pool Client ID\", None),\n                (\"Configure authentication flows in your agent code\", None),\n                (\"Test authentication in the AWS Cognito console\", None),\n            ]\n\n            print_commands(next_steps, title=\"\ud83c\udf89 Next steps\")\n        else:\n            print_error(\"Failed to create Cognito resources\")\n\n    except Exception as e:\n        print_error(\"Creation failed\", str(e))\n</code></pre>"},{"location":"reference/agentcore_cli/commands/resources/#agentcore_cli.commands.resources.create_ecr_repository","title":"<code>create_ecr_repository(name, region, image_scanning, lifecycle_days, environment)</code>","text":"<p>Create an ECR repository.</p> <p>Creates a new ECR repository for storing container images. The repository will be configured with appropriate security settings.</p> <p>Examples:</p> <p>agentcore-cli resources ecr create my-agent agentcore-cli resources ecr create my-agent --image-scanning --lifecycle-days 7</p> Source code in <code>agentcore_cli/commands/resources.py</code> Python<pre><code>@ecr_group.command(\"create\")\n@click.argument(\"name\")\n@click.option(\"--region\", \"-r\", help=\"AWS region (defaults to current environment)\")\n@click.option(\"--image-scanning\", is_flag=True, help=\"Enable image vulnerability scanning\")\n@click.option(\"--lifecycle-days\", default=30, help=\"Days to retain untagged images\")\n@click.option(\"--environment\", \"-e\", help=\"Environment tag (defaults to current)\")\ndef create_ecr_repository(\n    name: str, region: str | None, image_scanning: bool, lifecycle_days: int, environment: str | None\n) -&gt; None:\n    \"\"\"Create an ECR repository.\n\n    Creates a new ECR repository for storing container images.\n    The repository will be configured with appropriate security settings.\n\n    Examples:\n      agentcore-cli resources ecr create my-agent\n      agentcore-cli resources ecr create my-agent --image-scanning --lifecycle-days 7\n    \"\"\"\n    # Validate repository name\n    is_valid, error_msg = validate_agent_name(name)\n    if not is_valid:\n        print_error(\"Invalid repository name\", error_msg)\n        return\n\n    # Get region and environment\n    if not region:\n        try:\n            region = config_manager.get_region(environment)\n        except Exception:\n            from agentcore_cli.utils.aws_utils import get_aws_region\n\n            region = get_aws_region() or \"us-east-1\"\n\n    if not environment:\n        environment = config_manager.current_environment\n\n    print_step(1, \"Creating ECR Repository\", f\"Setting up repository '{name}'\")\n\n    repo_data = {\n        \"Repository Name\": name,\n        \"Region\": region,\n        \"Environment\": environment,\n        \"Image Scanning\": \"Enabled\" if image_scanning else \"Disabled\",\n        \"Lifecycle Policy\": f\"{lifecycle_days} days for untagged images\",\n    }\n\n    print_summary_box(\"Repository Configuration\", repo_data)\n\n    try:\n        ecr_service = ECRService(region=region)\n\n        # Create repository\n        success, repo_info, message = ecr_service.create_repository(\n            repository_name=name,\n            environment=environment,\n            image_scanning=image_scanning,\n            lifecycle_policy_days=lifecycle_days,\n        )\n\n        if success and repo_info:\n            print_success(\"ECR repository created successfully\")\n            print_info(f\"URI: {repo_info.repository_uri}\")\n\n            # Add to global config\n            config_manager.add_ecr_repository(name, repo_info)\n            print_success(\"Repository added to configuration\")\n\n            console.print()\n            next_steps: list[tuple[str, str | None]] = [\n                (f\"agentcore-cli container build {name}\", \"Build and push\"),\n                (f\"AWS ECR &gt; {name}\", \"View in console\"),\n            ]\n\n            print_commands(next_steps, title=\"\ud83c\udf89 Next steps\")\n        else:\n            print_error(\"Failed to create ECR repository\", message)\n\n    except Exception as e:\n        print_error(\"Creation failed\", str(e))\n</code></pre>"},{"location":"reference/agentcore_cli/commands/resources/#agentcore_cli.commands.resources.create_iam_role","title":"<code>create_iam_role(agent_name, region, role_prefix, environment)</code>","text":"<p>Create an IAM role for an agent.</p> <p>Creates an IAM role with appropriate permissions for AgentCore runtime execution.</p> <p>Examples:</p> <p>agentcore-cli resources iam create my-agent agentcore-cli resources iam create my-agent --role-prefix mycompany</p> Source code in <code>agentcore_cli/commands/resources.py</code> Python<pre><code>@iam_group.command(\"create\")\n@click.argument(\"agent_name\")\n@click.option(\"--region\", \"-r\", help=\"AWS region (defaults to current environment)\")\n@click.option(\"--role-prefix\", default=\"agentcore\", help=\"Role name prefix\")\n@click.option(\"--environment\", \"-e\", help=\"Environment (defaults to current)\")\ndef create_iam_role(agent_name: str, region: str | None, role_prefix: str, environment: str | None) -&gt; None:\n    \"\"\"Create an IAM role for an agent.\n\n    Creates an IAM role with appropriate permissions for AgentCore runtime execution.\n\n    Examples:\n      agentcore-cli resources iam create my-agent\n      agentcore-cli resources iam create my-agent --role-prefix mycompany\n    \"\"\"\n    # Validate agent name\n    is_valid, error_msg = validate_agent_name(agent_name)\n    if not is_valid:\n        print_error(\"Invalid agent name\", error_msg)\n        return\n\n    # Get region and environment\n    if not region:\n        try:\n            region = config_manager.get_region(environment)\n        except Exception:\n            from agentcore_cli.utils.aws_utils import get_aws_region\n\n            region = get_aws_region() or \"us-west-2\"\n\n    if not environment:\n        environment = config_manager.current_environment\n\n    role_name = f\"{role_prefix}-{agent_name}-{environment}-role\"\n\n    print_step(1, \"Creating IAM Role\", f\"Setting up role for agent '{agent_name}'\")\n\n    role_data = {\"Agent Name\": agent_name, \"Role Name\": role_name, \"Environment\": environment, \"Region\": region}\n\n    print_summary_box(\"Role Configuration\", role_data)\n\n    try:\n        iam_service = IAMService(region=region)\n\n        # Create role\n        role_config = iam_service.create_agent_role(\n            agent_name=agent_name, environment=environment, role_name_prefix=role_prefix\n        )\n\n        if role_config:\n            print_success(\"IAM role created successfully\")\n            print_info(f\"ARN: {role_config.arn}\")\n            print_info(f\"Role Name: {role_config.name}\")\n\n            # Add to global config\n            config_manager.add_iam_role(role_config.name, role_config)\n            print_success(\"Role added to configuration\")\n\n            console.print()\n            console.print(\"\ud83c\udf89 [bold]Role includes permissions for:[/bold]\")\n            permissions = [\n                \"\u2022 Bedrock AgentCore execution\",\n                \"\u2022 S3 read-only access\",\n                \"\u2022 CloudWatch Logs full access\",\n                \"\u2022 Bedrock invoke model permissions\",\n            ]\n\n            for perm in permissions:\n                console.print(f\"   {perm}\")\n        else:\n            print_error(\"Failed to create IAM role\")\n\n    except Exception as e:\n        print_error(\"Creation failed\", str(e))\n</code></pre>"},{"location":"reference/agentcore_cli/commands/resources/#agentcore_cli.commands.resources.delete_ecr_repository","title":"<code>delete_ecr_repository(name, region, force, environment)</code>","text":"<p>Delete an ECR repository.</p> <p>\u26a0\ufe0f  WARNING: This will permanently delete the repository and all its images.</p> <p>Examples:</p> <p>agentcore-cli resources ecr delete old-repo --force</p> Source code in <code>agentcore_cli/commands/resources.py</code> Python<pre><code>@ecr_group.command(\"delete\")\n@click.argument(\"name\")\n@click.option(\"--region\", \"-r\", help=\"AWS region (defaults to current environment)\")\n@click.option(\"--force\", \"-f\", is_flag=True, help=\"Skip confirmation prompt\")\n@click.option(\"--environment\", \"-e\", help=\"Environment (defaults to current)\")\ndef delete_ecr_repository(name: str, region: str | None, force: bool, environment: str | None) -&gt; None:\n    \"\"\"Delete an ECR repository.\n\n    \u26a0\ufe0f  WARNING: This will permanently delete the repository and all its images.\n\n    Examples:\n      agentcore-cli resources ecr delete old-repo --force\n    \"\"\"\n    # Get region and environment\n    if not region:\n        try:\n            region = config_manager.get_region(environment)\n        except Exception:\n            from agentcore_cli.utils.aws_utils import get_aws_region\n\n            region = get_aws_region() or \"us-east-1\"\n\n    if not environment:\n        environment = config_manager.current_environment\n\n    # Confirmation\n    if not force:\n        console.print(f\"\u26a0\ufe0f  [red bold]Repository '{name}' Deletion[/red bold]\")\n\n        deletion_data = {\n            \"Repository\": name,\n            \"Region\": region,\n            \"Action\": \"Permanently delete repository and ALL container images\",\n        }\n\n        print_summary_box(\"Deletion Plan\", deletion_data, style=\"red\")\n        console.print()\n\n        if not confirm_action(f\"DELETE repository '{name}' and all images?\"):\n            print_info(\"Deletion cancelled\")\n            return\n\n    print_step(1, \"Deleting ECR Repository\", f\"Removing repository '{name}'...\")\n\n    try:\n        ecr_service = ECRService(region=region)\n\n        # Delete repository\n        success, message = ecr_service.delete_repository(name, environment, force=True)\n\n        if success:\n            print_success(\"ECR repository deleted successfully\", name)\n\n            # Remove from config\n            if (\n                config_manager.config.global_resources\n                and name in config_manager.config.global_resources.ecr_repositories\n            ):\n                del config_manager.config.global_resources.ecr_repositories[name]\n                config_manager.save_config()\n                print_success(\"Repository removed from configuration\")\n        else:\n            print_error(\"Failed to delete repository\", message)\n\n    except Exception as e:\n        print_error(\"Deletion failed\", str(e))\n</code></pre>"},{"location":"reference/agentcore_cli/commands/resources/#agentcore_cli.commands.resources.delete_iam_role","title":"<code>delete_iam_role(agent_name, environment, force)</code>","text":"<p>Delete an IAM role for an agent.</p> <p>\u26a0\ufe0f  WARNING: This will permanently delete the IAM role. Ensure no agents are using this role before deletion.</p> <p>Examples:</p> <p>agentcore-cli resources iam delete my-agent --force agentcore-cli resources iam delete my-agent --environment staging</p> Source code in <code>agentcore_cli/commands/resources.py</code> Python<pre><code>@iam_group.command(\"delete\")\n@click.argument(\"agent_name\")\n@click.option(\"--environment\", \"-e\", help=\"Environment (defaults to current)\")\n@click.option(\"--force\", \"-f\", is_flag=True, help=\"Skip confirmation prompt\")\ndef delete_iam_role(agent_name: str, environment: str | None, force: bool) -&gt; None:\n    \"\"\"Delete an IAM role for an agent.\n\n    \u26a0\ufe0f  WARNING: This will permanently delete the IAM role.\n    Ensure no agents are using this role before deletion.\n\n    Examples:\n      agentcore-cli resources iam delete my-agent --force\n      agentcore-cli resources iam delete my-agent --environment staging\n    \"\"\"\n    if not environment:\n        environment = config_manager.current_environment\n\n    # Confirmation\n    if not force:\n        console.print(f\"\u26a0\ufe0f  [red bold]IAM Role Deletion[/red bold]\")\n\n        deletion_data = {\"Agent\": agent_name, \"Environment\": environment, \"Action\": \"Permanently delete the IAM role\"}\n\n        print_summary_box(\"Deletion Plan\", deletion_data, style=\"red\")\n        console.print()\n\n        if not confirm_action(f\"DELETE IAM role for '{agent_name}' in '{environment}'?\"):\n            print_info(\"Deletion cancelled\")\n            return\n\n    print_step(1, \"Deleting IAM Role\", f\"Removing role for agent '{agent_name}'...\")\n\n    try:\n        # Get region for IAM service\n        try:\n            region = config_manager.get_region(environment)\n        except Exception:\n            from agentcore_cli.utils.aws_utils import get_aws_region\n\n            region = get_aws_region() or \"us-east-1\"\n\n        iam_service = IAMService(region=region)\n\n        # Delete role\n        success, message = iam_service.delete_agent_role(agent_name, environment)\n\n        if success:\n            print_success(\"IAM role deleted successfully\")\n\n            # Remove from config\n            role_name = f\"agentcore-{agent_name}-{environment}-role\"\n            if config_manager.config.global_resources and role_name in config_manager.config.global_resources.iam_roles:\n                del config_manager.config.global_resources.iam_roles[role_name]\n                config_manager.save_config()\n                print_success(\"Role removed from configuration\")\n        else:\n            print_error(\"Failed to delete role\", message)\n\n    except Exception as e:\n        print_error(\"Deletion failed\", str(e))\n</code></pre>"},{"location":"reference/agentcore_cli/commands/resources/#agentcore_cli.commands.resources.ecr_group","title":"<code>ecr_group()</code>","text":"<p>ECR repository management commands.</p> Source code in <code>agentcore_cli/commands/resources.py</code> Python<pre><code>@resources_group.group(\"ecr\")\ndef ecr_group() -&gt; None:\n    \"\"\"ECR repository management commands.\"\"\"\n    pass\n</code></pre>"},{"location":"reference/agentcore_cli/commands/resources/#agentcore_cli.commands.resources.iam_group","title":"<code>iam_group()</code>","text":"<p>IAM role management commands.</p> Source code in <code>agentcore_cli/commands/resources.py</code> Python<pre><code>@resources_group.group(\"iam\")\ndef iam_group() -&gt; None:\n    \"\"\"IAM role management commands.\"\"\"\n    pass\n</code></pre>"},{"location":"reference/agentcore_cli/commands/resources/#agentcore_cli.commands.resources.list_cognito_resources","title":"<code>list_cognito_resources(environment)</code>","text":"<p>List Cognito authentication resources.</p> <p>Shows all Cognito resources configured for AgentCore agents.</p> Source code in <code>agentcore_cli/commands/resources.py</code> Python<pre><code>@cognito_group.command(\"list\")\n@click.option(\"--environment\", \"-e\", help=\"Filter by environment\")\ndef list_cognito_resources(environment: str | None) -&gt; None:\n    \"\"\"List Cognito authentication resources.\n\n    Shows all Cognito resources configured for AgentCore agents.\n    \"\"\"\n    console.print(\"\ud83d\udd11 [bold]Cognito authentication resources[/bold]\")\n    if environment:\n        print_info(f\"Filtered by environment: {environment}\")\n    console.print()\n\n    try:\n        # Get cognito configs from environments\n        configs_found = False\n\n        for env_name, env_config in config_manager.config.environments.items():\n            if environment and env_name != environment:\n                continue\n\n            if hasattr(env_config, \"cognito\") and env_config.cognito:\n                configs_found = True\n                cognito = env_config.cognito\n\n                console.print(f\"\ud83c\udf0d [bright_blue bold]Environment: {env_name}[/bright_blue bold]\")\n\n                if cognito.user_pool:\n                    console.print(f\"   User Pool ID: {cognito.user_pool.user_pool_id}\")\n                    if cognito.user_pool.client_id:\n                        console.print(f\"   Client ID: {cognito.user_pool.client_id}\")\n\n                if cognito.identity_pool:\n                    console.print(f\"   Identity Pool ID: {cognito.identity_pool.identity_pool_id}\")\n\n                console.print()\n\n        if not configs_found:\n            print_info(\"No Cognito resources found\")\n            print_commands([(\"agentcore-cli resources cognito create &lt;agent-name&gt;\", \"Create them\")])\n\n    except Exception as e:\n        print_error(\"Failed to list Cognito resources\", str(e))\n</code></pre>"},{"location":"reference/agentcore_cli/commands/resources/#agentcore_cli.commands.resources.list_ecr_repositories","title":"<code>list_ecr_repositories(region, environment)</code>","text":"<p>List ECR repositories.</p> <p>Shows all ECR repositories in the specified region, optionally filtered by environment tag.</p> Source code in <code>agentcore_cli/commands/resources.py</code> Python<pre><code>@ecr_group.command(\"list\")\n@click.option(\"--region\", \"-r\", help=\"AWS region (defaults to current environment)\")\n@click.option(\"--environment\", \"-e\", help=\"Filter by environment tag\")\ndef list_ecr_repositories(region: str | None, environment: str | None) -&gt; None:\n    \"\"\"List ECR repositories.\n\n    Shows all ECR repositories in the specified region,\n    optionally filtered by environment tag.\n    \"\"\"\n    # Get region\n    if not region:\n        try:\n            region = config_manager.get_region(environment)\n        except Exception:\n            from agentcore_cli.utils.aws_utils import get_aws_region\n\n            region = get_aws_region() or \"us-east-1\"\n\n    console.print(f\"\ud83d\udce6 [bold]ECR repositories in region {region}[/bold]\")\n    if environment:\n        print_info(f\"Filtered by environment: {environment}\")\n    console.print()\n\n    try:\n        ecr_service = ECRService(region=region)\n\n        # Get repositories from global config\n        repositories = []\n        if config_manager.config.global_resources and config_manager.config.global_resources.ecr_repositories:\n            repositories = list(config_manager.config.global_resources.ecr_repositories.keys())\n\n        if not repositories:\n            print_info(\"No ECR repositories found in configuration\")\n            print_commands([(\"agentcore-cli resources ecr create &lt;name&gt;\", \"Create one\")])\n            return\n\n        table_data = []\n        for repo_name in repositories:\n            try:\n                success, repo_info, _ = ecr_service.get_repository(repo_name)\n                if success and repo_info:\n                    # Get image count and last push\n                    image_count = len(repo_info.available_tags) if repo_info.available_tags else 0\n                    last_push = repo_info.last_push.strftime(\"%Y-%m-%d\") if repo_info.last_push else \"Never\"\n\n                    table_data.append(\n                        [\n                            repo_name,\n                            repo_info.registry_id,\n                            image_count,\n                            \"Yes\" if repo_info.image_scanning_config else \"No\",\n                            last_push,\n                        ]\n                    )\n                else:\n                    table_data.append([repo_name, \"Unknown\", \"?\", \"?\", \"Not found\"])\n            except Exception:\n                table_data.append([repo_name, \"Error\", \"?\", \"?\", \"Error\"])\n\n        if table_data:\n            headers = [\"Repository\", \"Registry ID\", \"Images\", \"Scanning\", \"Last Push\"]\n            console.print(tabulate(table_data, headers=headers, tablefmt=\"simple\"))\n        else:\n            print_info(\"No repositories found\")\n\n    except Exception as e:\n        print_error(\"Failed to list repositories\", str(e))\n</code></pre>"},{"location":"reference/agentcore_cli/commands/resources/#agentcore_cli.commands.resources.list_iam_roles","title":"<code>list_iam_roles(environment)</code>","text":"<p>List IAM roles for agents.</p> <p>Shows all AgentCore IAM roles, optionally filtered by environment.</p> Source code in <code>agentcore_cli/commands/resources.py</code> Python<pre><code>@iam_group.command(\"list\")\n@click.option(\"--environment\", \"-e\", help=\"Filter by environment\")\ndef list_iam_roles(environment: str | None) -&gt; None:\n    \"\"\"List IAM roles for agents.\n\n    Shows all AgentCore IAM roles, optionally filtered by environment.\n    \"\"\"\n    console.print(\"\ud83d\udd10 [bold]AgentCore IAM roles[/bold]\")\n    if environment:\n        print_info(f\"Filtered by environment: {environment}\")\n    console.print()\n\n    try:\n        # Get roles from global config\n        roles = []\n        if config_manager.config.global_resources and config_manager.config.global_resources.iam_roles:\n            for role_name, role_config in config_manager.config.global_resources.iam_roles.items():\n                if not environment or environment in role_name:\n                    roles.append((role_name, role_config))\n\n        if not roles:\n            print_info(\"No IAM roles found in configuration\")\n            print_commands([(\"agentcore-cli resources iam create &lt;agent-name&gt;\", \"Create one\")])\n            return\n\n        table_data = []\n        for role_name, role_config in roles:\n            # Extract environment from role name\n            parts = role_name.split(\"-\")\n            env = parts[-2] if len(parts) &gt;= 3 else \"unknown\"\n            agent = parts[-3] if len(parts) &gt;= 4 else \"unknown\"\n\n            table_data.append([agent, env, role_name, role_config.arn.split(\"/\")[-1] if role_config.arn else \"Unknown\"])\n\n        headers = [\"Agent\", \"Environment\", \"Role Name\", \"Role ARN\"]\n        console.print(tabulate(table_data, headers=headers, tablefmt=\"simple\"))\n\n    except Exception as e:\n        print_error(\"Failed to list roles\", str(e))\n</code></pre>"},{"location":"reference/agentcore_cli/commands/resources/#agentcore_cli.commands.resources.resources_group","title":"<code>resources_group()</code>","text":"<p>AWS resource management commands.</p> <p>Manage ECR repositories, IAM roles, and Cognito authentication resources across your environments.</p> Source code in <code>agentcore_cli/commands/resources.py</code> Python<pre><code>@click.group()\ndef resources_group() -&gt; None:\n    \"\"\"AWS resource management commands.\n\n    Manage ECR repositories, IAM roles, and Cognito authentication resources\n    across your environments.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/agentcore_cli/commands/setup/","title":"agentcore_cli.commands.setup","text":""},{"location":"reference/agentcore_cli/commands/setup/#agentcore_cli.commands.setup","title":"<code>agentcore_cli.commands.setup</code>","text":"<p>Enhanced setup command for AgentCore CLI.</p> <p>This module provides a comprehensive setup experience that combines authentication, configuration, environment creation, and initial resource setup into an interactive wizard aligned with our environment-first architecture.</p>"},{"location":"reference/agentcore_cli/commands/setup/#agentcore_cli.commands.setup.print_welcome_banner","title":"<code>print_welcome_banner()</code>","text":"<p>Print an attractive welcome banner.</p> Source code in <code>agentcore_cli/commands/setup.py</code> Python<pre><code>def print_welcome_banner() -&gt; None:\n    \"\"\"Print an attractive welcome banner.\"\"\"\n    print_ascii_banner(\"Let's set up your AI agent development environment\")\n\n    setup_steps = [\n        \"Validate your AWS credentials\",\n        \"Create your first environment (dev, staging, or prod)\",\n        \"Configure observability (Transaction Search)\",\n        \"Configure cloud synchronization\",\n        \"Set up authentication resources (optional)\",\n        \"Prepare you for agent development\",\n    ]\n\n    console.print(\"\ud83c\udfd7\ufe0f  [bold]This wizard will:[/bold]\")\n    for step in setup_steps:\n        console.print(f\"   \u2022 {step}\")\n    console.print()\n</code></pre>"},{"location":"reference/agentcore_cli/commands/setup/#agentcore_cli.commands.setup.run_automated_setup","title":"<code>run_automated_setup(region='us-west-2', environment='dev', skip_cognito=False, skip_sync=False, skip_observability=False)</code>","text":"<p>Run automated setup with minimal prompts.</p> Source code in <code>agentcore_cli/commands/setup.py</code> Python<pre><code>def run_automated_setup(\n    region: str = \"us-west-2\",\n    environment: str = \"dev\",\n    skip_cognito: bool = False,\n    skip_sync: bool = False,\n    skip_observability: bool = False,\n) -&gt; None:\n    \"\"\"Run automated setup with minimal prompts.\"\"\"\n\n    print_info(\"Running automated setup...\")\n\n    # Validate AWS credentials\n    if not validate_aws_credentials():\n        print_error(\"AWS credentials required for setup\")\n        return\n\n    # Get region\n    if not region:\n        region = get_aws_region() or \"us-east-1\"\n\n    # Validate region\n    is_valid, error_msg = validate_region(region)\n    if not is_valid:\n        print_error(error_msg)\n        return\n\n    print_info(f\"Using region: {region}\")\n    print_info(f\"Creating environment: {environment}\")\n\n    try:\n        # Create environment\n        success = config_manager.add_environment(environment, region)\n        if success:\n            config_manager.set_current_environment(environment)\n            print_success(f\"Environment '{environment}' created\")\n        else:\n            if environment in config_manager.config.environments:\n                config_manager.set_current_environment(environment)\n                print_success(f\"Using existing environment '{environment}'\")\n            else:\n                print_error(f\"Failed to create environment '{environment}'\")\n                return\n\n        # Enable observability unless skipped\n        if not skip_observability:\n            try:\n                validate_and_enable_transaction_search(region, interactive=False)\n                print_success(\"Transaction Search enabled\")\n            except Exception as e:\n                print_warning(\"Transaction Search setup skipped\", str(e))\n\n        # Enable cloud sync unless skipped\n        if not skip_sync:\n            config_manager.enable_cloud_sync(True)\n            config_manager.enable_auto_sync(True)\n            print_success(\"Cloud sync enabled\")\n\n        # Save configuration\n        config_manager.save_config()\n\n        account_id = get_aws_account_id()\n        print_banner(\"Setup completed successfully!\", emoji=\"\u2705\")\n\n        summary_data = {\"Environment\": environment, \"Region\": region, \"Account\": account_id or \"Unknown\"}\n        print_summary_box(\"Automated Setup Summary\", summary_data, style=\"green\")\n\n        console.print(\"\ud83d\ude80 [bold]Ready to create agents:[/bold]\")\n        console.print(\"   agentcore agent create my-agent --dockerfile ./Dockerfile\")\n\n        return\n\n    except Exception as e:\n        print_error(\"Setup failed\", str(e))\n        return\n</code></pre>"},{"location":"reference/agentcore_cli/commands/setup/#agentcore_cli.commands.setup.run_interactive_setup","title":"<code>run_interactive_setup(region='us-west-2', environment='dev', skip_cognito=False, skip_sync=False, skip_observability=False)</code>","text":"<p>Run the comprehensive interactive setup wizard.</p> Source code in <code>agentcore_cli/commands/setup.py</code> Python<pre><code>def run_interactive_setup(\n    region: str = \"us-west-2\",\n    environment: str = \"dev\",\n    skip_cognito: bool = False,\n    skip_sync: bool = False,\n    skip_observability: bool = False,\n) -&gt; None:\n    \"\"\"Run the comprehensive interactive setup wizard.\"\"\"\n\n    # Step 1: Validate AWS credentials\n    print_step(1, \"AWS Credentials\", \"Checking your AWS configuration...\")\n\n    if not validate_aws_credentials():\n        print_error(\"AWS credentials not found or invalid\")\n\n        credential_commands: list[tuple[str, str | None]] = [\n            (\"aws configure\", \"Configure using AWS CLI\"),\n            (\"export AWS_ACCESS_KEY_ID=... &amp;&amp; export AWS_SECRET_ACCESS_KEY=...\", \"Use environment variables\"),\n            (\"aws sso login\", \"Use AWS SSO\"),\n        ]\n\n        print_commands(credential_commands, title=\"\ud83d\udccb Configure AWS credentials using one of\")\n        print_info(\"After configuring credentials, run 'agentcore-cli init' again\")\n        return\n\n    account_id = get_aws_account_id()\n    print_success(\"AWS credentials validated\")\n    print_copyable_values({\"Account\": account_id or \"Unknown\"})\n\n    # Step 2: Region selection\n    print_step(2, \"AWS Region\")\n\n    if not region:\n        detected_region = get_aws_region()\n        suggested_region = detected_region or \"us-east-1\"\n\n        print_info(f\"Detected region: {detected_region or 'None'}\")\n        region = prompt_input(\"Select AWS region\", default=suggested_region) or suggested_region\n\n    # Validate region\n    is_valid, error_msg = validate_region(region)\n    if not is_valid:\n        print_error(error_msg)\n        return\n\n    print_success(\"Using AWS region\", region)\n    console.print()\n\n    # Step 3: Environment setup\n    print_step(3, \"Environment Setup\", \"Environments provide isolation for dev, staging, and production deployments.\")\n\n    # Validate environment name\n    while True:\n        if not environment:\n            environment = prompt_input(\"Environment name\", default=\"dev\") or \"dev\"\n\n        # Validate environment name\n        if not environment.replace(\"-\", \"\").replace(\"_\", \"\").isalnum():\n            print_error(\"Environment name must contain only letters, numbers, hyphens, and underscores\")\n            environment = \"\"\n            continue\n\n        if len(environment) &gt; 20:\n            print_error(\"Environment name must be 20 characters or less\")\n            environment = \"\"\n            continue\n\n        break\n\n    print_info(f\"Creating environment '{environment}' in region {region}...\")\n\n    try:\n        # Initialize config manager and create environment\n        success = config_manager.add_environment(environment, region)\n\n        if not success:\n            # Environment might already exist\n            if environment in config_manager.config.environments:\n                print_warning(f\"Environment '{environment}' already exists, using existing configuration\")\n                config_manager.set_current_environment(environment)\n            else:\n                print_error(f\"Failed to create environment '{environment}'\")\n                return\n        else:\n            # Set as current environment\n            config_manager.set_current_environment(environment)\n            print_success(f\"Environment '{environment}' created and set as current\")\n\n    except Exception as e:\n        print_error(\"Failed to create environment\", str(e))\n        return\n\n    console.print()\n\n    # Step 4: Observability setup (Transaction Search)\n    if not skip_observability:\n        print_step(4, \"Observability Setup\", \"Configure CloudWatch Transaction Search for cost-effective tracing.\")\n\n        try:\n            validate_and_enable_transaction_search(region, interactive=True)\n        except Exception as e:\n            print_warning(\"Transaction Search setup failed\", str(e))\n            print_info(\"You can enable it later by running the setup again\")\n\n        console.print()\n\n    # Step 5: Cloud sync setup\n    if not skip_sync:\n        print_step(\n            5, \"Cloud Configuration Sync\", \"Sync your configuration with AWS Parameter Store for team collaboration.\"\n        )\n\n        setup_cloud_sync = confirm_action(\"Enable cloud configuration sync?\")\n\n        if setup_cloud_sync:\n            try:\n                config_manager.enable_cloud_sync(True)\n                print_success(\"Cloud configuration sync enabled\")\n\n                # Enable auto-sync\n                auto_sync = confirm_action(\"Enable automatic sync (recommended)?\")\n                if auto_sync:\n                    config_manager.enable_auto_sync(True)\n                    print_success(\"Automatic sync enabled\")\n\n            except Exception as e:\n                print_warning(\"Cloud sync setup failed\", str(e))\n                print_info(\"You can enable it later with: agentcore-cli config sync enable\")\n        else:\n            print_info(\"Skipped cloud sync setup\")\n\n        console.print()\n\n    # Step 6: Authentication setup (optional)\n    if not skip_cognito:\n        print_step(6, \"Authentication Setup\", \"Create Cognito resources for secure agent access.\")\n\n        setup_cognito = confirm_action(\"Set up Cognito authentication?\")\n\n        if setup_cognito:\n            agent_name = prompt_input(\"Agent name for auth resources\", default=\"default\") or \"default\"\n\n            try:\n                print_info(\"Creating Cognito resources (this may take a moment)...\")\n                cognito_service = CognitoService(region=region)\n\n                cognito_config = cognito_service.create_cognito_resources(\n                    agent_name=agent_name,\n                    environment=environment,\n                    allow_self_registration=False,\n                    email_verification_required=True,\n                )\n\n                if cognito_config:\n                    # Add to environment config\n                    config_manager.add_cognito_config(environment, cognito_config)\n                    print_success(\"Cognito authentication configured\")\n\n                    if cognito_config.user_pool:\n                        print_copyable_values({\"User Pool ID\": cognito_config.user_pool.user_pool_id})\n                else:\n                    print_error(\"Cognito setup failed\")\n\n            except Exception as e:\n                print_warning(\"Cognito setup failed\", str(e))\n                print_info(\"You can set up authentication later with: agentcore-cli resources cognito create\")\n        else:\n            print_info(\"Skipped authentication setup\")\n\n        console.print()\n\n    # Save configuration\n    try:\n        config_manager.save_config()\n        print_success(\"Configuration saved successfully\")\n    except Exception as e:\n        print_error(\"Failed to save configuration\", str(e))\n        return\n\n    # Final summary and next steps\n    print_banner(\"Setup Complete!\", emoji=\"\ud83c\udf89\")\n\n    summary_data = {\n        \"Environment\": environment,\n        \"Region\": region,\n        \"AWS Account\": account_id or \"Unknown\",\n        \"Observability\": \"Enabled\" if not skip_observability else \"Skipped\",\n        \"Cloud Sync\": \"Enabled\"\n        if not skip_sync and config_manager.config.global_resources.sync_config.cloud_config_enabled\n        else \"Disabled\",\n    }\n\n    print_summary_box(\"Setup Summary\", summary_data, style=\"green\")\n\n    # Next steps with organized command groups\n    next_step_groups: list[tuple[str, list[tuple[str, str | None]]]] = [\n        (\n            \"\ud83d\udce6 Create your first agent\",\n            [(\"agentcore-cli agent create my-agent --dockerfile ./Dockerfile\", \"Create and deploy an agent\")],\n        ),\n        (\n            \"\ud83c\udf0d Manage environments\",\n            [\n                (\"agentcore-cli env list\", \"List environments\"),\n                (\"agentcore-cli env create staging\", \"Create staging environment\"),\n                (\"agentcore-cli env use staging\", \"Switch environments\"),\n            ],\n        ),\n        (\n            \"\ud83d\udd27 Manage resources\",\n            [\n                (\"agentcore-cli resources ecr create my-agent\", \"Create ECR repository\"),\n                (\"agentcore-cli resources iam create my-agent\", \"Create IAM role\"),\n            ],\n        ),\n        (\n            \"\ud83d\udcca Check status\",\n            [\n                (\"agentcore-cli env current\", \"Show current environment\"),\n                (\"agentcore-cli config show\", \"Show configuration\"),\n            ],\n        ),\n        (\n            \"\ud83d\udcda Get help\",\n            [(\"agentcore-cli --help\", \"Main help\"), (\"agentcore-cli &lt;command&gt; --help\", \"Command-specific help\")],\n        ),\n    ]\n\n    for title, commands in next_step_groups:\n        print_commands(commands, title=title)\n\n    # Quick start guide\n    quick_start_steps = [\n        \"Create a Dockerfile for your agent\",\n        \"Run: agentcore agent create my-agent\",\n        \"Test: agentcore agent invoke my-agent --prompt 'Hello!'\",\n    ]\n\n    console.print(\"\ud83d\udca1 [yellow bold]Quick Start Guide:[/yellow bold]\")\n    for i, step in enumerate(quick_start_steps, 1):\n        console.print(f\"   {i}. {step}\")\n    console.print()\n\n    console.print(\"\ud83c\udfaf [bright_green bold]Happy agent building![/bright_green bold]\")\n    return\n</code></pre>"},{"location":"reference/agentcore_cli/commands/setup/#agentcore_cli.commands.setup.setup_cli","title":"<code>setup_cli(interactive, region='us-west-2', environment='dev', skip_cognito=False, skip_sync=False, skip_observability=False)</code>","text":"<p>Interactive setup wizard for AgentCore Platform CLI.</p> <p>This command guides you through the complete initial setup process: - AWS credentials validation - Environment creation and configuration - Cloud synchronization setup - Optional authentication resource creation - Initial project structure</p> <p>Examples:</p> <p>agentcore-cli init                                                    # Full interactive setup agentcore-cli init --environment staging                             # Setup staging environment agentcore-cli init --skip-cognito --skip-sync --skip-observability  # Minimal setup</p> Source code in <code>agentcore_cli/commands/setup.py</code> Python<pre><code>@click.command(\"init\")\n@click.option(\"--interactive/--no-interactive\", default=True, help=\"Run interactive setup wizard\")\n@click.option(\"--region\", help=\"AWS region to use\")\n@click.option(\"--environment\", default=\"dev\", help=\"Initial environment name\")\n@click.option(\"--skip-cognito\", is_flag=True, help=\"Skip Cognito authentication setup\")\n@click.option(\"--skip-sync\", is_flag=True, help=\"Skip cloud configuration sync setup\")\n@click.option(\"--skip-observability\", is_flag=True, help=\"Skip Transaction Search observability setup\")\ndef setup_cli(\n    interactive: bool,\n    region: str = \"us-west-2\",\n    environment: str = \"dev\",\n    skip_cognito: bool = False,\n    skip_sync: bool = False,\n    skip_observability: bool = False,\n) -&gt; None:\n    \"\"\"Interactive setup wizard for AgentCore Platform CLI.\n\n    This command guides you through the complete initial setup process:\n    - AWS credentials validation\n    - Environment creation and configuration\n    - Cloud synchronization setup\n    - Optional authentication resource creation\n    - Initial project structure\n\n    Examples:\n      agentcore-cli init                                                    # Full interactive setup\n      agentcore-cli init --environment staging                             # Setup staging environment\n      agentcore-cli init --skip-cognito --skip-sync --skip-observability  # Minimal setup\n    \"\"\"\n    if interactive:\n        print_welcome_banner()\n        return run_interactive_setup(region, environment, skip_cognito, skip_sync, skip_observability)\n    else:\n        return run_automated_setup(region, environment, skip_cognito, skip_sync, skip_observability)\n</code></pre>"},{"location":"reference/agentcore_cli/commands/unified_agent/","title":"agentcore_cli.commands.unified_agent","text":""},{"location":"reference/agentcore_cli/commands/unified_agent/#agentcore_cli.commands.unified_agent","title":"<code>agentcore_cli.commands.unified_agent</code>","text":"<p>Unified agent command for AgentCore CLI.</p> <p>This module provides a streamlined agent lifecycle management that consolidates functionality from agent, runtime, deploy, and container commands into a single cohesive workflow optimized for the environment-first architecture.</p>"},{"location":"reference/agentcore_cli/commands/unified_agent/#agentcore_cli.commands.unified_agent.agent_status","title":"<code>agent_status(name=None, region='us-west-2', environment=None)</code>","text":"<p>Show the status of an agent or all agents.</p> <p>Displays current status, versions, endpoints, and other details.</p> <p>Examples:</p> <p>agentcore agent status                    # Show all agents agentcore agent status my-chat-bot       # Show specific agent</p> Source code in <code>agentcore_cli/commands/unified_agent.py</code> Python<pre><code>@unified_agent_cli.command(\"status\")\n@click.argument(\"name\", required=False)\n@click.option(\"--region\", help=\"AWS region (defaults to current environment)\")\n@click.option(\"--environment\", \"-e\", help=\"Environment (defaults to current)\")\ndef agent_status(name: str | None = None, region: str = \"us-west-2\", environment: str | None = None) -&gt; None:\n    \"\"\"Show the status of an agent or all agents.\n\n    Displays current status, versions, endpoints, and other details.\n\n    Examples:\n      agentcore agent status                    # Show all agents\n      agentcore agent status my-chat-bot       # Show specific agent\n    \"\"\"\n    # Get environment and region\n    env_name = environment or config_manager.current_environment\n    if not region:\n        try:\n            region = config_manager.get_region(env_name)\n        except Exception:\n            region = get_aws_region() or \"us-west-2\"\n\n    try:\n        env_config = config_manager.get_environment(env_name)\n\n        if name:\n            # Show specific agent status\n            runtime = env_config.agent_runtimes.get(name)\n            if not runtime:\n                click.echo(f\"\u274c Agent '{name}' not found in environment '{env_name}'\", err=True)\n                return\n\n            click.echo(f\"\ud83e\udd16 \" + click.style(f\"Agent Status: {name}\", fg=\"bright_blue\", bold=True))\n            click.echo(f\"   Environment: {env_name}\")\n            click.echo(f\"   Region: {region}\")\n            click.echo(f\"   Runtime ID: {runtime.agent_runtime_id}\")\n            click.echo(f\"   Runtime ARN: {runtime.agent_runtime_arn or 'Not set'}\")\n            click.echo(f\"   Latest Version: {runtime.latest_version}\")\n            click.echo(f\"   ECR Repository: {runtime.primary_ecr_repository}\")\n\n            if runtime.versions:\n                click.echo()\n                click.echo(click.style(\"Versions:\", bold=True))\n                for version_id, version in runtime.versions.items():\n                    status_icon = \"\u2705\" if version.status == AgentStatusType.READY else \"\u26a0\ufe0f\"\n                    click.echo(f\"  {status_icon} {version_id} ({version.status.value})\")\n                    click.echo(f\"     Image: {version.ecr_repository_name}:{version.image_tag}\")\n                    click.echo(\n                        f\"     Created: {version.created_at.strftime('%Y-%m-%d %H:%M') if version.created_at else 'Unknown'}\"\n                    )\n\n            if runtime.endpoints:\n                click.echo()\n                click.echo(click.style(\"Endpoints:\", bold=True))\n                for endpoint_name, endpoint in runtime.endpoints.items():\n                    status_icon = \"\u2705\" if endpoint.status == AgentEndpointStatusType.READY else \"\u26a0\ufe0f\"\n                    click.echo(f\"  {status_icon} {endpoint_name} \u2192 {endpoint.target_version} ({endpoint.status.value})\")\n\n        else:\n            # Show all agents in environment\n            if not env_config.agent_runtimes:\n                click.echo(f\"\ud83d\udccb No agents in environment '{env_name}'\")\n                click.echo(\"\ud83d\udca1 Create your first agent: agentcore agent create &lt;name&gt;\")\n                return\n\n            click.echo(f\"\ud83e\udd16 \" + click.style(f\"Agents in '{env_name}'\", bold=True))\n            click.echo()\n\n            table_data = []\n            for runtime_name, runtime in env_config.agent_runtimes.items():\n                latest_version = runtime.versions.get(runtime.latest_version)\n                status_icon = \"\u2705\" if latest_version and latest_version.status == AgentStatusType.READY else \"\u26a0\ufe0f\"\n                is_default = \"\u2b50\" if runtime_name == env_config.default_agent_runtime else \"\"\n\n                table_data.append(\n                    [\n                        f\"{status_icon} {runtime_name}{is_default}\",\n                        runtime.latest_version,\n                        len(runtime.endpoints),\n                        runtime.agent_runtime_id[:12] + \"...\" if runtime.agent_runtime_id else \"N/A\",\n                    ]\n                )\n\n            headers = [\"Agent\", \"Latest Version\", \"Endpoints\", \"Runtime ID\"]\n            click.echo(tabulate(table_data, headers=headers, tablefmt=\"simple\"))\n\n    except Exception as e:\n        click.echo(f\"\u274c Failed to get agent status: {str(e)}\", err=True)\n        return\n</code></pre>"},{"location":"reference/agentcore_cli/commands/unified_agent/#agentcore_cli.commands.unified_agent.create_agent","title":"<code>create_agent(name, dockerfile='Dockerfile', region='us-west-2', environment=None, no_deploy=False, image_tag='latest', build_args=())</code>","text":"<p>Create a new agent with container image and runtime.</p> <p>This is the easiest way to deploy an agent to AgentCore runtime with a single command. It performs the complete workflow: 1. Validates agent name and Dockerfile 2. Creates ECR repository if needed 3. Builds and pushes container image 4. Creates IAM role if needed 5. Creates AgentCore runtime 6. Deploys to the specified environment</p> <p>Examples:</p> <p>agentcore agent create my-chat-bot agentcore agent create data-processor --environment prod --image-tag v1.0.0 agentcore agent create ml-agent --dockerfile ./docker/Dockerfile --build-args API_KEY=secret</p> Source code in <code>agentcore_cli/commands/unified_agent.py</code> Python<pre><code>@unified_agent_cli.command(\"create\")\n@click.argument(\"name\")\n@click.option(\"--dockerfile\", default=\"Dockerfile\", help=\"Path to Dockerfile\")\n@click.option(\"--region\", help=\"AWS region (defaults to current environment)\")\n@click.option(\"--environment\", \"-e\", help=\"Environment (defaults to current)\")\n@click.option(\"--no-deploy\", is_flag=True, help=\"Skip runtime deployment after creation\")\n@click.option(\"--image-tag\", default=\"latest\", help=\"Container image tag\")\n@click.option(\"--build-args\", multiple=True, help=\"Docker build arguments (KEY=VALUE)\")\ndef create_agent(\n    name: str,\n    dockerfile: str = \"Dockerfile\",\n    region: str = \"us-west-2\",\n    environment: str | None = None,\n    no_deploy: bool = False,\n    image_tag: str = \"latest\",\n    build_args: tuple[str, ...] = (),\n) -&gt; None:\n    \"\"\"Create a new agent with container image and runtime.\n\n    This is the easiest way to deploy an agent to AgentCore runtime with a single command.\n    It performs the complete workflow:\n    1. Validates agent name and Dockerfile\n    2. Creates ECR repository if needed\n    3. Builds and pushes container image\n    4. Creates IAM role if needed\n    5. Creates AgentCore runtime\n    6. Deploys to the specified environment\n\n    Examples:\n      agentcore agent create my-chat-bot\n      agentcore agent create data-processor --environment prod --image-tag v1.0.0\n      agentcore agent create ml-agent --dockerfile ./docker/Dockerfile --build-args API_KEY=secret\n    \"\"\"\n    # Validate agent name\n    is_valid, error_msg = validate_agent_name(name)\n    if not is_valid:\n        click.echo(f\"\u274c Invalid agent name: {error_msg}\", err=True)\n        return\n\n    # Validate Dockerfile exists\n    dockerfile_path = Path(dockerfile)\n    if not dockerfile_path.exists():\n        click.echo(f\"\u274c Dockerfile not found: {dockerfile}\", err=True)\n        return\n\n    # Get environment and region\n    env_name = environment or config_manager.current_environment\n    if not region:\n        try:\n            region = config_manager.get_region(env_name)\n        except Exception:\n            region = get_aws_region() or \"us-east-1\"\n\n    click.echo(f\"\ud83d\ude80 Creating agent '{name}' in environment '{env_name}'\")\n    click.echo(f\"   Region: {region}\")\n    click.echo(f\"   Dockerfile: {dockerfile}\")\n    click.echo(f\"   Image Tag: {image_tag}\")\n    click.echo()\n\n    try:\n        # Check if agent already exists\n        existing_runtime = config_manager.get_agent_runtime(name, env_name)\n        if existing_runtime:\n            click.echo(f\"\u274c Agent '{name}' already exists in environment '{env_name}'\", err=True)\n            click.echo(\"\ud83d\udca1 Use 'agentcore agent update' to update an existing agent\")\n            return\n\n        # Initialize services\n        container_service = ContainerService(region=region)\n        ecr_service = ECRService(region=region)\n        iam_service = IAMService(region=region)\n        agentcore_service = AgentCoreService(region=region)\n\n        # Step 1: Create or get ECR repository\n        click.echo(\"\ud83d\udce6 Step 1: Setting up ECR repository...\")\n        ecr_success, repo_info, ecr_message = ecr_service.get_repository(name)\n\n        if not ecr_success:\n            click.echo(f\"   Creating ECR repository '{name}'...\")\n            ecr_success, repo_info, ecr_message = ecr_service.create_repository(\n                repository_name=name, environment=env_name, image_scanning=True\n            )\n            if not ecr_success:\n                click.echo(f\"\u274c Failed to create ECR repository: {ecr_message}\", err=True)\n                return\n            click.echo(\"   \u2705 ECR repository created\")\n        else:\n            click.echo(\"   \u2705 ECR repository exists\")\n\n        if not repo_info:\n            click.echo(\"\u274c Failed to get ECR repository information\", err=True)\n            return\n\n        ecr_uri = repo_info.repository_uri\n        click.echo(f\"   Repository: {ecr_uri}\")\n\n        # Step 2: Build and push container image\n        click.echo()\n        click.echo(\"\ud83c\udfd7\ufe0f  Step 2: Building and pushing container image...\")\n\n        # Build image\n        build_args_dict = {}\n        for arg in build_args:\n            if \"=\" in arg:\n                key, value = arg.split(\"=\", 1)\n                build_args_dict[key] = value\n\n        build_success = container_service.build_image(\n            repo_name=name,\n            tag=image_tag,\n            dockerfile=str(dockerfile_path.absolute()),\n            build_args=[f\"{k}={v}\" for k, v in build_args_dict.items()],\n            use_cache=True,\n        )\n\n        if not build_success:\n            click.echo(\"\u274c Failed to build container image\", err=True)\n            return\n        click.echo(\"   \u2705 Container image built\")\n\n        # Push image\n        push_result = container_service.push_image(name, image_tag, ecr_uri)\n        if not push_result:\n            click.echo(\"\u274c Failed to push container image\", err=True)\n            return\n        click.echo(f\"   \u2705 Image pushed: {ecr_uri}:{image_tag}\")\n\n        # Step 3: Create or get IAM role\n        click.echo()\n        click.echo(\"\ud83d\udd10 Step 3: Setting up IAM role...\")\n\n        role_config = iam_service.create_agent_role(agent_name=name, environment=env_name, role_name_prefix=\"agentcore\")\n\n        if not role_config:\n            click.echo(\"\u274c Failed to create IAM role\", err=True)\n            return\n\n        click.echo(f\"   \u2705 IAM role created: {role_config.name}\")\n        role_arn = role_config.arn\n\n        # Step 4: Create AgentCore runtime (unless no-deploy)\n        if no_deploy:\n            click.echo()\n            click.echo(\"\u23ed\ufe0f  Skipping runtime deployment (--no-deploy specified)\")\n        else:\n            click.echo()\n            click.echo(\"\ud83e\udd16 Step 4: Creating AgentCore runtime...\")\n\n            # Create runtime input\n            runtime_input = CreateAgentRuntimeInput(\n                name=name,\n                container_uri=f\"{ecr_uri}:{image_tag}\",\n                role_arn=role_arn,\n                description=f\"Agent runtime for {name}\",\n                network_mode=NetworkModeType.PUBLIC,\n                protocol=ServerProtocolType.HTTP,\n                environment_variables={},\n            )\n\n            # Create runtime\n            creation_result = agentcore_service.create_agent_runtime(runtime_input)\n\n            if not creation_result.success:\n                click.echo(f\"\u274c Failed to create runtime: {creation_result.message}\", err=True)\n                return\n\n            if not creation_result.runtime_id:\n                click.echo(\"\u274c Runtime ID not available from creation result\", err=True)\n                return\n\n            click.echo(f\"   \u2705 Runtime created: {creation_result.runtime_id}\")\n\n            # Step 5: Save to configuration\n            click.echo()\n            click.echo(\"\ud83d\udcbe Step 5: Saving configuration...\")\n\n            # Create runtime version\n            runtime_version = AgentRuntimeVersion(\n                version_id=\"V1\",\n                agent_runtime_id=creation_result.runtime_id,\n                ecr_repository_name=name,\n                image_tag=image_tag,\n                status=AgentStatusType.READY,\n                execution_role_arn=role_arn,\n                created_at=datetime.now(),\n                description=f\"Initial version for {name}\",\n            )\n\n            # Create default endpoint\n            default_endpoint = AgentRuntimeEndpoint(\n                name=\"DEFAULT\",\n                agent_runtime_id=creation_result.runtime_id,\n                target_version=\"V1\",\n                status=AgentEndpointStatusType.READY,\n                created_at=datetime.now(),\n            )\n\n            # Create agent runtime config\n            agent_runtime = AgentRuntime(\n                name=name,\n                agent_runtime_id=creation_result.runtime_id,\n                agent_runtime_arn=creation_result.runtime_arn,\n                description=f\"Agent runtime for {name}\",\n                latest_version=\"V1\",\n                primary_ecr_repository=name,\n                versions={\"V1\": runtime_version},\n                endpoints={\"DEFAULT\": default_endpoint},\n                region=region,\n                created_at=datetime.now(),\n            )\n\n            # Save to environment config\n            success = config_manager.add_agent_runtime(name, agent_runtime, env_name)\n            if not success:\n                click.echo(\"\u26a0\ufe0f  Failed to save agent configuration\", err=True)\n            else:\n                click.echo(\"   \u2705 Configuration saved\")\n\n            # Add global resources to config\n            config_manager.add_ecr_repository(name, repo_info)\n            config_manager.add_iam_role(role_config.name, role_config)\n\n        # Success summary\n        click.echo()\n        click.echo(\"\ud83c\udf89 \" + click.style(f\"Agent '{name}' created successfully!\", fg=\"green\", bold=True))\n        click.echo(f\"   Environment: {env_name}\")\n        click.echo(f\"   Region: {region}\")\n        click.echo(f\"   ECR Repository: {ecr_uri}\")\n        if not no_deploy:\n            click.echo(f\"   Runtime ID: {creation_result.runtime_id}\")\n            click.echo(f\"   Runtime ARN: {creation_result.runtime_arn}\")\n\n        click.echo()\n        click.echo(\"\ud83d\ude80 \" + click.style(\"Next steps:\", bold=True))\n        if no_deploy:\n            click.echo(f\"   \u2022 Deploy runtime: agentcore agent create {name} --environment {env_name}\")\n        else:\n            click.echo(f\"   \u2022 Test agent: agentcore agent invoke {name} --prompt 'Hello!'\")\n            click.echo(f\"   \u2022 Check status: agentcore agent status {name}\")\n            click.echo(f\"   \u2022 Update agent: agentcore agent update {name} --image-tag v2\")\n\n    except Exception as e:\n        click.echo(f\"\u274c Agent creation failed: {str(e)}\", err=True)\n        return\n</code></pre>"},{"location":"reference/agentcore_cli/commands/unified_agent/#agentcore_cli.commands.unified_agent.delete_agent","title":"<code>delete_agent(name, region='us-west-2', environment=None, force=False, keep_ecr=False, keep_iam=False)</code>","text":"<p>Delete an agent and optionally its AWS resources.</p> <p>\u26a0\ufe0f  WARNING: This will delete the agent runtime and optionally its ECR repository and IAM role.</p> <p>Examples:</p> <p>agentcore agent delete my-agent --force agentcore agent delete my-agent --keep-ecr --keep-iam</p> Source code in <code>agentcore_cli/commands/unified_agent.py</code> Python<pre><code>@unified_agent_cli.command(\"delete\")\n@click.argument(\"name\")\n@click.option(\"--region\", help=\"AWS region (defaults to current environment)\")\n@click.option(\"--environment\", \"-e\", help=\"Environment (defaults to current)\")\n@click.option(\"--force\", is_flag=True, help=\"Skip confirmation prompt\")\n@click.option(\"--keep-ecr\", is_flag=True, help=\"Keep ECR repository\")\n@click.option(\"--keep-iam\", is_flag=True, help=\"Keep IAM role\")\ndef delete_agent(\n    name: str,\n    region: str = \"us-west-2\",\n    environment: str | None = None,\n    force: bool = False,\n    keep_ecr: bool = False,\n    keep_iam: bool = False,\n) -&gt; None:\n    \"\"\"Delete an agent and optionally its AWS resources.\n\n    \u26a0\ufe0f  WARNING: This will delete the agent runtime and optionally its ECR repository and IAM role.\n\n    Examples:\n      agentcore agent delete my-agent --force\n      agentcore agent delete my-agent --keep-ecr --keep-iam\n    \"\"\"\n    # Get environment and region\n    env_name = environment or config_manager.current_environment\n    if not region:\n        try:\n            region = config_manager.get_region(env_name)\n        except Exception:\n            region = get_aws_region() or \"us-east-1\"\n\n    try:\n        # Check if agent exists\n        runtime = config_manager.get_agent_runtime(name, env_name)\n        if not runtime:\n            click.echo(f\"\u274c Agent '{name}' not found in environment '{env_name}'\", err=True)\n            return\n\n        # Show what will be deleted\n        click.echo(f\"\u26a0\ufe0f  \" + click.style(f\"Agent '{name}' Deletion\", fg=\"red\", bold=True))\n        click.echo(f\"   Environment: {env_name}\")\n        click.echo(f\"   Runtime ID: {runtime.agent_runtime_id}\")\n        click.echo(f\"   Versions: {len(runtime.versions)}\")\n        click.echo(f\"   Endpoints: {len(runtime.endpoints)}\")\n\n        if not keep_ecr:\n            click.echo(f\"   ECR Repository: {runtime.primary_ecr_repository} (will be deleted)\")\n        if not keep_iam:\n            click.echo(f\"   IAM Role: agentcore-{name}-{env_name}-role (will be deleted)\")\n\n        click.echo()\n\n        # Confirmation\n        if not force:\n            if not click.confirm(click.style(f\"DELETE agent '{name}' and its resources?\", fg=\"red\")):\n                click.echo(\"\u274c Deletion cancelled\")\n                return\n\n        click.echo(f\"\ud83d\uddd1\ufe0f  Deleting agent '{name}'...\")\n\n        # Initialize services\n        agentcore_service = AgentCoreService(region=region)\n        ecr_service = ECRService(region=region)\n        iam_service = IAMService(region=region)\n\n        deleted_resources = []\n        errors = []\n\n        # Delete runtime\n        if runtime.agent_runtime_id:\n            click.echo(\"\ud83e\udd16 Deleting AgentCore runtime...\")\n            delete_result = agentcore_service.delete_agent_runtime(runtime.agent_runtime_id)\n            if delete_result.success:\n                deleted_resources.extend(delete_result.deleted_resources)\n                click.echo(\"   \u2705 Runtime deleted\")\n            else:\n                errors.append(f\"Failed to delete runtime: {delete_result.message}\")\n\n        # Delete ECR repository\n        if not keep_ecr:\n            click.echo(\"\ud83d\udce6 Deleting ECR repository...\")\n            try:\n                ecr_success, ecr_message = ecr_service.delete_repository(\n                    runtime.primary_ecr_repository, env_name, force=True\n                )\n                if ecr_success:\n                    deleted_resources.append(f\"ECR Repository: {runtime.primary_ecr_repository}\")\n                    click.echo(\"   \u2705 ECR repository deleted\")\n                else:\n                    errors.append(f\"Failed to delete ECR repository: {ecr_message}\")\n            except Exception as e:\n                errors.append(f\"ECR deletion error: {str(e)}\")\n\n        # Delete IAM role\n        if not keep_iam:\n            click.echo(\"\ud83d\udd10 Deleting IAM role...\")\n            try:\n                iam_success, iam_message = iam_service.delete_agent_role(name, env_name)\n                if iam_success:\n                    deleted_resources.append(f\"IAM Role: agentcore-{name}-{env_name}-role\")\n                    click.echo(\"   \u2705 IAM role deleted\")\n                else:\n                    errors.append(f\"Failed to delete IAM role: {iam_message}\")\n            except Exception as e:\n                errors.append(f\"IAM deletion error: {str(e)}\")\n\n        # Remove from configuration\n        click.echo(\"\ud83d\udcbe Updating configuration...\")\n        success = config_manager.delete_agent_runtime(name, env_name)\n        if success:\n            click.echo(\"   \u2705 Configuration updated\")\n        else:\n            errors.append(\"Failed to update configuration\")\n\n        # Show results\n        click.echo()\n        if deleted_resources:\n            click.echo(\"\u2705 \" + click.style(\"Deleted successfully:\", fg=\"green\"))\n            for resource in deleted_resources:\n                click.echo(f\"   \u2022 {resource}\")\n\n        if errors:\n            click.echo()\n            click.echo(\"\u274c \" + click.style(\"Errors encountered:\", fg=\"red\"))\n            for error in errors:\n                click.echo(f\"   \u2022 {error}\")\n\n        if not errors:\n            click.echo()\n            click.echo(\"\ud83c\udf89 \" + click.style(f\"Agent '{name}' deleted successfully!\", fg=\"green\", bold=True))\n\n        return\n\n    except Exception as e:\n        click.echo(f\"\u274c Agent deletion failed: {str(e)}\", err=True)\n        return\n</code></pre>"},{"location":"reference/agentcore_cli/commands/unified_agent/#agentcore_cli.commands.unified_agent.invoke_agent","title":"<code>invoke_agent(name, prompt=None, session_id=None, region='us-west-2', environment=None, endpoint=None, content_type='application/json', accept='application/json', raw_markdown=False, pipe=False)</code>","text":"<p>Invoke an agent runtime with a prompt.</p> <p>This sends a prompt to the specified agent and returns the response. Perfect for testing your deployed agents.</p> <p>Examples:</p> <p>agentcore agent invoke my-chat-bot --prompt \"Hello, how are you?\" agentcore agent invoke data-processor --prompt \"Process this data\" --endpoint production agentcore agent invoke my-agent --prompt \"Generate markdown\" --raw-markdown agentcore agent invoke my-agent --prompt \"Generate content\" --pipe &gt; output.txt agentcore agent invoke my-agent --prompt \"Generate content\" --pipe --raw-markdown | grep \"##\"</p> Source code in <code>agentcore_cli/commands/unified_agent.py</code> Python<pre><code>@unified_agent_cli.command(\"invoke\")\n@click.argument(\"name\")\n@click.option(\"--prompt\", help=\"Prompt for the agent\")\n@click.option(\"--session-id\", help=\"Session ID (auto-generated if not provided)\")\n@click.option(\"--region\", help=\"AWS region (defaults to current environment)\")\n@click.option(\"--environment\", \"-e\", help=\"Environment (defaults to current)\")\n@click.option(\"--endpoint\", help=\"Endpoint name (defaults to DEFAULT)\")\n@click.option(\"--content-type\", default=\"application/json\", help=\"Content type for the request\")\n@click.option(\"--accept\", default=\"application/json\", help=\"Accept header for the response\")\n@click.option(\n    \"--raw-markdown\", is_flag=True, help=\"Show raw markdown syntax instead of rendering (better for clipboard)\"\n)\n@click.option(\"--pipe\", is_flag=True, help=\"Output only the response content (no formatting, perfect for piping)\")\ndef invoke_agent(\n    name: str,\n    prompt: str | None = None,\n    session_id: str | None = None,\n    region: str = \"us-west-2\",\n    environment: str | None = None,\n    endpoint: str | None = None,\n    content_type: str = \"application/json\",\n    accept: str = \"application/json\",\n    raw_markdown: bool = False,\n    pipe: bool = False,\n) -&gt; None:\n    \"\"\"Invoke an agent runtime with a prompt.\n\n    This sends a prompt to the specified agent and returns the response.\n    Perfect for testing your deployed agents.\n\n    Examples:\n      agentcore agent invoke my-chat-bot --prompt \"Hello, how are you?\"\n      agentcore agent invoke data-processor --prompt \"Process this data\" --endpoint production\n      agentcore agent invoke my-agent --prompt \"Generate markdown\" --raw-markdown\n      agentcore agent invoke my-agent --prompt \"Generate content\" --pipe &gt; output.txt\n      agentcore agent invoke my-agent --prompt \"Generate content\" --pipe --raw-markdown | grep \"##\"\n    \"\"\"\n    # Get environment and region\n    env_name = environment or config_manager.current_environment\n    if not region:\n        try:\n            region = config_manager.get_region(env_name)\n        except Exception:\n            region = get_aws_region() or \"us-west-2\"\n\n    # Validate prompt\n    if not prompt:\n        # disallow the user from entering an empty string\n        prompt = click.prompt(\"Enter prompt for the agent\")\n        if not prompt:\n            if not pipe:\n                click.echo(\"\u274c Prompt cannot be empty\", err=True)\n            return\n\n    # Generate session ID if not provided\n    if not session_id:\n        session_id = generate_session_id()\n\n    # Use DEFAULT endpoint if not specified\n    if not endpoint:\n        endpoint = \"DEFAULT\"\n\n    # Only show status messages if not in pipe mode\n    if not pipe:\n        click.echo(f\"\ud83e\udd16 Invoking agent '{name}' in environment '{env_name}'\")\n        click.echo(f\"   Endpoint: {endpoint}\")\n        click.echo(f\"   Session ID: {session_id}\")\n        click.echo(f\"   Prompt: {prompt}\")\n        click.echo()\n\n    try:\n        # Get agent runtime\n        runtime = config_manager.get_agent_runtime(name, env_name)\n        if not runtime:\n            if not pipe:\n                print_error(f\"Agent '{name}' not found in environment '{env_name}'\")\n                env_config = config_manager.get_environment(env_name)\n                if env_config.agent_runtimes:\n                    print_info(f\"Available agents: {', '.join(env_config.agent_runtimes.keys())}\")\n                else:\n                    print_info(\"No agents found in this environment\")\n            return\n\n        # Check if endpoint exists\n        if endpoint not in runtime.endpoints:\n            if not pipe:\n                print_error(f\"Endpoint '{endpoint}' not found for agent '{name}'\")\n                print_info(f\"Available endpoints: {', '.join(runtime.endpoints.keys())}\")\n            return\n\n        # Check if runtime ARN is available\n        if not runtime.agent_runtime_arn:\n            if not pipe:\n                print_error(\"Agent runtime ARN not available. Runtime may not be deployed yet.\")\n                print_info(f\"Deploy the runtime first with: agentcore agent update {name}\")\n            return\n\n        # Create AgentCore service\n        agentcore_service = AgentCoreService(region=region)\n\n        # Invoke agent\n        if not pipe:\n            print_info(\"Sending request...\")\n\n        status_code, response = agentcore_service.invoke_agent_runtime(\n            agent_runtime_arn=runtime.agent_runtime_arn,\n            qualifier=endpoint,\n            runtime_session_id=session_id,\n            payload=prompt,\n            content_type=content_type,\n            accept=accept,\n        )\n\n        # Handle response based on mode\n        if pipe:\n            # Pipe mode: only output the content\n            prefer_markdown = (\n                not raw_markdown\n            )  # If --raw-markdown is used with --pipe, don't prefer markdown extraction\n            content = extract_response_content(response, prefer_markdown=prefer_markdown)\n            click.echo(content)\n        else:\n            # Normal mode: full Rich formatting\n            if status_code == 200:\n                print_success(\"Response received\")\n                if raw_markdown:\n                    print_agent_response_raw(response)\n                else:\n                    print_agent_response(response)\n            else:\n                print_error(f\"Request failed with status: {status_code}\")\n                if raw_markdown:\n                    print_agent_response_raw(response, title=\"Error Response\")\n                else:\n                    print_agent_response(response, title=\"Error Response\")\n                return\n\n    except Exception as e:\n        if not pipe:\n            print_error(\"Agent invocation failed\", str(e))\n        return\n</code></pre>"},{"location":"reference/agentcore_cli/commands/unified_agent/#agentcore_cli.commands.unified_agent.list_agents","title":"<code>list_agents(region, environment)</code>","text":"<p>List all agents in the current environment.</p> <p>Shows a summary of all deployed agents with their status and versions.</p> Source code in <code>agentcore_cli/commands/unified_agent.py</code> Python<pre><code>@unified_agent_cli.command(\"list\")\n@click.option(\"--region\", help=\"AWS region (defaults to current environment)\")\n@click.option(\"--environment\", \"-e\", help=\"Environment (defaults to current)\")\ndef list_agents(region: str | None, environment: str | None) -&gt; None:\n    \"\"\"List all agents in the current environment.\n\n    Shows a summary of all deployed agents with their status and versions.\n    \"\"\"\n    # Get environment and region\n    env_name = environment or config_manager.current_environment\n    if not region:\n        try:\n            region = config_manager.get_region(env_name)\n        except Exception:\n            region = get_aws_region() or \"us-west-2\"\n\n    try:\n        env_config = config_manager.get_environment(env_name)\n\n        if not env_config.agent_runtimes:\n            click.echo(f\"\ud83d\udccb No agents found in environment '{env_name}'\")\n            click.echo(\"\ud83d\udca1 Create your first agent: agentcore agent create &lt;name&gt;\")\n            return\n\n        click.echo(f\"\ud83d\udccb \" + click.style(f\"Agents in '{env_name}' ({len(env_config.agent_runtimes)})\", bold=True))\n        click.echo()\n\n        for runtime_name, runtime in env_config.agent_runtimes.items():\n            is_default = \" \u2b50\" if runtime_name == env_config.default_agent_runtime else \"\"\n            latest_version = runtime.versions.get(runtime.latest_version)\n            status_icon = \"\u2705\" if latest_version and latest_version.status == AgentStatusType.READY else \"\u26a0\ufe0f\"\n\n            click.echo(f\"{status_icon} \" + click.style(f\"{runtime_name}{is_default}\", fg=\"bright_blue\", bold=True))\n            click.echo(f\"   Latest Version: {runtime.latest_version}\")\n            click.echo(f\"   Endpoints: {len(runtime.endpoints)}\")\n            click.echo(f\"   ECR Repository: {runtime.primary_ecr_repository}\")\n            if latest_version:\n                click.echo(f\"   Image: {latest_version.ecr_repository_name}:{latest_version.image_tag}\")\n            click.echo()\n\n    except Exception as e:\n        click.echo(f\"\u274c Failed to list agents: {str(e)}\", err=True)\n        return\n</code></pre>"},{"location":"reference/agentcore_cli/commands/unified_agent/#agentcore_cli.commands.unified_agent.unified_agent_cli","title":"<code>unified_agent_cli()</code>","text":"<p>Unified agent lifecycle management.</p> <p>This command provides a streamlined workflow for creating, deploying, and managing AgentCore agents with environment-first design.</p> Source code in <code>agentcore_cli/commands/unified_agent.py</code> Python<pre><code>@click.group(\"agent\")\ndef unified_agent_cli() -&gt; None:\n    \"\"\"Unified agent lifecycle management.\n\n    This command provides a streamlined workflow for creating, deploying,\n    and managing AgentCore agents with environment-first design.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/agentcore_cli/commands/unified_agent/#agentcore_cli.commands.unified_agent.update_agent","title":"<code>update_agent(name, image_tag='latest', region='us-west-2', environment=None, dockerfile=None, build_args=())</code>","text":"<p>Update an existing agent with a new container version.</p> <p>This creates a new immutable version of the agent runtime. If dockerfile is specified, it rebuilds and pushes the image first.</p> <p>Examples:</p> <p>agentcore agent update my-agent --image-tag v2.0.0 agentcore agent update my-agent --dockerfile ./Dockerfile --image-tag latest</p> Source code in <code>agentcore_cli/commands/unified_agent.py</code> Python<pre><code>@unified_agent_cli.command(\"update\")\n@click.argument(\"name\")\n@click.option(\"--image-tag\", default=\"latest\", help=\"New container image tag\")\n@click.option(\"--region\", help=\"AWS region (defaults to current environment)\")\n@click.option(\"--environment\", \"-e\", help=\"Environment (defaults to current)\")\n@click.option(\"--dockerfile\", help=\"Path to Dockerfile (rebuilds if specified)\")\n@click.option(\"--build-args\", multiple=True, help=\"Docker build arguments (KEY=VALUE)\")\ndef update_agent(\n    name: str,\n    image_tag: str = \"latest\",\n    region: str = \"us-west-2\",\n    environment: str | None = None,\n    dockerfile: str | None = None,\n    build_args: tuple[str, ...] = (),\n) -&gt; None:\n    \"\"\"Update an existing agent with a new container version.\n\n    This creates a new immutable version of the agent runtime.\n    If dockerfile is specified, it rebuilds and pushes the image first.\n\n    Examples:\n      agentcore agent update my-agent --image-tag v2.0.0\n      agentcore agent update my-agent --dockerfile ./Dockerfile --image-tag latest\n    \"\"\"\n    # Get environment and region\n    env_name = environment or config_manager.current_environment\n    if not region:\n        try:\n            region = config_manager.get_region(env_name)\n        except Exception:\n            region = get_aws_region() or \"us-east-1\"\n\n    click.echo(f\"\ud83d\udd04 Updating agent '{name}' in environment '{env_name}'\")\n    click.echo(f\"   New image tag: {image_tag}\")\n    click.echo()\n\n    try:\n        # Check if agent exists\n        runtime = config_manager.get_agent_runtime(name, env_name)\n        if not runtime:\n            click.echo(f\"\u274c Agent '{name}' not found in environment '{env_name}'\", err=True)\n            env_config = config_manager.get_environment(env_name)\n            if env_config.agent_runtimes:\n                click.echo(f\"Available agents: {', '.join(env_config.agent_runtimes.keys())}\")\n            else:\n                click.echo(\"No agents found in this environment\")\n            click.echo(f\"\ud83d\udca1 Create it first: agentcore agent create {name}\")\n            return\n\n        # Initialize services\n        container_service = ContainerService(region=region)\n        ecr_service = ECRService(region=region)\n        agentcore_service = AgentCoreService(region=region)\n\n        # Get ECR repository info\n        ecr_success, repo_info, ecr_message = ecr_service.get_repository(runtime.primary_ecr_repository)\n        if not ecr_success or not repo_info:\n            click.echo(f\"\u274c ECR repository not found: {ecr_message}\", err=True)\n            return\n\n        ecr_uri = repo_info.repository_uri\n\n        # Rebuild image if dockerfile specified\n        if dockerfile:\n            dockerfile_path = Path(dockerfile)\n            if not dockerfile_path.exists():\n                click.echo(f\"\u274c Dockerfile not found: {dockerfile}\", err=True)\n                return\n\n            click.echo(\"\ud83c\udfd7\ufe0f  Rebuilding container image...\")\n\n            # Parse build arguments\n            build_args_dict = {}\n            for arg in build_args:\n                if \"=\" in arg:\n                    key, value = arg.split(\"=\", 1)\n                    build_args_dict[key] = value\n\n            # Build image\n            build_success = container_service.build_image(\n                repo_name=name,\n                tag=image_tag,\n                dockerfile=str(dockerfile_path.absolute()),\n                build_args=[f\"{k}={v}\" for k, v in build_args_dict.items()],\n                use_cache=True,\n            )\n\n            if not build_success:\n                click.echo(\"\u274c Failed to build container image\", err=True)\n                return\n\n            # Push image\n            push_result = container_service.push_image(name, image_tag, ecr_uri)\n            if not push_result:\n                click.echo(\"\u274c Failed to push container image\", err=True)\n                return\n\n            click.echo(f\"   \u2705 New image pushed: {ecr_uri}:{image_tag}\")\n\n        # Update runtime\n        click.echo(\"\ud83e\udd16 Updating AgentCore runtime...\")\n\n        update_input = UpdateAgentRuntimeInput(\n            agent_runtime_id=runtime.agent_runtime_id,\n            container_uri=f\"{ecr_uri}:{image_tag}\",\n            description=f\"Updated agent runtime for {name} - {image_tag}\",\n        )\n\n        update_result = agentcore_service.update_agent_runtime(update_input)\n\n        if not update_result.success:\n            click.echo(f\"\u274c Failed to update runtime: {update_result.message}\", err=True)\n            return\n\n        click.echo(f\"   \u2705 Runtime updated to version: {update_result.version}\")\n\n        # Update configuration\n        click.echo(\"\ud83d\udcbe Updating configuration...\")\n\n        # Add new version to runtime config\n        new_version = AgentRuntimeVersion(\n            version_id=update_result.version,\n            agent_runtime_id=runtime.agent_runtime_id,\n            ecr_repository_name=runtime.primary_ecr_repository,\n            image_tag=image_tag,\n            status=AgentStatusType.READY,\n            execution_role_arn=runtime.versions[runtime.latest_version].execution_role_arn,\n            created_at=datetime.now(),\n            description=f\"Updated version for {name}\",\n        )\n\n        runtime.versions[update_result.version] = new_version\n        runtime.latest_version = update_result.version\n        runtime.updated_at = datetime.now()\n\n        config_manager.save_config()\n        click.echo(\"   \u2705 Configuration updated\")\n\n        # Success summary\n        click.echo()\n        click.echo(\"\ud83c\udf89 \" + click.style(f\"Agent '{name}' updated successfully!\", fg=\"green\", bold=True))\n        click.echo(f\"   Environment: {env_name}\")\n        click.echo(f\"   New Version: {update_result.version}\")\n        click.echo(f\"   Image: {ecr_uri}:{image_tag}\")\n\n        click.echo()\n        click.echo(\"\ud83d\ude80 \" + click.style(\"Next steps:\", bold=True))\n        click.echo(f\"   \u2022 Test updated agent: agentcore agent invoke {name} --prompt 'Hello!'\")\n        click.echo(f\"   \u2022 Update endpoint: agentcore agent endpoint update {name} --version {update_result.version}\")\n\n    except Exception as e:\n        click.echo(f\"\u274c Agent update failed: {str(e)}\", err=True)\n        return\n</code></pre>"},{"location":"reference/agentcore_cli/models/","title":"agentcore_cli.models","text":""},{"location":"reference/agentcore_cli/models/#agentcore_cli.models","title":"<code>agentcore_cli.models</code>","text":"<p>Models package for AgentCore Platform CLI.</p> <p>This package provides data models for the AgentCore Platform CLI.</p>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.ActionResult","title":"<code>ActionResult</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Base model for CLI action results.</p> Source code in <code>agentcore_cli/models/responses.py</code> Python<pre><code>class ActionResult(BaseAgentCoreModel):\n    \"\"\"Base model for CLI action results.\"\"\"\n\n    success: bool = Field(description=\"Whether the action was successful\")\n    message: str = Field(description=\"Status message\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.AgentCoreConfig","title":"<code>AgentCoreConfig</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Root configuration for AgentCore CLI.</p> <p>This configuration uses an environment-first approach where each environment owns its agent runtimes. This design aligns with AWS AgentCore where: - Runtimes exist in specific regions - Environments represent deployment targets (dev/staging/prod) - Each environment can have different versions and endpoints</p> Source code in <code>agentcore_cli/models/config.py</code> Python<pre><code>class AgentCoreConfig(BaseAgentCoreModel):\n    \"\"\"Root configuration for AgentCore CLI.\n\n    This configuration uses an environment-first approach where each environment\n    owns its agent runtimes. This design aligns with AWS AgentCore where:\n    - Runtimes exist in specific regions\n    - Environments represent deployment targets (dev/staging/prod)\n    - Each environment can have different versions and endpoints\n    \"\"\"\n\n    # Environment management\n    current_environment: str = Field(default=\"dev\", description=\"Currently active environment\")\n    environments: dict[str, EnvironmentConfig] = Field(\n        default_factory=dict, description=\"Environment configurations by name\"\n    )\n\n    # Global resources (shared across environments)\n    global_resources: GlobalResourceConfig = Field(\n        default_factory=GlobalResourceConfig, description=\"Resources shared across environments\"\n    )\n\n    # File path for configuration\n    config_path: str | None = Field(default=None, description=\"Path to the configuration file\")\n\n    model_config = ConfigDict(extra=\"allow\", json_encoders={datetime: lambda v: v.isoformat() if v else None})\n\n    @model_validator(mode=\"after\")\n    def ensure_current_environment_exists(cls, model):\n        \"\"\"Ensure the current environment exists.\"\"\"\n        if model.current_environment not in model.environments:\n            # Create default environment\n            model.environments[model.current_environment] = EnvironmentConfig(\n                name=model.current_environment,\n                region=\"us-east-1\",  # Default region\n                created_at=datetime.now(),\n            )\n        return model\n\n    @model_validator(mode=\"after\")\n    def validate_ecr_repository_references(cls, model):\n        \"\"\"Validate that all ECR repository references exist in global_resources.ecr_repositories.\"\"\"\n        available_repos = set(model.global_resources.ecr_repositories.keys())\n\n        for env_name, env_config in model.environments.items():\n            for runtime_name, runtime in env_config.agent_runtimes.items():\n                # Validate primary ECR repository\n                if runtime.primary_ecr_repository not in available_repos:\n                    raise ValueError(\n                        f\"Runtime '{runtime_name}' in environment '{env_name}' references \"\n                        f\"ECR repository '{runtime.primary_ecr_repository}' which does not exist \"\n                        f\"in global_resources.ecr_repositories. Available repositories: {sorted(available_repos)}\"\n                    )\n\n                # Validate ECR repository references in all versions\n                for version_id, version in runtime.versions.items():\n                    if version.ecr_repository_name not in available_repos:\n                        raise ValueError(\n                            f\"Version '{version_id}' of runtime '{runtime_name}' in environment '{env_name}' \"\n                            f\"references ECR repository '{version.ecr_repository_name}' which does not exist \"\n                            f\"in global_resources.ecr_repositories. Available repositories: {sorted(available_repos)}\"\n                        )\n\n        return model\n\n    def get_current_env(self) -&gt; EnvironmentConfig:\n        \"\"\"Get the currently active environment configuration.\"\"\"\n        return self.environments[self.current_environment]\n\n    def get_agent_runtime(self, agent_name: str, environment: str | None = None) -&gt; \"AgentRuntime | None\":\n        \"\"\"Get an agent runtime from the specified or current environment.\n\n        Args:\n            agent_name: Name of the agent runtime\n            environment: Environment name, or None for current environment\n\n        Returns:\n            AgentRuntime instance or None if not found\n        \"\"\"\n        env_name = environment or self.current_environment\n        if env_name not in self.environments:\n            return None\n\n        env_config = self.environments[env_name]\n        return env_config.agent_runtimes.get(agent_name)\n\n    def list_all_agent_runtimes(self) -&gt; dict[str, list[str]]:\n        \"\"\"List all agent runtimes across all environments.\n\n        Returns:\n            Dict mapping environment names to lists of agent runtime names\n        \"\"\"\n        return {env_name: list(env_config.agent_runtimes.keys()) for env_name, env_config in self.environments.items()}\n\n    def get_ecr_repository(self, repository_name: str) -&gt; \"ECRRepository | None\":\n        \"\"\"Get an ECR repository by name.\n\n        Args:\n            repository_name: Name of the ECR repository\n\n        Returns:\n            ECRRepository instance or None if not found\n        \"\"\"\n        # Validate repository name\n        is_valid, error_msg = validate_repo_name(repository_name)\n        if not is_valid:\n            # Log warning but don't raise exception to maintain backward compatibility\n            from loguru import logger\n\n            logger.warning(f\"Invalid repository name '{repository_name}': {error_msg}\")\n            return None\n\n        return self.global_resources.ecr_repositories.get(repository_name)\n\n    def get_runtime_version_container_uri(\n        self, agent_name: str, version_id: str, environment: str | None = None\n    ) -&gt; str | None:\n        \"\"\"Get the full container URI for a specific runtime version.\n\n        Args:\n            agent_name: Name of the agent runtime\n            version_id: Version identifier\n            environment: Environment name, or None for current environment\n\n        Returns:\n            Full container URI or None if not found\n        \"\"\"\n        runtime = self.get_agent_runtime(agent_name, environment)\n        if not runtime or version_id not in runtime.versions:\n            return None\n\n        version = runtime.versions[version_id]\n        ecr_repo = self.get_ecr_repository(version.ecr_repository_name)\n        if not ecr_repo:\n            return None\n\n        return version.get_container_uri(ecr_repo)\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.AgentCoreConfig.ensure_current_environment_exists","title":"<code>ensure_current_environment_exists(model)</code>","text":"<p>Ensure the current environment exists.</p> Source code in <code>agentcore_cli/models/config.py</code> Python<pre><code>@model_validator(mode=\"after\")\ndef ensure_current_environment_exists(cls, model):\n    \"\"\"Ensure the current environment exists.\"\"\"\n    if model.current_environment not in model.environments:\n        # Create default environment\n        model.environments[model.current_environment] = EnvironmentConfig(\n            name=model.current_environment,\n            region=\"us-east-1\",  # Default region\n            created_at=datetime.now(),\n        )\n    return model\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.AgentCoreConfig.get_agent_runtime","title":"<code>get_agent_runtime(agent_name, environment=None)</code>","text":"<p>Get an agent runtime from the specified or current environment.</p> <p>Parameters:</p> Name Type Description Default <code>agent_name</code> <code>str</code> <p>Name of the agent runtime</p> required <code>environment</code> <code>str | None</code> <p>Environment name, or None for current environment</p> <code>None</code> <p>Returns:</p> Type Description <code>AgentRuntime | None</code> <p>AgentRuntime instance or None if not found</p> Source code in <code>agentcore_cli/models/config.py</code> Python<pre><code>def get_agent_runtime(self, agent_name: str, environment: str | None = None) -&gt; \"AgentRuntime | None\":\n    \"\"\"Get an agent runtime from the specified or current environment.\n\n    Args:\n        agent_name: Name of the agent runtime\n        environment: Environment name, or None for current environment\n\n    Returns:\n        AgentRuntime instance or None if not found\n    \"\"\"\n    env_name = environment or self.current_environment\n    if env_name not in self.environments:\n        return None\n\n    env_config = self.environments[env_name]\n    return env_config.agent_runtimes.get(agent_name)\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.AgentCoreConfig.get_current_env","title":"<code>get_current_env()</code>","text":"<p>Get the currently active environment configuration.</p> Source code in <code>agentcore_cli/models/config.py</code> Python<pre><code>def get_current_env(self) -&gt; EnvironmentConfig:\n    \"\"\"Get the currently active environment configuration.\"\"\"\n    return self.environments[self.current_environment]\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.AgentCoreConfig.get_ecr_repository","title":"<code>get_ecr_repository(repository_name)</code>","text":"<p>Get an ECR repository by name.</p> <p>Parameters:</p> Name Type Description Default <code>repository_name</code> <code>str</code> <p>Name of the ECR repository</p> required <p>Returns:</p> Type Description <code>ECRRepository | None</code> <p>ECRRepository instance or None if not found</p> Source code in <code>agentcore_cli/models/config.py</code> Python<pre><code>def get_ecr_repository(self, repository_name: str) -&gt; \"ECRRepository | None\":\n    \"\"\"Get an ECR repository by name.\n\n    Args:\n        repository_name: Name of the ECR repository\n\n    Returns:\n        ECRRepository instance or None if not found\n    \"\"\"\n    # Validate repository name\n    is_valid, error_msg = validate_repo_name(repository_name)\n    if not is_valid:\n        # Log warning but don't raise exception to maintain backward compatibility\n        from loguru import logger\n\n        logger.warning(f\"Invalid repository name '{repository_name}': {error_msg}\")\n        return None\n\n    return self.global_resources.ecr_repositories.get(repository_name)\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.AgentCoreConfig.get_runtime_version_container_uri","title":"<code>get_runtime_version_container_uri(agent_name, version_id, environment=None)</code>","text":"<p>Get the full container URI for a specific runtime version.</p> <p>Parameters:</p> Name Type Description Default <code>agent_name</code> <code>str</code> <p>Name of the agent runtime</p> required <code>version_id</code> <code>str</code> <p>Version identifier</p> required <code>environment</code> <code>str | None</code> <p>Environment name, or None for current environment</p> <code>None</code> <p>Returns:</p> Type Description <code>str | None</code> <p>Full container URI or None if not found</p> Source code in <code>agentcore_cli/models/config.py</code> Python<pre><code>def get_runtime_version_container_uri(\n    self, agent_name: str, version_id: str, environment: str | None = None\n) -&gt; str | None:\n    \"\"\"Get the full container URI for a specific runtime version.\n\n    Args:\n        agent_name: Name of the agent runtime\n        version_id: Version identifier\n        environment: Environment name, or None for current environment\n\n    Returns:\n        Full container URI or None if not found\n    \"\"\"\n    runtime = self.get_agent_runtime(agent_name, environment)\n    if not runtime or version_id not in runtime.versions:\n        return None\n\n    version = runtime.versions[version_id]\n    ecr_repo = self.get_ecr_repository(version.ecr_repository_name)\n    if not ecr_repo:\n        return None\n\n    return version.get_container_uri(ecr_repo)\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.AgentCoreConfig.list_all_agent_runtimes","title":"<code>list_all_agent_runtimes()</code>","text":"<p>List all agent runtimes across all environments.</p> <p>Returns:</p> Type Description <code>dict[str, list[str]]</code> <p>Dict mapping environment names to lists of agent runtime names</p> Source code in <code>agentcore_cli/models/config.py</code> Python<pre><code>def list_all_agent_runtimes(self) -&gt; dict[str, list[str]]:\n    \"\"\"List all agent runtimes across all environments.\n\n    Returns:\n        Dict mapping environment names to lists of agent runtime names\n    \"\"\"\n    return {env_name: list(env_config.agent_runtimes.keys()) for env_name, env_config in self.environments.items()}\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.AgentCoreConfig.validate_ecr_repository_references","title":"<code>validate_ecr_repository_references(model)</code>","text":"<p>Validate that all ECR repository references exist in global_resources.ecr_repositories.</p> Source code in <code>agentcore_cli/models/config.py</code> Python<pre><code>@model_validator(mode=\"after\")\ndef validate_ecr_repository_references(cls, model):\n    \"\"\"Validate that all ECR repository references exist in global_resources.ecr_repositories.\"\"\"\n    available_repos = set(model.global_resources.ecr_repositories.keys())\n\n    for env_name, env_config in model.environments.items():\n        for runtime_name, runtime in env_config.agent_runtimes.items():\n            # Validate primary ECR repository\n            if runtime.primary_ecr_repository not in available_repos:\n                raise ValueError(\n                    f\"Runtime '{runtime_name}' in environment '{env_name}' references \"\n                    f\"ECR repository '{runtime.primary_ecr_repository}' which does not exist \"\n                    f\"in global_resources.ecr_repositories. Available repositories: {sorted(available_repos)}\"\n                )\n\n            # Validate ECR repository references in all versions\n            for version_id, version in runtime.versions.items():\n                if version.ecr_repository_name not in available_repos:\n                    raise ValueError(\n                        f\"Version '{version_id}' of runtime '{runtime_name}' in environment '{env_name}' \"\n                        f\"references ECR repository '{version.ecr_repository_name}' which does not exist \"\n                        f\"in global_resources.ecr_repositories. Available repositories: {sorted(available_repos)}\"\n                    )\n\n    return model\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.AgentCreationResult","title":"<code>AgentCreationResult</code>","text":"<p>               Bases: <code>ActionResult</code></p> <p>Result of agent creation.</p> Source code in <code>agentcore_cli/models/responses.py</code> Python<pre><code>class AgentCreationResult(ActionResult):\n    \"\"\"Result of agent creation.\"\"\"\n\n    agent_name: str = Field(description=\"Agent name\")\n    runtime_id: str | None = Field(default=None, description=\"Runtime ID\")\n    runtime_arn: str | None = Field(default=None, description=\"Runtime ARN\")\n    container_uri: str | None = Field(default=None, description=\"Container URI\")\n    role_arn: str | None = Field(default=None, description=\"IAM role ARN\")\n    environment: str = Field(description=\"Environment name\")\n    default_endpoint: str = Field(default=\"DEFAULT\", description=\"Default endpoint name\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.AgentDeletionResult","title":"<code>AgentDeletionResult</code>","text":"<p>               Bases: <code>ActionResult</code></p> <p>Result of agent deletion.</p> Source code in <code>agentcore_cli/models/responses.py</code> Python<pre><code>class AgentDeletionResult(ActionResult):\n    \"\"\"Result of agent deletion.\"\"\"\n\n    agent_name: str = Field(description=\"Agent name\")\n    deleted_resources: list[str] = Field(default_factory=list, description=\"Deleted resources\")\n    environment: str = Field(description=\"Environment name\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.AgentEndpointStatusType","title":"<code>AgentEndpointStatusType</code>","text":"<p>               Bases: <code>StrEnum</code></p> <p>Status of an agent runtime endpoint.</p> <p>Endpoints go through these states during their lifecycle. Unlike runtimes, endpoints can be updated to point to different versions.</p> Source code in <code>agentcore_cli/models/base.py</code> Python<pre><code>class AgentEndpointStatusType(StrEnum):\n    \"\"\"Status of an agent runtime endpoint.\n\n    Endpoints go through these states during their lifecycle.\n    Unlike runtimes, endpoints can be updated to point to different versions.\n    \"\"\"\n\n    CREATING = \"CREATING\"\n    CREATE_FAILED = \"CREATE_FAILED\"\n    UPDATING = \"UPDATING\"\n    UPDATE_FAILED = \"UPDATE_FAILED\"\n    READY = \"READY\"\n    DELETING = \"DELETING\"\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.AgentInvocationResponse","title":"<code>AgentInvocationResponse</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Response model for agent invocation.</p> <p>This model handles both streaming and non-streaming responses from the boto3 invoke_agent_runtime API.</p> Source code in <code>agentcore_cli/models/responses.py</code> Python<pre><code>class AgentInvocationResponse(BaseAgentCoreModel):\n    \"\"\"Response model for agent invocation.\n\n    This model handles both streaming and non-streaming responses from\n    the boto3 invoke_agent_runtime API.\n    \"\"\"\n\n    content_type: str | None = Field(default=None, description=\"Content type of the response\")\n    streaming: bool = Field(default=False, description=\"Whether response was streaming\")\n    session_id: str = Field(description=\"Session ID used for the invocation\")\n    agent_name: str = Field(description=\"Agent name that was invoked\")\n    endpoint_name: str = Field(description=\"Endpoint name that was used\")\n    timestamp: datetime = Field(default_factory=datetime.now, description=\"Timestamp of the invocation\")\n\n    # For streaming responses\n    stream_content: list[str] | None = Field(default=None, description=\"Collected content from streaming response\")\n\n    # For non-streaming responses\n    output: Any | None = Field(default=None, description=\"Response output object for non-streaming response\")\n\n    @classmethod\n    def from_streaming_response(\n        cls, response: Any, agent_name: str, endpoint_name: str, session_id: str\n    ) -&gt; \"AgentInvocationResponse\":\n        \"\"\"Create a response object from a streaming API response.\"\"\"\n        content = []\n\n        # Handle streaming response\n        if \"response\" in response and hasattr(response[\"response\"], \"iter_lines\"):\n            for line in response[\"response\"].iter_lines(chunk_size=1):\n                if line:\n                    line_text = line.decode(\"utf-8\")\n                    # Check for \"data: \" prefix\n                    if line_text.startswith(\"data: \"):\n                        line_text = line_text[6:]  # Remove the \"data: \" prefix\n                        content.append(line_text)\n\n        return cls(\n            content_type=response.get(\"contentType\"),\n            streaming=True,\n            session_id=session_id,\n            agent_name=agent_name,\n            endpoint_name=endpoint_name,\n            stream_content=content,\n        )\n\n    @classmethod\n    def from_nonstreaming_response(\n        cls, response: Any, agent_name: str, endpoint_name: str, session_id: str\n    ) -&gt; \"AgentInvocationResponse\":\n        \"\"\"Create a response object from a non-streaming API response.\"\"\"\n        try:\n            # Extract response body\n            response_body = None\n            if \"response\" in response:\n                if hasattr(response[\"response\"], \"read\"):\n                    response_body = response[\"response\"].read()\n                    if response_body:\n                        response_data = json.loads(response_body)\n                        output = response_data.get(\"output\", {})\n                    else:\n                        output = {}\n                else:\n                    output = response.get(\"response\", {})\n            else:\n                output = {}\n\n            return cls(\n                content_type=response.get(\"contentType\"),\n                streaming=False,\n                session_id=session_id,\n                agent_name=agent_name,\n                endpoint_name=endpoint_name,\n                output=output,\n            )\n\n        except Exception as e:\n            # Handle any parsing errors\n            return cls(\n                content_type=response.get(\"contentType\"),\n                streaming=False,\n                session_id=session_id,\n                agent_name=agent_name,\n                endpoint_name=endpoint_name,\n                output={\"error\": f\"Failed to parse response: {str(e)}\"},\n            )\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.AgentInvocationResponse.from_nonstreaming_response","title":"<code>from_nonstreaming_response(response, agent_name, endpoint_name, session_id)</code>  <code>classmethod</code>","text":"<p>Create a response object from a non-streaming API response.</p> Source code in <code>agentcore_cli/models/responses.py</code> Python<pre><code>@classmethod\ndef from_nonstreaming_response(\n    cls, response: Any, agent_name: str, endpoint_name: str, session_id: str\n) -&gt; \"AgentInvocationResponse\":\n    \"\"\"Create a response object from a non-streaming API response.\"\"\"\n    try:\n        # Extract response body\n        response_body = None\n        if \"response\" in response:\n            if hasattr(response[\"response\"], \"read\"):\n                response_body = response[\"response\"].read()\n                if response_body:\n                    response_data = json.loads(response_body)\n                    output = response_data.get(\"output\", {})\n                else:\n                    output = {}\n            else:\n                output = response.get(\"response\", {})\n        else:\n            output = {}\n\n        return cls(\n            content_type=response.get(\"contentType\"),\n            streaming=False,\n            session_id=session_id,\n            agent_name=agent_name,\n            endpoint_name=endpoint_name,\n            output=output,\n        )\n\n    except Exception as e:\n        # Handle any parsing errors\n        return cls(\n            content_type=response.get(\"contentType\"),\n            streaming=False,\n            session_id=session_id,\n            agent_name=agent_name,\n            endpoint_name=endpoint_name,\n            output={\"error\": f\"Failed to parse response: {str(e)}\"},\n        )\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.AgentInvocationResponse.from_streaming_response","title":"<code>from_streaming_response(response, agent_name, endpoint_name, session_id)</code>  <code>classmethod</code>","text":"<p>Create a response object from a streaming API response.</p> Source code in <code>agentcore_cli/models/responses.py</code> Python<pre><code>@classmethod\ndef from_streaming_response(\n    cls, response: Any, agent_name: str, endpoint_name: str, session_id: str\n) -&gt; \"AgentInvocationResponse\":\n    \"\"\"Create a response object from a streaming API response.\"\"\"\n    content = []\n\n    # Handle streaming response\n    if \"response\" in response and hasattr(response[\"response\"], \"iter_lines\"):\n        for line in response[\"response\"].iter_lines(chunk_size=1):\n            if line:\n                line_text = line.decode(\"utf-8\")\n                # Check for \"data: \" prefix\n                if line_text.startswith(\"data: \"):\n                    line_text = line_text[6:]  # Remove the \"data: \" prefix\n                    content.append(line_text)\n\n    return cls(\n        content_type=response.get(\"contentType\"),\n        streaming=True,\n        session_id=session_id,\n        agent_name=agent_name,\n        endpoint_name=endpoint_name,\n        stream_content=content,\n    )\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.AgentRuntime","title":"<code>AgentRuntime</code>","text":"<p>               Bases: <code>ResourceBase</code></p> <p>Configuration for an agent runtime.</p> <p>Agent runtimes are associated with ECR repositories where their container images are stored. Each runtime can have multiple versions, each pointing to different image tags.</p> Source code in <code>agentcore_cli/models/runtime.py</code> Python<pre><code>class AgentRuntime(ResourceBase):\n    \"\"\"Configuration for an agent runtime.\n\n    Agent runtimes are associated with ECR repositories where their container images are stored.\n    Each runtime can have multiple versions, each pointing to different image tags.\n    \"\"\"\n\n    name: str = Field(description=\"Agent runtime name\")\n    agent_runtime_id: str = Field(description=\"Runtime ID\")\n    agent_runtime_arn: str | None = Field(default=None, description=\"Runtime ARN\")\n    description: str | None = Field(default=None, description=\"Runtime description\")\n    latest_version: str = Field(description=\"Latest version identifier\")\n\n    # ECR Repository association\n    primary_ecr_repository: str = Field(\n        description=\"Primary ECR repository name for this runtime (must exist in global_resources.ecr_repositories)\"\n    )\n\n    # Runtime components\n    versions: dict[str, AgentRuntimeVersion] = Field(\n        default_factory=dict, description=\"Available versions by version identifier\"\n    )\n    endpoints: dict[str, AgentRuntimeEndpoint] = Field(default_factory=dict, description=\"Available endpoints by name\")\n    workload_identity: WorkloadIdentity | None = Field(default=None, description=\"Workload identity details\")\n    authorizer_config: AuthorizerConfig | None = Field(default=None, description=\"Authorizer configuration\")\n\n    @field_validator(\"name\")\n    @classmethod\n    def validate_runtime_name(cls, v: str) -&gt; str:\n        \"\"\"Validate agent runtime name format.\"\"\"\n        if not v:\n            raise ValueError(\"Agent runtime name cannot be empty\")\n\n        if not v[0].isalpha():\n            raise ValueError(\"Agent runtime name must start with a letter\")\n\n        if not all(c.isalnum() or c == \"-\" for c in v):\n            raise ValueError(\"Agent runtime name can only contain alphanumeric characters and hyphens\")\n\n        if len(v) &lt; 3 or len(v) &gt; 63:\n            raise ValueError(\"Agent runtime name must be between 3 and 63 characters\")\n\n        return v\n\n    @model_validator(mode=\"after\")\n    def validate_version_repository_consistency(cls, model):\n        \"\"\"Validate that all versions reference valid ECR repositories.\"\"\"\n        for version_id, version in model.versions.items():\n            # All versions should typically use the same repository as the runtime's primary repository\n            # This is a soft validation - you could have versions in different repositories\n            if version.ecr_repository_name != model.primary_ecr_repository:\n                import warnings\n\n                warnings.warn(\n                    f\"Version '{version_id}' uses repository '{version.ecr_repository_name}' \"\n                    f\"but runtime '{model.name}' primary repository is '{model.primary_ecr_repository}'\"\n                )\n        return model\n\n    @model_validator(mode=\"after\")\n    def ensure_default_endpoint(cls, model):\n        \"\"\"Ensure the DEFAULT endpoint exists and points to latest version.\n\n        Note: AWS AgentCore automatically creates and manages the DEFAULT endpoint.\n        This validator ensures our model reflects this AWS behavior.\n        \"\"\"\n        if model.versions and model.latest_version in model.versions:\n            # If we have versions but no DEFAULT endpoint info, create a placeholder\n            # representing what AWS would automatically create\n            if \"DEFAULT\" not in model.endpoints:\n                model.endpoints[\"DEFAULT\"] = AgentRuntimeEndpoint(\n                    name=\"DEFAULT\",\n                    agent_runtime_id=model.agent_runtime_id,\n                    target_version=model.latest_version,\n                    status=AgentEndpointStatusType.READY,\n                    created_at=model.created_at,\n                    description=\"Default endpoint (automatically managed by AWS)\",\n                )\n            else:\n                # Ensure DEFAULT endpoint points to latest version (AWS behavior)\n                default_endpoint = model.endpoints[\"DEFAULT\"]\n                if default_endpoint.target_version != model.latest_version:\n                    default_endpoint.target_version = model.latest_version\n        return model\n\n    def get_version_container_uri(self, version_id: str, ecr_repository: \"ECRRepository\") -&gt; str | None:\n        \"\"\"Get the full container URI for a specific version.\n\n        Args:\n            version_id: Version identifier\n            ecr_repository: ECR repository configuration\n\n        Returns:\n            Full container URI or None if version not found\n        \"\"\"\n        if version_id not in self.versions:\n            return None\n\n        version = self.versions[version_id]\n        return version.get_container_uri(ecr_repository)\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.AgentRuntime.ensure_default_endpoint","title":"<code>ensure_default_endpoint(model)</code>","text":"<p>Ensure the DEFAULT endpoint exists and points to latest version.</p> <p>Note: AWS AgentCore automatically creates and manages the DEFAULT endpoint. This validator ensures our model reflects this AWS behavior.</p> Source code in <code>agentcore_cli/models/runtime.py</code> Python<pre><code>@model_validator(mode=\"after\")\ndef ensure_default_endpoint(cls, model):\n    \"\"\"Ensure the DEFAULT endpoint exists and points to latest version.\n\n    Note: AWS AgentCore automatically creates and manages the DEFAULT endpoint.\n    This validator ensures our model reflects this AWS behavior.\n    \"\"\"\n    if model.versions and model.latest_version in model.versions:\n        # If we have versions but no DEFAULT endpoint info, create a placeholder\n        # representing what AWS would automatically create\n        if \"DEFAULT\" not in model.endpoints:\n            model.endpoints[\"DEFAULT\"] = AgentRuntimeEndpoint(\n                name=\"DEFAULT\",\n                agent_runtime_id=model.agent_runtime_id,\n                target_version=model.latest_version,\n                status=AgentEndpointStatusType.READY,\n                created_at=model.created_at,\n                description=\"Default endpoint (automatically managed by AWS)\",\n            )\n        else:\n            # Ensure DEFAULT endpoint points to latest version (AWS behavior)\n            default_endpoint = model.endpoints[\"DEFAULT\"]\n            if default_endpoint.target_version != model.latest_version:\n                default_endpoint.target_version = model.latest_version\n    return model\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.AgentRuntime.get_version_container_uri","title":"<code>get_version_container_uri(version_id, ecr_repository)</code>","text":"<p>Get the full container URI for a specific version.</p> <p>Parameters:</p> Name Type Description Default <code>version_id</code> <code>str</code> <p>Version identifier</p> required <code>ecr_repository</code> <code>ECRRepository</code> <p>ECR repository configuration</p> required <p>Returns:</p> Type Description <code>str | None</code> <p>Full container URI or None if version not found</p> Source code in <code>agentcore_cli/models/runtime.py</code> Python<pre><code>def get_version_container_uri(self, version_id: str, ecr_repository: \"ECRRepository\") -&gt; str | None:\n    \"\"\"Get the full container URI for a specific version.\n\n    Args:\n        version_id: Version identifier\n        ecr_repository: ECR repository configuration\n\n    Returns:\n        Full container URI or None if version not found\n    \"\"\"\n    if version_id not in self.versions:\n        return None\n\n    version = self.versions[version_id]\n    return version.get_container_uri(ecr_repository)\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.AgentRuntime.validate_runtime_name","title":"<code>validate_runtime_name(v)</code>  <code>classmethod</code>","text":"<p>Validate agent runtime name format.</p> Source code in <code>agentcore_cli/models/runtime.py</code> Python<pre><code>@field_validator(\"name\")\n@classmethod\ndef validate_runtime_name(cls, v: str) -&gt; str:\n    \"\"\"Validate agent runtime name format.\"\"\"\n    if not v:\n        raise ValueError(\"Agent runtime name cannot be empty\")\n\n    if not v[0].isalpha():\n        raise ValueError(\"Agent runtime name must start with a letter\")\n\n    if not all(c.isalnum() or c == \"-\" for c in v):\n        raise ValueError(\"Agent runtime name can only contain alphanumeric characters and hyphens\")\n\n    if len(v) &lt; 3 or len(v) &gt; 63:\n        raise ValueError(\"Agent runtime name must be between 3 and 63 characters\")\n\n    return v\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.AgentRuntime.validate_version_repository_consistency","title":"<code>validate_version_repository_consistency(model)</code>","text":"<p>Validate that all versions reference valid ECR repositories.</p> Source code in <code>agentcore_cli/models/runtime.py</code> Python<pre><code>@model_validator(mode=\"after\")\ndef validate_version_repository_consistency(cls, model):\n    \"\"\"Validate that all versions reference valid ECR repositories.\"\"\"\n    for version_id, version in model.versions.items():\n        # All versions should typically use the same repository as the runtime's primary repository\n        # This is a soft validation - you could have versions in different repositories\n        if version.ecr_repository_name != model.primary_ecr_repository:\n            import warnings\n\n            warnings.warn(\n                f\"Version '{version_id}' uses repository '{version.ecr_repository_name}' \"\n                f\"but runtime '{model.name}' primary repository is '{model.primary_ecr_repository}'\"\n            )\n    return model\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.AgentRuntimeEndpoint","title":"<code>AgentRuntimeEndpoint</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>An endpoint for accessing a specific version of an agent runtime.</p> Source code in <code>agentcore_cli/models/runtime.py</code> Python<pre><code>class AgentRuntimeEndpoint(BaseAgentCoreModel):\n    \"\"\"An endpoint for accessing a specific version of an agent runtime.\"\"\"\n\n    name: str = Field(description=\"Endpoint name (e.g., 'DEFAULT', 'prod', 'dev')\")\n    agent_runtime_id: str = Field(description=\"Runtime ID this endpoint belongs to\")\n    target_version: str = Field(description=\"Version identifier this endpoint points to\")\n    status: AgentEndpointStatusType = Field(description=\"Current endpoint status\")\n    description: str | None = Field(default=None, description=\"Endpoint description\")\n    created_at: datetime | None = Field(default=None, description=\"When this endpoint was created\")\n    updated_at: datetime | None = Field(default=None, description=\"When this endpoint was last updated\")\n    endpoint_arn: str | None = Field(default=None, description=\"ARN of this endpoint\")\n    failure_reason: str | None = Field(\n        default=None, description=\"Reason for failure if status is CREATE_FAILED or UPDATE_FAILED\"\n    )\n    live_version: str | None = Field(default=None, description=\"Currently active version for this endpoint\")\n\n    @field_validator(\"name\")\n    @classmethod\n    def validate_endpoint_name(cls, v: str) -&gt; str:\n        \"\"\"Validate endpoint name format.\"\"\"\n        if not v:\n            raise ValueError(\"Endpoint name cannot be empty\")\n\n        if not v.isalnum() and not all(c.isalnum() or c == \"-\" for c in v):\n            raise ValueError(\"Endpoint name can only contain alphanumeric characters and hyphens\")\n\n        return v\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.AgentRuntimeEndpoint.validate_endpoint_name","title":"<code>validate_endpoint_name(v)</code>  <code>classmethod</code>","text":"<p>Validate endpoint name format.</p> Source code in <code>agentcore_cli/models/runtime.py</code> Python<pre><code>@field_validator(\"name\")\n@classmethod\ndef validate_endpoint_name(cls, v: str) -&gt; str:\n    \"\"\"Validate endpoint name format.\"\"\"\n    if not v:\n        raise ValueError(\"Endpoint name cannot be empty\")\n\n    if not v.isalnum() and not all(c.isalnum() or c == \"-\" for c in v):\n        raise ValueError(\"Endpoint name can only contain alphanumeric characters and hyphens\")\n\n    return v\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.AgentRuntimeResponseAdapter","title":"<code>AgentRuntimeResponseAdapter</code>","text":"<p>Helper class to convert AWS API responses to our model structures.</p> Source code in <code>agentcore_cli/models/adapters.py</code> Python<pre><code>class AgentRuntimeResponseAdapter:\n    \"\"\"Helper class to convert AWS API responses to our model structures.\"\"\"\n\n    @staticmethod\n    def from_aws_response(response: Any) -&gt; AgentRuntime:\n        \"\"\"Convert AWS API response to AgentRuntime model.\"\"\"\n        # Extract container URI\n        container_uri = response.get(\"agentRuntimeArtifact\", {}).get(\"containerConfiguration\", {}).get(\"containerUri\")\n\n        # Determine network mode\n        network_mode = NetworkModeType(\n            response.get(\"networkConfiguration\", {}).get(\"networkMode\", NetworkModeType.PUBLIC)\n        )\n\n        # Determine protocol\n        protocol = ServerProtocolType(\n            response.get(\"protocolConfiguration\", {}).get(\"serverProtocol\", ServerProtocolType.HTTP)\n        )\n\n        # Extract region from ARN if available\n        region = \"us-east-1\"  # Default region\n        if \"agentRuntimeArn\" in response and response[\"agentRuntimeArn\"]:\n            arn_parts = response[\"agentRuntimeArn\"].split(\":\")\n            if len(arn_parts) &gt;= 4:\n                region = arn_parts[3]\n\n        # Extract workload identity\n        workload_identity = None\n        if \"workloadIdentityDetails\" in response and \"workloadIdentityArn\" in response[\"workloadIdentityDetails\"]:\n            workload_identity = WorkloadIdentity(\n                workload_identity_arn=response[\"workloadIdentityDetails\"][\"workloadIdentityArn\"]\n            )\n\n        # Determine status\n        status = AgentStatusType(response.get(\"status\", AgentStatusType.CREATING))\n\n        # Parse timestamps\n        created_at = response.get(\"createdAt\")\n        updated_at = response.get(\"updatedAt\")\n\n        # Extract version info\n        version_id = \"V1\"  # Default to V1 (AWS format)\n        if \"agentRuntimeVersion\" in response:\n            raw_version = response[\"agentRuntimeVersion\"]\n            # Ensure consistent format - AWS uses V1, V2, etc.\n            if raw_version and not raw_version.upper().startswith(\"V\"):\n                version_id = f\"V{raw_version}\"\n            else:\n                version_id = raw_version.upper() if raw_version else \"V1\"\n\n        # Parse ECR information from container URI\n        ecr_repository_name = \"\"\n        image_tag = \"latest\"\n\n        if container_uri:\n            # Parse container URI: registry/repository:tag\n            if \":\" in container_uri and \"/\" in container_uri:\n                repo_with_tag = container_uri.split(\"/\")[-1]  # Get last part after /\n                if \":\" in repo_with_tag:\n                    repo_name, tag = repo_with_tag.split(\":\", 1)\n                    ecr_repository_name = repo_name\n                    image_tag = tag\n                else:\n                    ecr_repository_name = repo_with_tag\n            elif \"/\" in container_uri:\n                # No tag specified, extract repository name\n                ecr_repository_name = container_uri.split(\"/\")[-1]\n\n        # Create runtime version\n        runtime_version = AgentRuntimeVersion(\n            version_id=version_id,\n            agent_runtime_id=response.get(\"agentRuntimeId\", \"\"),\n            ecr_repository_name=ecr_repository_name,\n            image_tag=image_tag,\n            status=status,\n            created_at=created_at,\n            network_mode=network_mode,\n            protocol=protocol,\n            environment_variables=response.get(\"environmentVariables\", {}),\n            execution_role_arn=response.get(\"roleArn\", \"\"),\n            failure_reason=response.get(\"failureReason\"),\n            updated_at=updated_at,\n        )\n\n        # Create default endpoint\n        default_endpoint = AgentRuntimeEndpoint(\n            name=\"DEFAULT\",\n            agent_runtime_id=response.get(\"agentRuntimeId\", \"\"),\n            target_version=version_id,\n            status=AgentEndpointStatusType.READY,\n            created_at=created_at,\n            endpoint_arn=f\"{response.get('agentRuntimeArn', '')}/endpoints/DEFAULT\"\n            if response.get(\"agentRuntimeArn\")\n            else None,\n        )\n\n        # Create and return AgentRuntime\n        return AgentRuntime(\n            name=response.get(\"agentRuntimeName\", \"\"),\n            agent_runtime_id=response.get(\"agentRuntimeId\", \"\"),\n            agent_runtime_arn=response.get(\"agentRuntimeArn\"),\n            description=response.get(\"description\"),\n            latest_version=version_id,\n            primary_ecr_repository=ecr_repository_name,\n            versions={version_id: runtime_version},\n            endpoints={\"DEFAULT\": default_endpoint},\n            created_at=created_at,\n            updated_at=updated_at,\n            region=region,\n            tags=response.get(\"tags\", {}),\n            workload_identity=workload_identity,\n        )\n\n    @staticmethod\n    def from_endpoint_response(\n        response: AgentEndpointTypeDef | GetAgentRuntimeEndpointResponseTypeDef, agent_runtime_id: str\n    ) -&gt; AgentRuntimeEndpoint:\n        \"\"\"Convert AWS API endpoint response to AgentRuntimeEndpoint model.\"\"\"\n        status = AgentEndpointStatusType(response.get(\"status\", AgentEndpointStatusType.READY))\n\n        return AgentRuntimeEndpoint(\n            name=response[\"name\"],\n            agent_runtime_id=agent_runtime_id,\n            target_version=response.get(\"targetVersion\", \"\"),\n            status=status,\n            description=response.get(\"description\", \"\"),\n            created_at=response[\"createdAt\"],\n            # Handle potential datetime conversion\n            updated_at=response[\"lastUpdatedAt\"],\n            endpoint_arn=response.get(\"agentRuntimeEndpointArn\"),\n            failure_reason=str(response.get(\"failureReason\")) if response.get(\"failureReason\") else None,\n            live_version=str(response.get(\"liveVersion\")) if response.get(\"liveVersion\") else None,\n        )\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.AgentRuntimeResponseAdapter.from_aws_response","title":"<code>from_aws_response(response)</code>  <code>staticmethod</code>","text":"<p>Convert AWS API response to AgentRuntime model.</p> Source code in <code>agentcore_cli/models/adapters.py</code> Python<pre><code>@staticmethod\ndef from_aws_response(response: Any) -&gt; AgentRuntime:\n    \"\"\"Convert AWS API response to AgentRuntime model.\"\"\"\n    # Extract container URI\n    container_uri = response.get(\"agentRuntimeArtifact\", {}).get(\"containerConfiguration\", {}).get(\"containerUri\")\n\n    # Determine network mode\n    network_mode = NetworkModeType(\n        response.get(\"networkConfiguration\", {}).get(\"networkMode\", NetworkModeType.PUBLIC)\n    )\n\n    # Determine protocol\n    protocol = ServerProtocolType(\n        response.get(\"protocolConfiguration\", {}).get(\"serverProtocol\", ServerProtocolType.HTTP)\n    )\n\n    # Extract region from ARN if available\n    region = \"us-east-1\"  # Default region\n    if \"agentRuntimeArn\" in response and response[\"agentRuntimeArn\"]:\n        arn_parts = response[\"agentRuntimeArn\"].split(\":\")\n        if len(arn_parts) &gt;= 4:\n            region = arn_parts[3]\n\n    # Extract workload identity\n    workload_identity = None\n    if \"workloadIdentityDetails\" in response and \"workloadIdentityArn\" in response[\"workloadIdentityDetails\"]:\n        workload_identity = WorkloadIdentity(\n            workload_identity_arn=response[\"workloadIdentityDetails\"][\"workloadIdentityArn\"]\n        )\n\n    # Determine status\n    status = AgentStatusType(response.get(\"status\", AgentStatusType.CREATING))\n\n    # Parse timestamps\n    created_at = response.get(\"createdAt\")\n    updated_at = response.get(\"updatedAt\")\n\n    # Extract version info\n    version_id = \"V1\"  # Default to V1 (AWS format)\n    if \"agentRuntimeVersion\" in response:\n        raw_version = response[\"agentRuntimeVersion\"]\n        # Ensure consistent format - AWS uses V1, V2, etc.\n        if raw_version and not raw_version.upper().startswith(\"V\"):\n            version_id = f\"V{raw_version}\"\n        else:\n            version_id = raw_version.upper() if raw_version else \"V1\"\n\n    # Parse ECR information from container URI\n    ecr_repository_name = \"\"\n    image_tag = \"latest\"\n\n    if container_uri:\n        # Parse container URI: registry/repository:tag\n        if \":\" in container_uri and \"/\" in container_uri:\n            repo_with_tag = container_uri.split(\"/\")[-1]  # Get last part after /\n            if \":\" in repo_with_tag:\n                repo_name, tag = repo_with_tag.split(\":\", 1)\n                ecr_repository_name = repo_name\n                image_tag = tag\n            else:\n                ecr_repository_name = repo_with_tag\n        elif \"/\" in container_uri:\n            # No tag specified, extract repository name\n            ecr_repository_name = container_uri.split(\"/\")[-1]\n\n    # Create runtime version\n    runtime_version = AgentRuntimeVersion(\n        version_id=version_id,\n        agent_runtime_id=response.get(\"agentRuntimeId\", \"\"),\n        ecr_repository_name=ecr_repository_name,\n        image_tag=image_tag,\n        status=status,\n        created_at=created_at,\n        network_mode=network_mode,\n        protocol=protocol,\n        environment_variables=response.get(\"environmentVariables\", {}),\n        execution_role_arn=response.get(\"roleArn\", \"\"),\n        failure_reason=response.get(\"failureReason\"),\n        updated_at=updated_at,\n    )\n\n    # Create default endpoint\n    default_endpoint = AgentRuntimeEndpoint(\n        name=\"DEFAULT\",\n        agent_runtime_id=response.get(\"agentRuntimeId\", \"\"),\n        target_version=version_id,\n        status=AgentEndpointStatusType.READY,\n        created_at=created_at,\n        endpoint_arn=f\"{response.get('agentRuntimeArn', '')}/endpoints/DEFAULT\"\n        if response.get(\"agentRuntimeArn\")\n        else None,\n    )\n\n    # Create and return AgentRuntime\n    return AgentRuntime(\n        name=response.get(\"agentRuntimeName\", \"\"),\n        agent_runtime_id=response.get(\"agentRuntimeId\", \"\"),\n        agent_runtime_arn=response.get(\"agentRuntimeArn\"),\n        description=response.get(\"description\"),\n        latest_version=version_id,\n        primary_ecr_repository=ecr_repository_name,\n        versions={version_id: runtime_version},\n        endpoints={\"DEFAULT\": default_endpoint},\n        created_at=created_at,\n        updated_at=updated_at,\n        region=region,\n        tags=response.get(\"tags\", {}),\n        workload_identity=workload_identity,\n    )\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.AgentRuntimeResponseAdapter.from_endpoint_response","title":"<code>from_endpoint_response(response, agent_runtime_id)</code>  <code>staticmethod</code>","text":"<p>Convert AWS API endpoint response to AgentRuntimeEndpoint model.</p> Source code in <code>agentcore_cli/models/adapters.py</code> Python<pre><code>@staticmethod\ndef from_endpoint_response(\n    response: AgentEndpointTypeDef | GetAgentRuntimeEndpointResponseTypeDef, agent_runtime_id: str\n) -&gt; AgentRuntimeEndpoint:\n    \"\"\"Convert AWS API endpoint response to AgentRuntimeEndpoint model.\"\"\"\n    status = AgentEndpointStatusType(response.get(\"status\", AgentEndpointStatusType.READY))\n\n    return AgentRuntimeEndpoint(\n        name=response[\"name\"],\n        agent_runtime_id=agent_runtime_id,\n        target_version=response.get(\"targetVersion\", \"\"),\n        status=status,\n        description=response.get(\"description\", \"\"),\n        created_at=response[\"createdAt\"],\n        # Handle potential datetime conversion\n        updated_at=response[\"lastUpdatedAt\"],\n        endpoint_arn=response.get(\"agentRuntimeEndpointArn\"),\n        failure_reason=str(response.get(\"failureReason\")) if response.get(\"failureReason\") else None,\n        live_version=str(response.get(\"liveVersion\")) if response.get(\"liveVersion\") else None,\n    )\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.AgentRuntimeVersion","title":"<code>AgentRuntimeVersion</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>A specific version of an agent runtime.</p> <p>Each version references a specific ECR repository and image tag. The container URI is constructed from the repository + tag combination.</p> Source code in <code>agentcore_cli/models/runtime.py</code> Python<pre><code>class AgentRuntimeVersion(BaseAgentCoreModel):\n    \"\"\"A specific version of an agent runtime.\n\n    Each version references a specific ECR repository and image tag.\n    The container URI is constructed from the repository + tag combination.\n    \"\"\"\n\n    version_id: str = Field(description=\"Version identifier (e.g., 'V1', 'V2')\")\n    agent_runtime_id: str = Field(description=\"Runtime ID this version belongs to\")\n\n    # ECR Image Reference\n    ecr_repository_name: str = Field(\n        description=\"Name of the ECR repository (must exist in global_resources.ecr_repositories)\"\n    )\n    image_tag: str = Field(\n        description=\"Docker image tag in the ECR repository (e.g., 'v1', 'latest', 'prod-2024-01-15')\"\n    )\n\n    # Runtime Configuration\n    status: AgentStatusType = Field(description=\"Status of this runtime version\")\n    created_at: datetime | None = Field(default=None, description=\"When this version was created\")\n    network_mode: NetworkModeType = Field(default=NetworkModeType.PUBLIC, description=\"Network mode for this version\")\n    protocol: ServerProtocolType = Field(default=ServerProtocolType.HTTP, description=\"Protocol type for this version\")\n    environment_variables: dict[str, str] = Field(\n        default_factory=dict, description=\"Environment variables for this version\"\n    )\n    execution_role_arn: str = Field(description=\"IAM role ARN used for this version\")\n    description: str | None = Field(default=None, description=\"Description of this version\")\n    failure_reason: str | None = Field(\n        default=None, description=\"Reason for failure if status is CREATE_FAILED or UPDATE_FAILED\"\n    )\n    updated_at: datetime | None = Field(default=None, description=\"When this version was last updated\")\n\n    model_config = ConfigDict(frozen=False)  # Allow updates for status changes, but versions are conceptually immutable\n\n    @property\n    def container_uri(self) -&gt; str:\n        \"\"\"Get the full container URI by combining repository and tag.\n\n        Note: This requires access to the ECR repository configuration to build the full URI.\n        Use get_container_uri() method with repository config for the complete URI.\n        \"\"\"\n        return f\"&lt;repository_uri&gt;:{self.image_tag}\"\n\n    def get_container_uri(self, ecr_repository: \"ECRRepository\") -&gt; str:\n        \"\"\"Get the full container URI using the ECR repository configuration.\n\n        Args:\n            ecr_repository: ECR repository configuration\n\n        Returns:\n            Full container URI: registry/repository:tag\n        \"\"\"\n        return ecr_repository.get_image_uri(self.image_tag)\n\n    @property\n    def short_version(self) -&gt; str:\n        \"\"\"Get a shortened version of the version ID for display.\"\"\"\n        # AWS AgentCore uses format like 'V1', 'V2', etc.\n        # Handle various possible formats for backward compatibility\n        if self.version_id.startswith(\"version-\"):\n            return \"V\" + self.version_id.replace(\"version-\", \"\")\n        elif self.version_id.lower().startswith(\"v\"):\n            return self.version_id.upper()\n        else:\n            # If it's just a number or other format, prefix with V\n            return f\"V{self.version_id}\"\n\n    @property\n    def is_immutable(self) -&gt; bool:\n        \"\"\"Check if this version is in an immutable state.\n\n        According to AWS documentation, versions are immutable once created,\n        but status can change during creation/update process.\n        \"\"\"\n        return self.status in {AgentStatusType.READY, AgentStatusType.CREATE_FAILED, AgentStatusType.UPDATE_FAILED}\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.AgentRuntimeVersion.container_uri","title":"<code>container_uri</code>  <code>property</code>","text":"<p>Get the full container URI by combining repository and tag.</p> <p>Note: This requires access to the ECR repository configuration to build the full URI. Use get_container_uri() method with repository config for the complete URI.</p>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.AgentRuntimeVersion.is_immutable","title":"<code>is_immutable</code>  <code>property</code>","text":"<p>Check if this version is in an immutable state.</p> <p>According to AWS documentation, versions are immutable once created, but status can change during creation/update process.</p>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.AgentRuntimeVersion.short_version","title":"<code>short_version</code>  <code>property</code>","text":"<p>Get a shortened version of the version ID for display.</p>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.AgentRuntimeVersion.get_container_uri","title":"<code>get_container_uri(ecr_repository)</code>","text":"<p>Get the full container URI using the ECR repository configuration.</p> <p>Parameters:</p> Name Type Description Default <code>ecr_repository</code> <code>ECRRepository</code> <p>ECR repository configuration</p> required <p>Returns:</p> Type Description <code>str</code> <p>Full container URI: registry/repository:tag</p> Source code in <code>agentcore_cli/models/runtime.py</code> Python<pre><code>def get_container_uri(self, ecr_repository: \"ECRRepository\") -&gt; str:\n    \"\"\"Get the full container URI using the ECR repository configuration.\n\n    Args:\n        ecr_repository: ECR repository configuration\n\n    Returns:\n        Full container URI: registry/repository:tag\n    \"\"\"\n    return ecr_repository.get_image_uri(self.image_tag)\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.AgentStatusType","title":"<code>AgentStatusType</code>","text":"<p>               Bases: <code>StrEnum</code></p> <p>Status of an agent runtime.</p> <p>These statuses reflect the lifecycle of an AWS AgentCore runtime. Runtimes transition through these states during creation, updates, and deletion.</p> Source code in <code>agentcore_cli/models/base.py</code> Python<pre><code>class AgentStatusType(StrEnum):\n    \"\"\"Status of an agent runtime.\n\n    These statuses reflect the lifecycle of an AWS AgentCore runtime.\n    Runtimes transition through these states during creation, updates, and deletion.\n    \"\"\"\n\n    CREATING = \"CREATING\"\n    CREATE_FAILED = \"CREATE_FAILED\"\n    UPDATING = \"UPDATING\"\n    UPDATE_FAILED = \"UPDATE_FAILED\"\n    READY = \"READY\"\n    DELETING = \"DELETING\"\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.AgentUpdateResult","title":"<code>AgentUpdateResult</code>","text":"<p>               Bases: <code>ActionResult</code></p> <p>Result of agent update.</p> Source code in <code>agentcore_cli/models/responses.py</code> Python<pre><code>class AgentUpdateResult(ActionResult):\n    \"\"\"Result of agent update.\"\"\"\n\n    agent_name: str = Field(description=\"Agent name\")\n    runtime_id: str = Field(description=\"Runtime ID\")\n    version: str = Field(description=\"New runtime version created\")\n    container_uri: str = Field(description=\"Container URI used\")\n    environment: str = Field(description=\"Environment name\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.AuthorizerConfig","title":"<code>AuthorizerConfig</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Authorizer configuration for AgentCore runtime.</p> Source code in <code>agentcore_cli/models/runtime.py</code> Python<pre><code>class AuthorizerConfig(BaseAgentCoreModel):\n    \"\"\"Authorizer configuration for AgentCore runtime.\"\"\"\n\n    custom_jwt_authorizer: CustomJWTAuthorizer | None = Field(default=None, description=\"JWT authorizer configuration\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.BaseAgentCoreModel","title":"<code>BaseAgentCoreModel</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base model with common configuration for all AgentCore models.</p> <p>Provides strict validation and consistent behavior across all models. All AgentCore CLI models inherit from this base class.</p> Source code in <code>agentcore_cli/models/base.py</code> Python<pre><code>class BaseAgentCoreModel(BaseModel):\n    \"\"\"Base model with common configuration for all AgentCore models.\n\n    Provides strict validation and consistent behavior across all models.\n    All AgentCore CLI models inherit from this base class.\n    \"\"\"\n\n    model_config = ConfigDict(\n        extra=\"forbid\",  # Forbid extra attributes for strict AWS API alignment\n        validate_default=True,  # Validate default values\n        validate_assignment=True,  # Validate attribute assignments\n        str_strip_whitespace=True,  # Strip whitespace from string values\n        use_enum_values=True,  # Use enum values for JSON serialization\n        arbitrary_types_allowed=True,  # Allow datetime and other complex types\n    )\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.CloudSyncResult","title":"<code>CloudSyncResult</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Result of a cloud sync operation.</p> Source code in <code>agentcore_cli/models/responses.py</code> Python<pre><code>class CloudSyncResult(BaseAgentCoreModel):\n    \"\"\"Result of a cloud sync operation.\"\"\"\n\n    success: bool = Field(description=\"Whether the operation was successful\")\n    message: str = Field(description=\"Status message\")\n    environment: str = Field(description=\"Environment name\")\n    synced_items: dict[str, int] = Field(default_factory=dict, description=\"Count of synced items by type\")\n    errors: list[str] = Field(default_factory=list, description=\"Errors encountered during sync\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.CognitoConfig","title":"<code>CognitoConfig</code>","text":"<p>               Bases: <code>ResourceBase</code></p> <p>Cognito user pool and identity pool configuration.</p> Source code in <code>agentcore_cli/models/resources.py</code> Python<pre><code>class CognitoConfig(ResourceBase):\n    \"\"\"Cognito user pool and identity pool configuration.\"\"\"\n\n    user_pool: CognitoUserPool | None = Field(default=None, description=\"User pool configuration\")\n    identity_pool: CognitoIdentityPool | None = Field(default=None, description=\"Identity pool configuration\")\n    last_sync: datetime | None = Field(default=None, description=\"Last sync timestamp\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.CognitoIdentityPool","title":"<code>CognitoIdentityPool</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Cognito identity pool configuration.</p> Source code in <code>agentcore_cli/models/resources.py</code> Python<pre><code>class CognitoIdentityPool(BaseAgentCoreModel):\n    \"\"\"Cognito identity pool configuration.\"\"\"\n\n    identity_pool_id: str = Field(description=\"Identity pool ID\")\n    identity_pool_name: str = Field(description=\"Identity pool name\")\n    created_at: datetime | None = Field(default=None, description=\"Creation timestamp\")\n    allow_unauthenticated_identities: bool = Field(\n        default=False, description=\"Whether unauthenticated identities are allowed\"\n    )\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.CognitoUserPool","title":"<code>CognitoUserPool</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Cognito user pool configuration.</p> Source code in <code>agentcore_cli/models/resources.py</code> Python<pre><code>class CognitoUserPool(BaseAgentCoreModel):\n    \"\"\"Cognito user pool configuration.\"\"\"\n\n    user_pool_id: str = Field(description=\"User pool ID\")\n    user_pool_name: str = Field(description=\"User pool name\")\n    user_pool_arn: str | None = Field(default=None, description=\"User pool ARN\")\n    client_id: str | None = Field(default=None, description=\"App client ID\")\n    client_secret: str | None = Field(default=None, description=\"App client secret\")\n    created_at: datetime | None = Field(default=None, description=\"Creation timestamp\")\n    domain: str | None = Field(default=None, description=\"User pool domain\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.ContainerBuildInput","title":"<code>ContainerBuildInput</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Input for building and pushing a container image to ECR.</p> Source code in <code>agentcore_cli/models/inputs.py</code> Python<pre><code>class ContainerBuildInput(BaseAgentCoreModel):\n    \"\"\"Input for building and pushing a container image to ECR.\"\"\"\n\n    ecr_repository_name: str = Field(description=\"ECR repository name (must exist in configuration)\")\n    image_tag: str = Field(default=\"latest\", description=\"Image tag to assign\")\n    dockerfile_path: str = Field(default=\"Dockerfile\", description=\"Path to Dockerfile\")\n    build_context: str = Field(default=\".\", description=\"Docker build context directory\")\n    build_args: dict[str, str] = Field(default_factory=dict, description=\"Docker build arguments\")\n    platform: str = Field(default=\"linux/arm64\", description=\"Target platform for the build\")\n    no_cache: bool = Field(default=False, description=\"Disable Docker build cache\")\n\n    @property\n    def dockerfile(self) -&gt; str:\n        \"\"\"Legacy property for backward compatibility.\"\"\"\n        return self.dockerfile_path\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.ContainerBuildInput.dockerfile","title":"<code>dockerfile</code>  <code>property</code>","text":"<p>Legacy property for backward compatibility.</p>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.CreateAgentRuntimeInput","title":"<code>CreateAgentRuntimeInput</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Input for creating a new agent runtime.</p> <p>Maps directly to AWS create_agent_runtime API parameters.</p> Source code in <code>agentcore_cli/models/inputs.py</code> Python<pre><code>class CreateAgentRuntimeInput(BaseAgentCoreModel):\n    \"\"\"Input for creating a new agent runtime.\n\n    Maps directly to AWS create_agent_runtime API parameters.\n    \"\"\"\n\n    name: str = Field(description=\"Agent runtime name\")\n    container_uri: str = Field(description=\"Full ECR container URI including tag\")\n    role_arn: str = Field(description=\"IAM execution role ARN for the agent runtime\")\n\n    # Optional parameters\n    description: str | None = Field(default=None, description=\"Agent runtime description\")\n    network_mode: NetworkModeType = Field(default=NetworkModeType.PUBLIC, description=\"Network configuration mode\")\n    protocol: ServerProtocolType = Field(default=ServerProtocolType.HTTP, description=\"Server protocol type\")\n    environment_variables: dict[str, str] = Field(default_factory=dict, description=\"Runtime environment variables\")\n    client_token: str | None = Field(default=None, description=\"Client token for idempotency\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.CreateEndpointInput","title":"<code>CreateEndpointInput</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Input for creating an agent runtime endpoint.</p> <p>Maps to AWS create_agent_runtime_endpoint API parameters.</p> Source code in <code>agentcore_cli/models/inputs.py</code> Python<pre><code>class CreateEndpointInput(BaseAgentCoreModel):\n    \"\"\"Input for creating an agent runtime endpoint.\n\n    Maps to AWS create_agent_runtime_endpoint API parameters.\n    \"\"\"\n\n    agent_runtime_id: str = Field(description=\"Agent runtime ID\")\n    name: str = Field(description=\"Endpoint name\")\n    target_version: str | None = Field(default=None, description=\"Specific runtime version (defaults to latest)\")\n    description: str | None = Field(default=None, description=\"Endpoint description\")\n    client_token: str | None = Field(default=None, description=\"Client token for idempotency\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.CustomJWTAuthorizer","title":"<code>CustomJWTAuthorizer</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>JWT authorizer configuration for AgentCore runtime.</p> Source code in <code>agentcore_cli/models/runtime.py</code> Python<pre><code>class CustomJWTAuthorizer(BaseAgentCoreModel):\n    \"\"\"JWT authorizer configuration for AgentCore runtime.\"\"\"\n\n    discovery_url: str = Field(description=\"Discovery URL for JWT validation\")\n    allowed_audience: list[str] = Field(default_factory=list, description=\"Allowed audiences\")\n    allowed_clients: list[str] = Field(default_factory=list, description=\"Allowed clients\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.ECRRepository","title":"<code>ECRRepository</code>","text":"<p>               Bases: <code>ResourceBase</code></p> <p>ECR repository configuration.</p> <p>Represents an Amazon ECR repository that can contain multiple image tags. Each AgentRuntimeVersion should reference this repository and specify an image tag.</p> Source code in <code>agentcore_cli/models/resources.py</code> Python<pre><code>class ECRRepository(ResourceBase):\n    \"\"\"ECR repository configuration.\n\n    Represents an Amazon ECR repository that can contain multiple image tags.\n    Each AgentRuntimeVersion should reference this repository and specify an image tag.\n    \"\"\"\n\n    name: str = Field(description=\"Repository name (e.g., 'my-chat-agent', 'my-data-processor')\")\n    registry_id: str = Field(description=\"AWS account ID that owns this repository\")\n    repository_uri: str = Field(\n        description=\"Full repository URI without image tag (e.g., '123456789.dkr.ecr.us-east-1.amazonaws.com/my-agent')\"\n    )\n\n    # Repository settings\n    image_scanning_config: bool = Field(default=True, description=\"Whether images are scanned on push\")\n    image_tag_mutability: str = Field(default=\"MUTABLE\", description=\"Image tag mutability: MUTABLE or IMMUTABLE\")\n    lifecycle_policy: dict[str, Any] | None = Field(default=None, description=\"Repository lifecycle policy\")\n\n    # Image tracking\n    available_tags: set[str] = Field(default_factory=set, description=\"Set of available image tags in this repository\")\n    last_push: datetime | None = Field(default=None, description=\"Last image push timestamp\")\n    last_sync: datetime | None = Field(default=None, description=\"Last sync timestamp with AWS\")\n\n    @property\n    def registry_url(self) -&gt; str:\n        \"\"\"Get the ECR registry URL (without repository name).\"\"\"\n        # Extract registry from repository_uri\n        # Format: registry_id.dkr.ecr.region.amazonaws.com/repo_name\n        if \"/\" in self.repository_uri:\n            return self.repository_uri.split(\"/\")[0]\n        return self.repository_uri\n\n    def get_image_uri(self, tag: str) -&gt; str:\n        \"\"\"Get the full container image URI for a specific tag.\n\n        Args:\n            tag: Image tag (e.g., 'v1', 'latest', 'prod-2024-01-15')\n\n        Returns:\n            Full container URI: registry/repository:tag\n        \"\"\"\n        return f\"{self.repository_uri}:{tag}\"\n\n    def validate_tag_exists(self, tag: str) -&gt; bool:\n        \"\"\"Check if an image tag exists in this repository.\"\"\"\n        return tag in self.available_tags\n\n    @field_validator(\"repository_uri\")\n    @classmethod\n    def validate_repository_uri(cls, v: str) -&gt; str:\n        \"\"\"Validate ECR repository URI format.\"\"\"\n        if not v:\n            raise ValueError(\"Repository URI cannot be empty\")\n\n        # Should match ECR pattern: account.dkr.ecr.region.amazonaws.com/repo-name\n        import re\n\n        ecr_pattern = r\"^[0-9]+\\.dkr\\.ecr\\.[a-z0-9-]+\\.amazonaws\\.com\\/[a-z0-9][a-z0-9._-]*$\"\n        if not re.match(ecr_pattern, v):\n            raise ValueError(\n                f\"Repository URI '{v}' does not match ECR format: account.dkr.ecr.region.amazonaws.com/repository-name\"\n            )\n\n        return v\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.ECRRepository.registry_url","title":"<code>registry_url</code>  <code>property</code>","text":"<p>Get the ECR registry URL (without repository name).</p>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.ECRRepository.get_image_uri","title":"<code>get_image_uri(tag)</code>","text":"<p>Get the full container image URI for a specific tag.</p> <p>Parameters:</p> Name Type Description Default <code>tag</code> <code>str</code> <p>Image tag (e.g., 'v1', 'latest', 'prod-2024-01-15')</p> required <p>Returns:</p> Type Description <code>str</code> <p>Full container URI: registry/repository:tag</p> Source code in <code>agentcore_cli/models/resources.py</code> Python<pre><code>def get_image_uri(self, tag: str) -&gt; str:\n    \"\"\"Get the full container image URI for a specific tag.\n\n    Args:\n        tag: Image tag (e.g., 'v1', 'latest', 'prod-2024-01-15')\n\n    Returns:\n        Full container URI: registry/repository:tag\n    \"\"\"\n    return f\"{self.repository_uri}:{tag}\"\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.ECRRepository.validate_repository_uri","title":"<code>validate_repository_uri(v)</code>  <code>classmethod</code>","text":"<p>Validate ECR repository URI format.</p> Source code in <code>agentcore_cli/models/resources.py</code> Python<pre><code>@field_validator(\"repository_uri\")\n@classmethod\ndef validate_repository_uri(cls, v: str) -&gt; str:\n    \"\"\"Validate ECR repository URI format.\"\"\"\n    if not v:\n        raise ValueError(\"Repository URI cannot be empty\")\n\n    # Should match ECR pattern: account.dkr.ecr.region.amazonaws.com/repo-name\n    import re\n\n    ecr_pattern = r\"^[0-9]+\\.dkr\\.ecr\\.[a-z0-9-]+\\.amazonaws\\.com\\/[a-z0-9][a-z0-9._-]*$\"\n    if not re.match(ecr_pattern, v):\n        raise ValueError(\n            f\"Repository URI '{v}' does not match ECR format: account.dkr.ecr.region.amazonaws.com/repository-name\"\n        )\n\n    return v\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.ECRRepository.validate_tag_exists","title":"<code>validate_tag_exists(tag)</code>","text":"<p>Check if an image tag exists in this repository.</p> Source code in <code>agentcore_cli/models/resources.py</code> Python<pre><code>def validate_tag_exists(self, tag: str) -&gt; bool:\n    \"\"\"Check if an image tag exists in this repository.\"\"\"\n    return tag in self.available_tags\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.EndpointCreationResult","title":"<code>EndpointCreationResult</code>","text":"<p>               Bases: <code>ActionResult</code></p> <p>Result of endpoint creation.</p> Source code in <code>agentcore_cli/models/responses.py</code> Python<pre><code>class EndpointCreationResult(ActionResult):\n    \"\"\"Result of endpoint creation.\"\"\"\n\n    agent_name: str = Field(description=\"Agent name\")\n    runtime_id: str = Field(description=\"Runtime ID\")\n    endpoint_name: str = Field(description=\"Endpoint name\")\n    endpoint_arn: str | None = Field(default=None, description=\"Endpoint ARN\")\n    target_version: str = Field(description=\"Version the endpoint points to\")\n    environment: str | None = Field(default=None, description=\"Environment mapped to this endpoint\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.EndpointUpdateResult","title":"<code>EndpointUpdateResult</code>","text":"<p>               Bases: <code>ActionResult</code></p> <p>Result of endpoint update.</p> Source code in <code>agentcore_cli/models/responses.py</code> Python<pre><code>class EndpointUpdateResult(ActionResult):\n    \"\"\"Result of endpoint update.\"\"\"\n\n    agent_name: str = Field(description=\"Agent name\")\n    runtime_id: str = Field(description=\"Runtime ID\")\n    endpoint_name: str = Field(description=\"Endpoint name\")\n    previous_version: str = Field(description=\"Previous version\")\n    new_version: str = Field(description=\"New version the endpoint points to\")\n    environment: str | None = Field(default=None, description=\"Environment mapped to this endpoint\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.EnvironmentConfig","title":"<code>EnvironmentConfig</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Configuration for a specific environment (dev, staging, prod).</p> <p>Each environment owns its agent runtimes and exists in a specific AWS region. This design aligns with AWS AgentCore where runtimes are region-specific resources.</p> Source code in <code>agentcore_cli/models/config.py</code> Python<pre><code>class EnvironmentConfig(BaseAgentCoreModel):\n    \"\"\"Configuration for a specific environment (dev, staging, prod).\n\n    Each environment owns its agent runtimes and exists in a specific AWS region.\n    This design aligns with AWS AgentCore where runtimes are region-specific resources.\n    \"\"\"\n\n    name: str = Field(description=\"Environment name (e.g., 'dev', 'staging', 'prod')\")\n    region: str = Field(description=\"AWS region for this environment and all its agent runtimes\")\n\n    # Agent runtimes owned by this environment\n    agent_runtimes: dict[str, \"AgentRuntime\"] = Field(\n        default_factory=dict, description=\"Agent runtimes deployed in this environment, keyed by runtime name\"\n    )\n\n    # Default agent for this environment\n    default_agent_runtime: str | None = Field(\n        default=None, description=\"Default agent runtime name to use for operations (must exist in agent_runtimes)\"\n    )\n\n    # Environment-specific settings\n    environment_variables: dict[str, str] = Field(\n        default_factory=dict, description=\"Default environment variables for all runtimes in this environment\"\n    )\n\n    # Auth configuration for this environment\n    cognito: CognitoConfig | None = Field(default=None, description=\"Cognito configuration for this environment\")\n\n    # Metadata\n    created_at: datetime | None = Field(default=None, description=\"When this environment was created\")\n    updated_at: datetime | None = Field(default=None, description=\"When this environment was last updated\")\n\n    @model_validator(mode=\"after\")\n    def set_creation_time(cls, model):\n        \"\"\"Set creation time if not set.\"\"\"\n        if model.created_at is None:\n            model.created_at = datetime.now()\n        return model\n\n    @model_validator(mode=\"after\")\n    def validate_default_agent(cls, model):\n        \"\"\"Validate that default_agent_runtime exists in agent_runtimes.\"\"\"\n        if model.default_agent_runtime:\n            if model.default_agent_runtime not in model.agent_runtimes:\n                available_runtimes = list(model.agent_runtimes.keys())\n                raise ValueError(\n                    f\"default_agent_runtime '{model.default_agent_runtime}' does not exist in agent_runtimes. \"\n                    f\"Available runtimes: {available_runtimes}\"\n                )\n        return model\n\n    @model_validator(mode=\"after\")\n    def validate_runtime_regions(cls, model):\n        \"\"\"Ensure all agent runtimes in this environment match the environment's region.\"\"\"\n        for runtime_name, runtime in model.agent_runtimes.items():\n            if hasattr(runtime, \"region\") and runtime.region != model.region:\n                raise ValueError(\n                    f\"Agent runtime '{runtime_name}' is in region '{runtime.region}' \"\n                    f\"but environment '{model.name}' is in region '{model.region}'. \"\n                    f\"All runtimes in an environment must be in the same region.\"\n                )\n        return model\n\n    def get_agent_endpoint(self, agent_runtime_name: str, endpoint_name: str | None = None) -&gt; tuple[str, str] | None:\n        \"\"\"Get the agent runtime and endpoint for invocation.\n\n        Args:\n            agent_runtime_name: Name of the agent runtime\n            endpoint_name: Specific endpoint name, or None to use DEFAULT\n\n        Returns:\n            Tuple of (runtime_name, endpoint_name) or None if not found\n        \"\"\"\n        if agent_runtime_name not in self.agent_runtimes:\n            return None\n\n        runtime = self.agent_runtimes[agent_runtime_name]\n        target_endpoint = endpoint_name or \"DEFAULT\"\n\n        if target_endpoint not in runtime.endpoints:\n            return None\n\n        return (agent_runtime_name, target_endpoint)\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.EnvironmentConfig.get_agent_endpoint","title":"<code>get_agent_endpoint(agent_runtime_name, endpoint_name=None)</code>","text":"<p>Get the agent runtime and endpoint for invocation.</p> <p>Parameters:</p> Name Type Description Default <code>agent_runtime_name</code> <code>str</code> <p>Name of the agent runtime</p> required <code>endpoint_name</code> <code>str | None</code> <p>Specific endpoint name, or None to use DEFAULT</p> <code>None</code> <p>Returns:</p> Type Description <code>tuple[str, str] | None</code> <p>Tuple of (runtime_name, endpoint_name) or None if not found</p> Source code in <code>agentcore_cli/models/config.py</code> Python<pre><code>def get_agent_endpoint(self, agent_runtime_name: str, endpoint_name: str | None = None) -&gt; tuple[str, str] | None:\n    \"\"\"Get the agent runtime and endpoint for invocation.\n\n    Args:\n        agent_runtime_name: Name of the agent runtime\n        endpoint_name: Specific endpoint name, or None to use DEFAULT\n\n    Returns:\n        Tuple of (runtime_name, endpoint_name) or None if not found\n    \"\"\"\n    if agent_runtime_name not in self.agent_runtimes:\n        return None\n\n    runtime = self.agent_runtimes[agent_runtime_name]\n    target_endpoint = endpoint_name or \"DEFAULT\"\n\n    if target_endpoint not in runtime.endpoints:\n        return None\n\n    return (agent_runtime_name, target_endpoint)\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.EnvironmentConfig.set_creation_time","title":"<code>set_creation_time(model)</code>","text":"<p>Set creation time if not set.</p> Source code in <code>agentcore_cli/models/config.py</code> Python<pre><code>@model_validator(mode=\"after\")\ndef set_creation_time(cls, model):\n    \"\"\"Set creation time if not set.\"\"\"\n    if model.created_at is None:\n        model.created_at = datetime.now()\n    return model\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.EnvironmentConfig.validate_default_agent","title":"<code>validate_default_agent(model)</code>","text":"<p>Validate that default_agent_runtime exists in agent_runtimes.</p> Source code in <code>agentcore_cli/models/config.py</code> Python<pre><code>@model_validator(mode=\"after\")\ndef validate_default_agent(cls, model):\n    \"\"\"Validate that default_agent_runtime exists in agent_runtimes.\"\"\"\n    if model.default_agent_runtime:\n        if model.default_agent_runtime not in model.agent_runtimes:\n            available_runtimes = list(model.agent_runtimes.keys())\n            raise ValueError(\n                f\"default_agent_runtime '{model.default_agent_runtime}' does not exist in agent_runtimes. \"\n                f\"Available runtimes: {available_runtimes}\"\n            )\n    return model\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.EnvironmentConfig.validate_runtime_regions","title":"<code>validate_runtime_regions(model)</code>","text":"<p>Ensure all agent runtimes in this environment match the environment's region.</p> Source code in <code>agentcore_cli/models/config.py</code> Python<pre><code>@model_validator(mode=\"after\")\ndef validate_runtime_regions(cls, model):\n    \"\"\"Ensure all agent runtimes in this environment match the environment's region.\"\"\"\n    for runtime_name, runtime in model.agent_runtimes.items():\n        if hasattr(runtime, \"region\") and runtime.region != model.region:\n            raise ValueError(\n                f\"Agent runtime '{runtime_name}' is in region '{runtime.region}' \"\n                f\"but environment '{model.name}' is in region '{model.region}'. \"\n                f\"All runtimes in an environment must be in the same region.\"\n            )\n    return model\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.EnvironmentCreationResult","title":"<code>EnvironmentCreationResult</code>","text":"<p>               Bases: <code>ActionResult</code></p> <p>Result of environment creation.</p> Source code in <code>agentcore_cli/models/responses.py</code> Python<pre><code>class EnvironmentCreationResult(ActionResult):\n    \"\"\"Result of environment creation.\"\"\"\n\n    name: str = Field(description=\"Environment name\")\n    region: str = Field(description=\"AWS region\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.EnvironmentDeletionResult","title":"<code>EnvironmentDeletionResult</code>","text":"<p>               Bases: <code>ActionResult</code></p> <p>Result of environment deletion.</p> Source code in <code>agentcore_cli/models/responses.py</code> Python<pre><code>class EnvironmentDeletionResult(ActionResult):\n    \"\"\"Result of environment deletion.\"\"\"\n\n    name: str = Field(description=\"Environment name\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.EnvironmentInput","title":"<code>EnvironmentInput</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Input for environment operations.</p> Source code in <code>agentcore_cli/models/inputs.py</code> Python<pre><code>class EnvironmentInput(BaseAgentCoreModel):\n    \"\"\"Input for environment operations.\"\"\"\n\n    name: str = Field(description=\"Environment name\")\n    region: str | None = Field(default=None, description=\"AWS region for the environment\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.GlobalResourceConfig","title":"<code>GlobalResourceConfig</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Global resources shared across environments.</p> Source code in <code>agentcore_cli/models/config.py</code> Python<pre><code>class GlobalResourceConfig(BaseAgentCoreModel):\n    \"\"\"Global resources shared across environments.\"\"\"\n\n    # ECR repositories (can be shared across environments)\n    ecr_repositories: dict[str, \"ECRRepository\"] = Field(default_factory=dict, description=\"ECR repositories by name\")\n\n    # IAM roles (can be shared across environments)\n    iam_roles: dict[str, \"IAMRoleConfig\"] = Field(default_factory=dict, description=\"IAM roles by name\")\n\n    # Sync configuration\n    sync_config: SyncConfig = Field(default_factory=SyncConfig, description=\"Sync configuration\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.IAMRoleConfig","title":"<code>IAMRoleConfig</code>","text":"<p>               Bases: <code>ResourceBase</code></p> <p>IAM role configuration.</p> Source code in <code>agentcore_cli/models/resources.py</code> Python<pre><code>class IAMRoleConfig(ResourceBase):\n    \"\"\"IAM role configuration.\"\"\"\n\n    name: str = Field(description=\"Role name\")\n    arn: str = Field(description=\"Role ARN\")\n    path: str = Field(default=\"/\", description=\"Role path\")\n    description: str | None = Field(default=None, description=\"Role description\")\n    assume_role_policy_document: dict[str, Any] | None = Field(default=None, description=\"Assume role policy\")\n    last_sync: datetime | None = Field(default=None, description=\"Last sync timestamp with AWS\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.ImageBuildResult","title":"<code>ImageBuildResult</code>","text":"<p>               Bases: <code>ActionResult</code></p> <p>Result of image build.</p> Source code in <code>agentcore_cli/models/responses.py</code> Python<pre><code>class ImageBuildResult(ActionResult):\n    \"\"\"Result of image build.\"\"\"\n\n    repo_name: str = Field(description=\"Repository name\")\n    tag: str = Field(description=\"Image tag\")\n    image_id: str | None = Field(default=None, description=\"Image ID\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.InvokeAgentInput","title":"<code>InvokeAgentInput</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Input for invoking an agent runtime.</p> <p>Maps directly to AWS invoke_agent_runtime API requirements. The API requires a full ARN and qualifier (endpoint name).</p> Source code in <code>agentcore_cli/models/inputs.py</code> Python<pre><code>class InvokeAgentInput(BaseAgentCoreModel):\n    \"\"\"Input for invoking an agent runtime.\n\n    Maps directly to AWS invoke_agent_runtime API requirements.\n    The API requires a full ARN and qualifier (endpoint name).\n    \"\"\"\n\n    agent_runtime_arn: str = Field(description=\"Full ARN of the agent runtime to invoke\")\n    qualifier: str = Field(description=\"Endpoint name or version qualifier (e.g., 'DEFAULT', 'production')\")\n    runtime_session_id: str = Field(description=\"Session ID for the runtime invocation\")\n    prompt: str = Field(description=\"Prompt to send to the agent\")\n\n    # Additional fields for CLI convenience\n    environment: str | None = Field(default=None, description=\"Environment context (for CLI reference only)\")\n    agent_name: str | None = Field(default=None, description=\"Agent name (for CLI reference only)\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.NetworkModeType","title":"<code>NetworkModeType</code>","text":"<p>               Bases: <code>StrEnum</code></p> <p>Network mode for AgentCore runtimes.</p> <p>Defines how the agent runtime is exposed within AWS networking: - PUBLIC: Runtime is accessible from the internet via public endpoints - PRIVATE: Runtime is only accessible within VPC (future AWS enhancement)</p> Source code in <code>agentcore_cli/models/base.py</code> Python<pre><code>class NetworkModeType(StrEnum):\n    \"\"\"Network mode for AgentCore runtimes.\n\n    Defines how the agent runtime is exposed within AWS networking:\n    - PUBLIC: Runtime is accessible from the internet via public endpoints\n    - PRIVATE: Runtime is only accessible within VPC (future AWS enhancement)\n    \"\"\"\n\n    PUBLIC = \"PUBLIC\"\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.ResourceBase","title":"<code>ResourceBase</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Base class for all AWS resource models.</p> <p>Provides common fields that all AWS resources share: region, timestamps, and tags for resource management.</p> Source code in <code>agentcore_cli/models/base.py</code> Python<pre><code>class ResourceBase(BaseAgentCoreModel):\n    \"\"\"Base class for all AWS resource models.\n\n    Provides common fields that all AWS resources share:\n    region, timestamps, and tags for resource management.\n    \"\"\"\n\n    region: str = Field(description=\"AWS region where this resource exists\")\n    created_at: datetime | None = Field(default=None, description=\"Resource creation timestamp\")\n    updated_at: datetime | None = Field(default=None, description=\"Last modification timestamp\")\n    tags: dict[str, str] = Field(default_factory=dict, description=\"AWS resource tags\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.ResourceTag","title":"<code>ResourceTag</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>AWS resource tag for cost allocation and resource management.</p> Source code in <code>agentcore_cli/models/base.py</code> Python<pre><code>class ResourceTag(BaseAgentCoreModel):\n    \"\"\"AWS resource tag for cost allocation and resource management.\"\"\"\n\n    key: str = Field(description=\"Tag key (case-sensitive)\")\n    value: str = Field(description=\"Tag value\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.ServerProtocolType","title":"<code>ServerProtocolType</code>","text":"<p>               Bases: <code>StrEnum</code></p> <p>Server protocol type for AgentCore runtimes.</p> <p>Defines the communication protocol the agent runtime uses: - HTTP: Standard HTTP protocol for REST API communication - MCP: Model Context Protocol for advanced agent interactions</p> Source code in <code>agentcore_cli/models/base.py</code> Python<pre><code>class ServerProtocolType(StrEnum):\n    \"\"\"Server protocol type for AgentCore runtimes.\n\n    Defines the communication protocol the agent runtime uses:\n    - HTTP: Standard HTTP protocol for REST API communication\n    - MCP: Model Context Protocol for advanced agent interactions\n    \"\"\"\n\n    HTTP = \"HTTP\"\n    MCP = \"MCP\"\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.SyncConfig","title":"<code>SyncConfig</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Configuration for cloud sync behavior.</p> Source code in <code>agentcore_cli/models/config.py</code> Python<pre><code>class SyncConfig(BaseAgentCoreModel):\n    \"\"\"Configuration for cloud sync behavior.\"\"\"\n\n    cloud_config_enabled: bool = Field(default=False, description=\"Whether cloud config is enabled\")\n    auto_sync_enabled: bool = Field(default=True, description=\"Whether auto-sync is enabled\")\n    parameter_store_prefix: str = Field(default=\"/agentcore\", description=\"Parameter Store prefix\")\n    last_full_sync: datetime | None = Field(default=None, description=\"Last full sync timestamp\")\n    sync_interval_minutes: int = Field(default=60, description=\"Sync interval in minutes when auto-sync is enabled\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.SyncStatus","title":"<code>SyncStatus</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Status of configuration synchronization.</p> Source code in <code>agentcore_cli/models/responses.py</code> Python<pre><code>class SyncStatus(BaseAgentCoreModel):\n    \"\"\"Status of configuration synchronization.\"\"\"\n\n    environment: str = Field(description=\"Environment name\")\n    cloud_config_enabled: bool = Field(description=\"Whether cloud config is enabled\")\n    auto_sync_enabled: bool = Field(description=\"Whether auto-sync is enabled\")\n    last_sync: datetime | None = Field(default=None, description=\"Last sync timestamp\")\n    in_sync: bool = Field(description=\"Whether local and cloud are in sync\")\n    drift_details: dict[str, dict[str, list[str]]] | None = Field(default=None, description=\"Drift details\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.UpdateAgentRuntimeInput","title":"<code>UpdateAgentRuntimeInput</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Input for updating an agent runtime.</p> <p>Updates create a new immutable version. Maps to AWS update_agent_runtime API.</p> Source code in <code>agentcore_cli/models/inputs.py</code> Python<pre><code>class UpdateAgentRuntimeInput(BaseAgentCoreModel):\n    \"\"\"Input for updating an agent runtime.\n\n    Updates create a new immutable version. Maps to AWS update_agent_runtime API.\n    \"\"\"\n\n    agent_runtime_id: str = Field(description=\"Agent runtime ID to update\")\n\n    # Optional update parameters - at least one must be provided\n    description: str | None = Field(default=None, description=\"Updated description\")\n    container_uri: str | None = Field(default=None, description=\"New container URI\")\n    role_arn: str | None = Field(default=None, description=\"New IAM execution role ARN\")\n    network_mode: NetworkModeType | None = Field(default=None, description=\"New network mode\")\n    protocol: ServerProtocolType | None = Field(default=None, description=\"New protocol type\")\n    environment_variables: dict[str, str] | None = Field(default=None, description=\"Updated environment variables\")\n    client_token: str | None = Field(default=None, description=\"Client token for idempotency\")\n\n    @model_validator(mode=\"after\")\n    def validate_at_least_one_update(cls, model):\n        \"\"\"Ensure at least one field is being updated.\"\"\"\n        update_fields = [\n            model.description,\n            model.container_uri,\n            model.role_arn,\n            model.network_mode,\n            model.protocol,\n            model.environment_variables,\n        ]\n        if not any(field is not None for field in update_fields):\n            raise ValueError(\"At least one field must be provided for update\")\n        return model\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.UpdateAgentRuntimeInput.validate_at_least_one_update","title":"<code>validate_at_least_one_update(model)</code>","text":"<p>Ensure at least one field is being updated.</p> Source code in <code>agentcore_cli/models/inputs.py</code> Python<pre><code>@model_validator(mode=\"after\")\ndef validate_at_least_one_update(cls, model):\n    \"\"\"Ensure at least one field is being updated.\"\"\"\n    update_fields = [\n        model.description,\n        model.container_uri,\n        model.role_arn,\n        model.network_mode,\n        model.protocol,\n        model.environment_variables,\n    ]\n    if not any(field is not None for field in update_fields):\n        raise ValueError(\"At least one field must be provided for update\")\n    return model\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.UpdateEndpointInput","title":"<code>UpdateEndpointInput</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Input for updating an agent runtime endpoint.</p> <p>Maps to AWS update_agent_runtime_endpoint API parameters.</p> Source code in <code>agentcore_cli/models/inputs.py</code> Python<pre><code>class UpdateEndpointInput(BaseAgentCoreModel):\n    \"\"\"Input for updating an agent runtime endpoint.\n\n    Maps to AWS update_agent_runtime_endpoint API parameters.\n    \"\"\"\n\n    agent_runtime_id: str = Field(description=\"Agent runtime ID\")\n    endpoint_name: str = Field(description=\"Endpoint name to update\")\n    target_version: str = Field(description=\"New runtime version to point endpoint to\")\n    description: str | None = Field(default=None, description=\"Updated description\")\n    client_token: str | None = Field(default=None, description=\"Client token for idempotency\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/#agentcore_cli.models.WorkloadIdentity","title":"<code>WorkloadIdentity</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Workload identity details for AgentCore runtime.</p> Source code in <code>agentcore_cli/models/runtime.py</code> Python<pre><code>class WorkloadIdentity(BaseAgentCoreModel):\n    \"\"\"Workload identity details for AgentCore runtime.\"\"\"\n\n    workload_identity_arn: str = Field(description=\"Workload identity ARN\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/adapters/","title":"agentcore_cli.models.adapters","text":""},{"location":"reference/agentcore_cli/models/adapters/#agentcore_cli.models.adapters","title":"<code>agentcore_cli.models.adapters</code>","text":"<p>Adapter models for AgentCore Platform CLI.</p> <p>This module provides adapter classes to convert between AWS API responses and our internal model structures.</p>"},{"location":"reference/agentcore_cli/models/adapters/#agentcore_cli.models.adapters.AgentRuntimeResponseAdapter","title":"<code>AgentRuntimeResponseAdapter</code>","text":"<p>Helper class to convert AWS API responses to our model structures.</p> Source code in <code>agentcore_cli/models/adapters.py</code> Python<pre><code>class AgentRuntimeResponseAdapter:\n    \"\"\"Helper class to convert AWS API responses to our model structures.\"\"\"\n\n    @staticmethod\n    def from_aws_response(response: Any) -&gt; AgentRuntime:\n        \"\"\"Convert AWS API response to AgentRuntime model.\"\"\"\n        # Extract container URI\n        container_uri = response.get(\"agentRuntimeArtifact\", {}).get(\"containerConfiguration\", {}).get(\"containerUri\")\n\n        # Determine network mode\n        network_mode = NetworkModeType(\n            response.get(\"networkConfiguration\", {}).get(\"networkMode\", NetworkModeType.PUBLIC)\n        )\n\n        # Determine protocol\n        protocol = ServerProtocolType(\n            response.get(\"protocolConfiguration\", {}).get(\"serverProtocol\", ServerProtocolType.HTTP)\n        )\n\n        # Extract region from ARN if available\n        region = \"us-east-1\"  # Default region\n        if \"agentRuntimeArn\" in response and response[\"agentRuntimeArn\"]:\n            arn_parts = response[\"agentRuntimeArn\"].split(\":\")\n            if len(arn_parts) &gt;= 4:\n                region = arn_parts[3]\n\n        # Extract workload identity\n        workload_identity = None\n        if \"workloadIdentityDetails\" in response and \"workloadIdentityArn\" in response[\"workloadIdentityDetails\"]:\n            workload_identity = WorkloadIdentity(\n                workload_identity_arn=response[\"workloadIdentityDetails\"][\"workloadIdentityArn\"]\n            )\n\n        # Determine status\n        status = AgentStatusType(response.get(\"status\", AgentStatusType.CREATING))\n\n        # Parse timestamps\n        created_at = response.get(\"createdAt\")\n        updated_at = response.get(\"updatedAt\")\n\n        # Extract version info\n        version_id = \"V1\"  # Default to V1 (AWS format)\n        if \"agentRuntimeVersion\" in response:\n            raw_version = response[\"agentRuntimeVersion\"]\n            # Ensure consistent format - AWS uses V1, V2, etc.\n            if raw_version and not raw_version.upper().startswith(\"V\"):\n                version_id = f\"V{raw_version}\"\n            else:\n                version_id = raw_version.upper() if raw_version else \"V1\"\n\n        # Parse ECR information from container URI\n        ecr_repository_name = \"\"\n        image_tag = \"latest\"\n\n        if container_uri:\n            # Parse container URI: registry/repository:tag\n            if \":\" in container_uri and \"/\" in container_uri:\n                repo_with_tag = container_uri.split(\"/\")[-1]  # Get last part after /\n                if \":\" in repo_with_tag:\n                    repo_name, tag = repo_with_tag.split(\":\", 1)\n                    ecr_repository_name = repo_name\n                    image_tag = tag\n                else:\n                    ecr_repository_name = repo_with_tag\n            elif \"/\" in container_uri:\n                # No tag specified, extract repository name\n                ecr_repository_name = container_uri.split(\"/\")[-1]\n\n        # Create runtime version\n        runtime_version = AgentRuntimeVersion(\n            version_id=version_id,\n            agent_runtime_id=response.get(\"agentRuntimeId\", \"\"),\n            ecr_repository_name=ecr_repository_name,\n            image_tag=image_tag,\n            status=status,\n            created_at=created_at,\n            network_mode=network_mode,\n            protocol=protocol,\n            environment_variables=response.get(\"environmentVariables\", {}),\n            execution_role_arn=response.get(\"roleArn\", \"\"),\n            failure_reason=response.get(\"failureReason\"),\n            updated_at=updated_at,\n        )\n\n        # Create default endpoint\n        default_endpoint = AgentRuntimeEndpoint(\n            name=\"DEFAULT\",\n            agent_runtime_id=response.get(\"agentRuntimeId\", \"\"),\n            target_version=version_id,\n            status=AgentEndpointStatusType.READY,\n            created_at=created_at,\n            endpoint_arn=f\"{response.get('agentRuntimeArn', '')}/endpoints/DEFAULT\"\n            if response.get(\"agentRuntimeArn\")\n            else None,\n        )\n\n        # Create and return AgentRuntime\n        return AgentRuntime(\n            name=response.get(\"agentRuntimeName\", \"\"),\n            agent_runtime_id=response.get(\"agentRuntimeId\", \"\"),\n            agent_runtime_arn=response.get(\"agentRuntimeArn\"),\n            description=response.get(\"description\"),\n            latest_version=version_id,\n            primary_ecr_repository=ecr_repository_name,\n            versions={version_id: runtime_version},\n            endpoints={\"DEFAULT\": default_endpoint},\n            created_at=created_at,\n            updated_at=updated_at,\n            region=region,\n            tags=response.get(\"tags\", {}),\n            workload_identity=workload_identity,\n        )\n\n    @staticmethod\n    def from_endpoint_response(\n        response: AgentEndpointTypeDef | GetAgentRuntimeEndpointResponseTypeDef, agent_runtime_id: str\n    ) -&gt; AgentRuntimeEndpoint:\n        \"\"\"Convert AWS API endpoint response to AgentRuntimeEndpoint model.\"\"\"\n        status = AgentEndpointStatusType(response.get(\"status\", AgentEndpointStatusType.READY))\n\n        return AgentRuntimeEndpoint(\n            name=response[\"name\"],\n            agent_runtime_id=agent_runtime_id,\n            target_version=response.get(\"targetVersion\", \"\"),\n            status=status,\n            description=response.get(\"description\", \"\"),\n            created_at=response[\"createdAt\"],\n            # Handle potential datetime conversion\n            updated_at=response[\"lastUpdatedAt\"],\n            endpoint_arn=response.get(\"agentRuntimeEndpointArn\"),\n            failure_reason=str(response.get(\"failureReason\")) if response.get(\"failureReason\") else None,\n            live_version=str(response.get(\"liveVersion\")) if response.get(\"liveVersion\") else None,\n        )\n</code></pre>"},{"location":"reference/agentcore_cli/models/adapters/#agentcore_cli.models.adapters.AgentRuntimeResponseAdapter.from_aws_response","title":"<code>from_aws_response(response)</code>  <code>staticmethod</code>","text":"<p>Convert AWS API response to AgentRuntime model.</p> Source code in <code>agentcore_cli/models/adapters.py</code> Python<pre><code>@staticmethod\ndef from_aws_response(response: Any) -&gt; AgentRuntime:\n    \"\"\"Convert AWS API response to AgentRuntime model.\"\"\"\n    # Extract container URI\n    container_uri = response.get(\"agentRuntimeArtifact\", {}).get(\"containerConfiguration\", {}).get(\"containerUri\")\n\n    # Determine network mode\n    network_mode = NetworkModeType(\n        response.get(\"networkConfiguration\", {}).get(\"networkMode\", NetworkModeType.PUBLIC)\n    )\n\n    # Determine protocol\n    protocol = ServerProtocolType(\n        response.get(\"protocolConfiguration\", {}).get(\"serverProtocol\", ServerProtocolType.HTTP)\n    )\n\n    # Extract region from ARN if available\n    region = \"us-east-1\"  # Default region\n    if \"agentRuntimeArn\" in response and response[\"agentRuntimeArn\"]:\n        arn_parts = response[\"agentRuntimeArn\"].split(\":\")\n        if len(arn_parts) &gt;= 4:\n            region = arn_parts[3]\n\n    # Extract workload identity\n    workload_identity = None\n    if \"workloadIdentityDetails\" in response and \"workloadIdentityArn\" in response[\"workloadIdentityDetails\"]:\n        workload_identity = WorkloadIdentity(\n            workload_identity_arn=response[\"workloadIdentityDetails\"][\"workloadIdentityArn\"]\n        )\n\n    # Determine status\n    status = AgentStatusType(response.get(\"status\", AgentStatusType.CREATING))\n\n    # Parse timestamps\n    created_at = response.get(\"createdAt\")\n    updated_at = response.get(\"updatedAt\")\n\n    # Extract version info\n    version_id = \"V1\"  # Default to V1 (AWS format)\n    if \"agentRuntimeVersion\" in response:\n        raw_version = response[\"agentRuntimeVersion\"]\n        # Ensure consistent format - AWS uses V1, V2, etc.\n        if raw_version and not raw_version.upper().startswith(\"V\"):\n            version_id = f\"V{raw_version}\"\n        else:\n            version_id = raw_version.upper() if raw_version else \"V1\"\n\n    # Parse ECR information from container URI\n    ecr_repository_name = \"\"\n    image_tag = \"latest\"\n\n    if container_uri:\n        # Parse container URI: registry/repository:tag\n        if \":\" in container_uri and \"/\" in container_uri:\n            repo_with_tag = container_uri.split(\"/\")[-1]  # Get last part after /\n            if \":\" in repo_with_tag:\n                repo_name, tag = repo_with_tag.split(\":\", 1)\n                ecr_repository_name = repo_name\n                image_tag = tag\n            else:\n                ecr_repository_name = repo_with_tag\n        elif \"/\" in container_uri:\n            # No tag specified, extract repository name\n            ecr_repository_name = container_uri.split(\"/\")[-1]\n\n    # Create runtime version\n    runtime_version = AgentRuntimeVersion(\n        version_id=version_id,\n        agent_runtime_id=response.get(\"agentRuntimeId\", \"\"),\n        ecr_repository_name=ecr_repository_name,\n        image_tag=image_tag,\n        status=status,\n        created_at=created_at,\n        network_mode=network_mode,\n        protocol=protocol,\n        environment_variables=response.get(\"environmentVariables\", {}),\n        execution_role_arn=response.get(\"roleArn\", \"\"),\n        failure_reason=response.get(\"failureReason\"),\n        updated_at=updated_at,\n    )\n\n    # Create default endpoint\n    default_endpoint = AgentRuntimeEndpoint(\n        name=\"DEFAULT\",\n        agent_runtime_id=response.get(\"agentRuntimeId\", \"\"),\n        target_version=version_id,\n        status=AgentEndpointStatusType.READY,\n        created_at=created_at,\n        endpoint_arn=f\"{response.get('agentRuntimeArn', '')}/endpoints/DEFAULT\"\n        if response.get(\"agentRuntimeArn\")\n        else None,\n    )\n\n    # Create and return AgentRuntime\n    return AgentRuntime(\n        name=response.get(\"agentRuntimeName\", \"\"),\n        agent_runtime_id=response.get(\"agentRuntimeId\", \"\"),\n        agent_runtime_arn=response.get(\"agentRuntimeArn\"),\n        description=response.get(\"description\"),\n        latest_version=version_id,\n        primary_ecr_repository=ecr_repository_name,\n        versions={version_id: runtime_version},\n        endpoints={\"DEFAULT\": default_endpoint},\n        created_at=created_at,\n        updated_at=updated_at,\n        region=region,\n        tags=response.get(\"tags\", {}),\n        workload_identity=workload_identity,\n    )\n</code></pre>"},{"location":"reference/agentcore_cli/models/adapters/#agentcore_cli.models.adapters.AgentRuntimeResponseAdapter.from_endpoint_response","title":"<code>from_endpoint_response(response, agent_runtime_id)</code>  <code>staticmethod</code>","text":"<p>Convert AWS API endpoint response to AgentRuntimeEndpoint model.</p> Source code in <code>agentcore_cli/models/adapters.py</code> Python<pre><code>@staticmethod\ndef from_endpoint_response(\n    response: AgentEndpointTypeDef | GetAgentRuntimeEndpointResponseTypeDef, agent_runtime_id: str\n) -&gt; AgentRuntimeEndpoint:\n    \"\"\"Convert AWS API endpoint response to AgentRuntimeEndpoint model.\"\"\"\n    status = AgentEndpointStatusType(response.get(\"status\", AgentEndpointStatusType.READY))\n\n    return AgentRuntimeEndpoint(\n        name=response[\"name\"],\n        agent_runtime_id=agent_runtime_id,\n        target_version=response.get(\"targetVersion\", \"\"),\n        status=status,\n        description=response.get(\"description\", \"\"),\n        created_at=response[\"createdAt\"],\n        # Handle potential datetime conversion\n        updated_at=response[\"lastUpdatedAt\"],\n        endpoint_arn=response.get(\"agentRuntimeEndpointArn\"),\n        failure_reason=str(response.get(\"failureReason\")) if response.get(\"failureReason\") else None,\n        live_version=str(response.get(\"liveVersion\")) if response.get(\"liveVersion\") else None,\n    )\n</code></pre>"},{"location":"reference/agentcore_cli/models/base/","title":"agentcore_cli.models.base","text":""},{"location":"reference/agentcore_cli/models/base/#agentcore_cli.models.base","title":"<code>agentcore_cli.models.base</code>","text":"<p>Base models for AgentCore Platform CLI.</p> <p>This module defines base classes and enums used throughout the AgentCore CLI models. All enums align with AWS Bedrock AgentCore API specifications.</p>"},{"location":"reference/agentcore_cli/models/base/#agentcore_cli.models.base.AgentEndpointStatusType","title":"<code>AgentEndpointStatusType</code>","text":"<p>               Bases: <code>StrEnum</code></p> <p>Status of an agent runtime endpoint.</p> <p>Endpoints go through these states during their lifecycle. Unlike runtimes, endpoints can be updated to point to different versions.</p> Source code in <code>agentcore_cli/models/base.py</code> Python<pre><code>class AgentEndpointStatusType(StrEnum):\n    \"\"\"Status of an agent runtime endpoint.\n\n    Endpoints go through these states during their lifecycle.\n    Unlike runtimes, endpoints can be updated to point to different versions.\n    \"\"\"\n\n    CREATING = \"CREATING\"\n    CREATE_FAILED = \"CREATE_FAILED\"\n    UPDATING = \"UPDATING\"\n    UPDATE_FAILED = \"UPDATE_FAILED\"\n    READY = \"READY\"\n    DELETING = \"DELETING\"\n</code></pre>"},{"location":"reference/agentcore_cli/models/base/#agentcore_cli.models.base.AgentStatusType","title":"<code>AgentStatusType</code>","text":"<p>               Bases: <code>StrEnum</code></p> <p>Status of an agent runtime.</p> <p>These statuses reflect the lifecycle of an AWS AgentCore runtime. Runtimes transition through these states during creation, updates, and deletion.</p> Source code in <code>agentcore_cli/models/base.py</code> Python<pre><code>class AgentStatusType(StrEnum):\n    \"\"\"Status of an agent runtime.\n\n    These statuses reflect the lifecycle of an AWS AgentCore runtime.\n    Runtimes transition through these states during creation, updates, and deletion.\n    \"\"\"\n\n    CREATING = \"CREATING\"\n    CREATE_FAILED = \"CREATE_FAILED\"\n    UPDATING = \"UPDATING\"\n    UPDATE_FAILED = \"UPDATE_FAILED\"\n    READY = \"READY\"\n    DELETING = \"DELETING\"\n</code></pre>"},{"location":"reference/agentcore_cli/models/base/#agentcore_cli.models.base.BaseAgentCoreModel","title":"<code>BaseAgentCoreModel</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base model with common configuration for all AgentCore models.</p> <p>Provides strict validation and consistent behavior across all models. All AgentCore CLI models inherit from this base class.</p> Source code in <code>agentcore_cli/models/base.py</code> Python<pre><code>class BaseAgentCoreModel(BaseModel):\n    \"\"\"Base model with common configuration for all AgentCore models.\n\n    Provides strict validation and consistent behavior across all models.\n    All AgentCore CLI models inherit from this base class.\n    \"\"\"\n\n    model_config = ConfigDict(\n        extra=\"forbid\",  # Forbid extra attributes for strict AWS API alignment\n        validate_default=True,  # Validate default values\n        validate_assignment=True,  # Validate attribute assignments\n        str_strip_whitespace=True,  # Strip whitespace from string values\n        use_enum_values=True,  # Use enum values for JSON serialization\n        arbitrary_types_allowed=True,  # Allow datetime and other complex types\n    )\n</code></pre>"},{"location":"reference/agentcore_cli/models/base/#agentcore_cli.models.base.NetworkModeType","title":"<code>NetworkModeType</code>","text":"<p>               Bases: <code>StrEnum</code></p> <p>Network mode for AgentCore runtimes.</p> <p>Defines how the agent runtime is exposed within AWS networking: - PUBLIC: Runtime is accessible from the internet via public endpoints - PRIVATE: Runtime is only accessible within VPC (future AWS enhancement)</p> Source code in <code>agentcore_cli/models/base.py</code> Python<pre><code>class NetworkModeType(StrEnum):\n    \"\"\"Network mode for AgentCore runtimes.\n\n    Defines how the agent runtime is exposed within AWS networking:\n    - PUBLIC: Runtime is accessible from the internet via public endpoints\n    - PRIVATE: Runtime is only accessible within VPC (future AWS enhancement)\n    \"\"\"\n\n    PUBLIC = \"PUBLIC\"\n</code></pre>"},{"location":"reference/agentcore_cli/models/base/#agentcore_cli.models.base.ResourceBase","title":"<code>ResourceBase</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Base class for all AWS resource models.</p> <p>Provides common fields that all AWS resources share: region, timestamps, and tags for resource management.</p> Source code in <code>agentcore_cli/models/base.py</code> Python<pre><code>class ResourceBase(BaseAgentCoreModel):\n    \"\"\"Base class for all AWS resource models.\n\n    Provides common fields that all AWS resources share:\n    region, timestamps, and tags for resource management.\n    \"\"\"\n\n    region: str = Field(description=\"AWS region where this resource exists\")\n    created_at: datetime | None = Field(default=None, description=\"Resource creation timestamp\")\n    updated_at: datetime | None = Field(default=None, description=\"Last modification timestamp\")\n    tags: dict[str, str] = Field(default_factory=dict, description=\"AWS resource tags\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/base/#agentcore_cli.models.base.ResourceTag","title":"<code>ResourceTag</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>AWS resource tag for cost allocation and resource management.</p> Source code in <code>agentcore_cli/models/base.py</code> Python<pre><code>class ResourceTag(BaseAgentCoreModel):\n    \"\"\"AWS resource tag for cost allocation and resource management.\"\"\"\n\n    key: str = Field(description=\"Tag key (case-sensitive)\")\n    value: str = Field(description=\"Tag value\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/base/#agentcore_cli.models.base.ServerProtocolType","title":"<code>ServerProtocolType</code>","text":"<p>               Bases: <code>StrEnum</code></p> <p>Server protocol type for AgentCore runtimes.</p> <p>Defines the communication protocol the agent runtime uses: - HTTP: Standard HTTP protocol for REST API communication - MCP: Model Context Protocol for advanced agent interactions</p> Source code in <code>agentcore_cli/models/base.py</code> Python<pre><code>class ServerProtocolType(StrEnum):\n    \"\"\"Server protocol type for AgentCore runtimes.\n\n    Defines the communication protocol the agent runtime uses:\n    - HTTP: Standard HTTP protocol for REST API communication\n    - MCP: Model Context Protocol for advanced agent interactions\n    \"\"\"\n\n    HTTP = \"HTTP\"\n    MCP = \"MCP\"\n</code></pre>"},{"location":"reference/agentcore_cli/models/config/","title":"agentcore_cli.models.config","text":""},{"location":"reference/agentcore_cli/models/config/#agentcore_cli.models.config","title":"<code>agentcore_cli.models.config</code>","text":"<p>Configuration models for AgentCore Platform CLI.</p> <p>This module defines the configuration models used to manage environments and settings.</p> <p>Model Hierarchy Alignment with AWS Bedrock AgentCore:</p> <ol> <li>Environment-First Design:</li> <li>Each environment owns its agent runtimes and exists in a specific AWS region</li> <li>Aligns with AWS reality where runtimes are region-specific resources</li> <li> <p>No cross-region runtime sharing (follows AWS patterns)</p> </li> <li> <p>ECR Integration:</p> </li> <li>Global ECR repositories can be shared across environments</li> <li>Each AgentRuntimeVersion references a specific ECR repository + image tag</li> <li> <p>Full container URIs are constructed dynamically from repository + tag</p> </li> <li> <p>Versioning Model:</p> </li> <li>AgentRuntimes contain immutable versions (V1, V2, etc.)</li> <li>Each update creates a new version with complete configuration</li> <li> <p>DEFAULT endpoint automatically points to latest version (AWS behavior)</p> </li> <li> <p>Validation:</p> </li> <li>Cross-reference validation ensures ECR repository references exist</li> <li>Region consistency validation for runtime placement</li> <li>Environment isolation with proper resource ownership</li> </ol> <p>This design eliminates the complexity of global runtimes with environment mappings and creates a clean, maintainable structure that scales across multiple environments.</p>"},{"location":"reference/agentcore_cli/models/config/#agentcore_cli.models.config.AgentCoreConfig","title":"<code>AgentCoreConfig</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Root configuration for AgentCore CLI.</p> <p>This configuration uses an environment-first approach where each environment owns its agent runtimes. This design aligns with AWS AgentCore where: - Runtimes exist in specific regions - Environments represent deployment targets (dev/staging/prod) - Each environment can have different versions and endpoints</p> Source code in <code>agentcore_cli/models/config.py</code> Python<pre><code>class AgentCoreConfig(BaseAgentCoreModel):\n    \"\"\"Root configuration for AgentCore CLI.\n\n    This configuration uses an environment-first approach where each environment\n    owns its agent runtimes. This design aligns with AWS AgentCore where:\n    - Runtimes exist in specific regions\n    - Environments represent deployment targets (dev/staging/prod)\n    - Each environment can have different versions and endpoints\n    \"\"\"\n\n    # Environment management\n    current_environment: str = Field(default=\"dev\", description=\"Currently active environment\")\n    environments: dict[str, EnvironmentConfig] = Field(\n        default_factory=dict, description=\"Environment configurations by name\"\n    )\n\n    # Global resources (shared across environments)\n    global_resources: GlobalResourceConfig = Field(\n        default_factory=GlobalResourceConfig, description=\"Resources shared across environments\"\n    )\n\n    # File path for configuration\n    config_path: str | None = Field(default=None, description=\"Path to the configuration file\")\n\n    model_config = ConfigDict(extra=\"allow\", json_encoders={datetime: lambda v: v.isoformat() if v else None})\n\n    @model_validator(mode=\"after\")\n    def ensure_current_environment_exists(cls, model):\n        \"\"\"Ensure the current environment exists.\"\"\"\n        if model.current_environment not in model.environments:\n            # Create default environment\n            model.environments[model.current_environment] = EnvironmentConfig(\n                name=model.current_environment,\n                region=\"us-east-1\",  # Default region\n                created_at=datetime.now(),\n            )\n        return model\n\n    @model_validator(mode=\"after\")\n    def validate_ecr_repository_references(cls, model):\n        \"\"\"Validate that all ECR repository references exist in global_resources.ecr_repositories.\"\"\"\n        available_repos = set(model.global_resources.ecr_repositories.keys())\n\n        for env_name, env_config in model.environments.items():\n            for runtime_name, runtime in env_config.agent_runtimes.items():\n                # Validate primary ECR repository\n                if runtime.primary_ecr_repository not in available_repos:\n                    raise ValueError(\n                        f\"Runtime '{runtime_name}' in environment '{env_name}' references \"\n                        f\"ECR repository '{runtime.primary_ecr_repository}' which does not exist \"\n                        f\"in global_resources.ecr_repositories. Available repositories: {sorted(available_repos)}\"\n                    )\n\n                # Validate ECR repository references in all versions\n                for version_id, version in runtime.versions.items():\n                    if version.ecr_repository_name not in available_repos:\n                        raise ValueError(\n                            f\"Version '{version_id}' of runtime '{runtime_name}' in environment '{env_name}' \"\n                            f\"references ECR repository '{version.ecr_repository_name}' which does not exist \"\n                            f\"in global_resources.ecr_repositories. Available repositories: {sorted(available_repos)}\"\n                        )\n\n        return model\n\n    def get_current_env(self) -&gt; EnvironmentConfig:\n        \"\"\"Get the currently active environment configuration.\"\"\"\n        return self.environments[self.current_environment]\n\n    def get_agent_runtime(self, agent_name: str, environment: str | None = None) -&gt; \"AgentRuntime | None\":\n        \"\"\"Get an agent runtime from the specified or current environment.\n\n        Args:\n            agent_name: Name of the agent runtime\n            environment: Environment name, or None for current environment\n\n        Returns:\n            AgentRuntime instance or None if not found\n        \"\"\"\n        env_name = environment or self.current_environment\n        if env_name not in self.environments:\n            return None\n\n        env_config = self.environments[env_name]\n        return env_config.agent_runtimes.get(agent_name)\n\n    def list_all_agent_runtimes(self) -&gt; dict[str, list[str]]:\n        \"\"\"List all agent runtimes across all environments.\n\n        Returns:\n            Dict mapping environment names to lists of agent runtime names\n        \"\"\"\n        return {env_name: list(env_config.agent_runtimes.keys()) for env_name, env_config in self.environments.items()}\n\n    def get_ecr_repository(self, repository_name: str) -&gt; \"ECRRepository | None\":\n        \"\"\"Get an ECR repository by name.\n\n        Args:\n            repository_name: Name of the ECR repository\n\n        Returns:\n            ECRRepository instance or None if not found\n        \"\"\"\n        # Validate repository name\n        is_valid, error_msg = validate_repo_name(repository_name)\n        if not is_valid:\n            # Log warning but don't raise exception to maintain backward compatibility\n            from loguru import logger\n\n            logger.warning(f\"Invalid repository name '{repository_name}': {error_msg}\")\n            return None\n\n        return self.global_resources.ecr_repositories.get(repository_name)\n\n    def get_runtime_version_container_uri(\n        self, agent_name: str, version_id: str, environment: str | None = None\n    ) -&gt; str | None:\n        \"\"\"Get the full container URI for a specific runtime version.\n\n        Args:\n            agent_name: Name of the agent runtime\n            version_id: Version identifier\n            environment: Environment name, or None for current environment\n\n        Returns:\n            Full container URI or None if not found\n        \"\"\"\n        runtime = self.get_agent_runtime(agent_name, environment)\n        if not runtime or version_id not in runtime.versions:\n            return None\n\n        version = runtime.versions[version_id]\n        ecr_repo = self.get_ecr_repository(version.ecr_repository_name)\n        if not ecr_repo:\n            return None\n\n        return version.get_container_uri(ecr_repo)\n</code></pre>"},{"location":"reference/agentcore_cli/models/config/#agentcore_cli.models.config.AgentCoreConfig.ensure_current_environment_exists","title":"<code>ensure_current_environment_exists(model)</code>","text":"<p>Ensure the current environment exists.</p> Source code in <code>agentcore_cli/models/config.py</code> Python<pre><code>@model_validator(mode=\"after\")\ndef ensure_current_environment_exists(cls, model):\n    \"\"\"Ensure the current environment exists.\"\"\"\n    if model.current_environment not in model.environments:\n        # Create default environment\n        model.environments[model.current_environment] = EnvironmentConfig(\n            name=model.current_environment,\n            region=\"us-east-1\",  # Default region\n            created_at=datetime.now(),\n        )\n    return model\n</code></pre>"},{"location":"reference/agentcore_cli/models/config/#agentcore_cli.models.config.AgentCoreConfig.get_agent_runtime","title":"<code>get_agent_runtime(agent_name, environment=None)</code>","text":"<p>Get an agent runtime from the specified or current environment.</p> <p>Parameters:</p> Name Type Description Default <code>agent_name</code> <code>str</code> <p>Name of the agent runtime</p> required <code>environment</code> <code>str | None</code> <p>Environment name, or None for current environment</p> <code>None</code> <p>Returns:</p> Type Description <code>AgentRuntime | None</code> <p>AgentRuntime instance or None if not found</p> Source code in <code>agentcore_cli/models/config.py</code> Python<pre><code>def get_agent_runtime(self, agent_name: str, environment: str | None = None) -&gt; \"AgentRuntime | None\":\n    \"\"\"Get an agent runtime from the specified or current environment.\n\n    Args:\n        agent_name: Name of the agent runtime\n        environment: Environment name, or None for current environment\n\n    Returns:\n        AgentRuntime instance or None if not found\n    \"\"\"\n    env_name = environment or self.current_environment\n    if env_name not in self.environments:\n        return None\n\n    env_config = self.environments[env_name]\n    return env_config.agent_runtimes.get(agent_name)\n</code></pre>"},{"location":"reference/agentcore_cli/models/config/#agentcore_cli.models.config.AgentCoreConfig.get_current_env","title":"<code>get_current_env()</code>","text":"<p>Get the currently active environment configuration.</p> Source code in <code>agentcore_cli/models/config.py</code> Python<pre><code>def get_current_env(self) -&gt; EnvironmentConfig:\n    \"\"\"Get the currently active environment configuration.\"\"\"\n    return self.environments[self.current_environment]\n</code></pre>"},{"location":"reference/agentcore_cli/models/config/#agentcore_cli.models.config.AgentCoreConfig.get_ecr_repository","title":"<code>get_ecr_repository(repository_name)</code>","text":"<p>Get an ECR repository by name.</p> <p>Parameters:</p> Name Type Description Default <code>repository_name</code> <code>str</code> <p>Name of the ECR repository</p> required <p>Returns:</p> Type Description <code>ECRRepository | None</code> <p>ECRRepository instance or None if not found</p> Source code in <code>agentcore_cli/models/config.py</code> Python<pre><code>def get_ecr_repository(self, repository_name: str) -&gt; \"ECRRepository | None\":\n    \"\"\"Get an ECR repository by name.\n\n    Args:\n        repository_name: Name of the ECR repository\n\n    Returns:\n        ECRRepository instance or None if not found\n    \"\"\"\n    # Validate repository name\n    is_valid, error_msg = validate_repo_name(repository_name)\n    if not is_valid:\n        # Log warning but don't raise exception to maintain backward compatibility\n        from loguru import logger\n\n        logger.warning(f\"Invalid repository name '{repository_name}': {error_msg}\")\n        return None\n\n    return self.global_resources.ecr_repositories.get(repository_name)\n</code></pre>"},{"location":"reference/agentcore_cli/models/config/#agentcore_cli.models.config.AgentCoreConfig.get_runtime_version_container_uri","title":"<code>get_runtime_version_container_uri(agent_name, version_id, environment=None)</code>","text":"<p>Get the full container URI for a specific runtime version.</p> <p>Parameters:</p> Name Type Description Default <code>agent_name</code> <code>str</code> <p>Name of the agent runtime</p> required <code>version_id</code> <code>str</code> <p>Version identifier</p> required <code>environment</code> <code>str | None</code> <p>Environment name, or None for current environment</p> <code>None</code> <p>Returns:</p> Type Description <code>str | None</code> <p>Full container URI or None if not found</p> Source code in <code>agentcore_cli/models/config.py</code> Python<pre><code>def get_runtime_version_container_uri(\n    self, agent_name: str, version_id: str, environment: str | None = None\n) -&gt; str | None:\n    \"\"\"Get the full container URI for a specific runtime version.\n\n    Args:\n        agent_name: Name of the agent runtime\n        version_id: Version identifier\n        environment: Environment name, or None for current environment\n\n    Returns:\n        Full container URI or None if not found\n    \"\"\"\n    runtime = self.get_agent_runtime(agent_name, environment)\n    if not runtime or version_id not in runtime.versions:\n        return None\n\n    version = runtime.versions[version_id]\n    ecr_repo = self.get_ecr_repository(version.ecr_repository_name)\n    if not ecr_repo:\n        return None\n\n    return version.get_container_uri(ecr_repo)\n</code></pre>"},{"location":"reference/agentcore_cli/models/config/#agentcore_cli.models.config.AgentCoreConfig.list_all_agent_runtimes","title":"<code>list_all_agent_runtimes()</code>","text":"<p>List all agent runtimes across all environments.</p> <p>Returns:</p> Type Description <code>dict[str, list[str]]</code> <p>Dict mapping environment names to lists of agent runtime names</p> Source code in <code>agentcore_cli/models/config.py</code> Python<pre><code>def list_all_agent_runtimes(self) -&gt; dict[str, list[str]]:\n    \"\"\"List all agent runtimes across all environments.\n\n    Returns:\n        Dict mapping environment names to lists of agent runtime names\n    \"\"\"\n    return {env_name: list(env_config.agent_runtimes.keys()) for env_name, env_config in self.environments.items()}\n</code></pre>"},{"location":"reference/agentcore_cli/models/config/#agentcore_cli.models.config.AgentCoreConfig.validate_ecr_repository_references","title":"<code>validate_ecr_repository_references(model)</code>","text":"<p>Validate that all ECR repository references exist in global_resources.ecr_repositories.</p> Source code in <code>agentcore_cli/models/config.py</code> Python<pre><code>@model_validator(mode=\"after\")\ndef validate_ecr_repository_references(cls, model):\n    \"\"\"Validate that all ECR repository references exist in global_resources.ecr_repositories.\"\"\"\n    available_repos = set(model.global_resources.ecr_repositories.keys())\n\n    for env_name, env_config in model.environments.items():\n        for runtime_name, runtime in env_config.agent_runtimes.items():\n            # Validate primary ECR repository\n            if runtime.primary_ecr_repository not in available_repos:\n                raise ValueError(\n                    f\"Runtime '{runtime_name}' in environment '{env_name}' references \"\n                    f\"ECR repository '{runtime.primary_ecr_repository}' which does not exist \"\n                    f\"in global_resources.ecr_repositories. Available repositories: {sorted(available_repos)}\"\n                )\n\n            # Validate ECR repository references in all versions\n            for version_id, version in runtime.versions.items():\n                if version.ecr_repository_name not in available_repos:\n                    raise ValueError(\n                        f\"Version '{version_id}' of runtime '{runtime_name}' in environment '{env_name}' \"\n                        f\"references ECR repository '{version.ecr_repository_name}' which does not exist \"\n                        f\"in global_resources.ecr_repositories. Available repositories: {sorted(available_repos)}\"\n                    )\n\n    return model\n</code></pre>"},{"location":"reference/agentcore_cli/models/config/#agentcore_cli.models.config.EnvironmentConfig","title":"<code>EnvironmentConfig</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Configuration for a specific environment (dev, staging, prod).</p> <p>Each environment owns its agent runtimes and exists in a specific AWS region. This design aligns with AWS AgentCore where runtimes are region-specific resources.</p> Source code in <code>agentcore_cli/models/config.py</code> Python<pre><code>class EnvironmentConfig(BaseAgentCoreModel):\n    \"\"\"Configuration for a specific environment (dev, staging, prod).\n\n    Each environment owns its agent runtimes and exists in a specific AWS region.\n    This design aligns with AWS AgentCore where runtimes are region-specific resources.\n    \"\"\"\n\n    name: str = Field(description=\"Environment name (e.g., 'dev', 'staging', 'prod')\")\n    region: str = Field(description=\"AWS region for this environment and all its agent runtimes\")\n\n    # Agent runtimes owned by this environment\n    agent_runtimes: dict[str, \"AgentRuntime\"] = Field(\n        default_factory=dict, description=\"Agent runtimes deployed in this environment, keyed by runtime name\"\n    )\n\n    # Default agent for this environment\n    default_agent_runtime: str | None = Field(\n        default=None, description=\"Default agent runtime name to use for operations (must exist in agent_runtimes)\"\n    )\n\n    # Environment-specific settings\n    environment_variables: dict[str, str] = Field(\n        default_factory=dict, description=\"Default environment variables for all runtimes in this environment\"\n    )\n\n    # Auth configuration for this environment\n    cognito: CognitoConfig | None = Field(default=None, description=\"Cognito configuration for this environment\")\n\n    # Metadata\n    created_at: datetime | None = Field(default=None, description=\"When this environment was created\")\n    updated_at: datetime | None = Field(default=None, description=\"When this environment was last updated\")\n\n    @model_validator(mode=\"after\")\n    def set_creation_time(cls, model):\n        \"\"\"Set creation time if not set.\"\"\"\n        if model.created_at is None:\n            model.created_at = datetime.now()\n        return model\n\n    @model_validator(mode=\"after\")\n    def validate_default_agent(cls, model):\n        \"\"\"Validate that default_agent_runtime exists in agent_runtimes.\"\"\"\n        if model.default_agent_runtime:\n            if model.default_agent_runtime not in model.agent_runtimes:\n                available_runtimes = list(model.agent_runtimes.keys())\n                raise ValueError(\n                    f\"default_agent_runtime '{model.default_agent_runtime}' does not exist in agent_runtimes. \"\n                    f\"Available runtimes: {available_runtimes}\"\n                )\n        return model\n\n    @model_validator(mode=\"after\")\n    def validate_runtime_regions(cls, model):\n        \"\"\"Ensure all agent runtimes in this environment match the environment's region.\"\"\"\n        for runtime_name, runtime in model.agent_runtimes.items():\n            if hasattr(runtime, \"region\") and runtime.region != model.region:\n                raise ValueError(\n                    f\"Agent runtime '{runtime_name}' is in region '{runtime.region}' \"\n                    f\"but environment '{model.name}' is in region '{model.region}'. \"\n                    f\"All runtimes in an environment must be in the same region.\"\n                )\n        return model\n\n    def get_agent_endpoint(self, agent_runtime_name: str, endpoint_name: str | None = None) -&gt; tuple[str, str] | None:\n        \"\"\"Get the agent runtime and endpoint for invocation.\n\n        Args:\n            agent_runtime_name: Name of the agent runtime\n            endpoint_name: Specific endpoint name, or None to use DEFAULT\n\n        Returns:\n            Tuple of (runtime_name, endpoint_name) or None if not found\n        \"\"\"\n        if agent_runtime_name not in self.agent_runtimes:\n            return None\n\n        runtime = self.agent_runtimes[agent_runtime_name]\n        target_endpoint = endpoint_name or \"DEFAULT\"\n\n        if target_endpoint not in runtime.endpoints:\n            return None\n\n        return (agent_runtime_name, target_endpoint)\n</code></pre>"},{"location":"reference/agentcore_cli/models/config/#agentcore_cli.models.config.EnvironmentConfig.get_agent_endpoint","title":"<code>get_agent_endpoint(agent_runtime_name, endpoint_name=None)</code>","text":"<p>Get the agent runtime and endpoint for invocation.</p> <p>Parameters:</p> Name Type Description Default <code>agent_runtime_name</code> <code>str</code> <p>Name of the agent runtime</p> required <code>endpoint_name</code> <code>str | None</code> <p>Specific endpoint name, or None to use DEFAULT</p> <code>None</code> <p>Returns:</p> Type Description <code>tuple[str, str] | None</code> <p>Tuple of (runtime_name, endpoint_name) or None if not found</p> Source code in <code>agentcore_cli/models/config.py</code> Python<pre><code>def get_agent_endpoint(self, agent_runtime_name: str, endpoint_name: str | None = None) -&gt; tuple[str, str] | None:\n    \"\"\"Get the agent runtime and endpoint for invocation.\n\n    Args:\n        agent_runtime_name: Name of the agent runtime\n        endpoint_name: Specific endpoint name, or None to use DEFAULT\n\n    Returns:\n        Tuple of (runtime_name, endpoint_name) or None if not found\n    \"\"\"\n    if agent_runtime_name not in self.agent_runtimes:\n        return None\n\n    runtime = self.agent_runtimes[agent_runtime_name]\n    target_endpoint = endpoint_name or \"DEFAULT\"\n\n    if target_endpoint not in runtime.endpoints:\n        return None\n\n    return (agent_runtime_name, target_endpoint)\n</code></pre>"},{"location":"reference/agentcore_cli/models/config/#agentcore_cli.models.config.EnvironmentConfig.set_creation_time","title":"<code>set_creation_time(model)</code>","text":"<p>Set creation time if not set.</p> Source code in <code>agentcore_cli/models/config.py</code> Python<pre><code>@model_validator(mode=\"after\")\ndef set_creation_time(cls, model):\n    \"\"\"Set creation time if not set.\"\"\"\n    if model.created_at is None:\n        model.created_at = datetime.now()\n    return model\n</code></pre>"},{"location":"reference/agentcore_cli/models/config/#agentcore_cli.models.config.EnvironmentConfig.validate_default_agent","title":"<code>validate_default_agent(model)</code>","text":"<p>Validate that default_agent_runtime exists in agent_runtimes.</p> Source code in <code>agentcore_cli/models/config.py</code> Python<pre><code>@model_validator(mode=\"after\")\ndef validate_default_agent(cls, model):\n    \"\"\"Validate that default_agent_runtime exists in agent_runtimes.\"\"\"\n    if model.default_agent_runtime:\n        if model.default_agent_runtime not in model.agent_runtimes:\n            available_runtimes = list(model.agent_runtimes.keys())\n            raise ValueError(\n                f\"default_agent_runtime '{model.default_agent_runtime}' does not exist in agent_runtimes. \"\n                f\"Available runtimes: {available_runtimes}\"\n            )\n    return model\n</code></pre>"},{"location":"reference/agentcore_cli/models/config/#agentcore_cli.models.config.EnvironmentConfig.validate_runtime_regions","title":"<code>validate_runtime_regions(model)</code>","text":"<p>Ensure all agent runtimes in this environment match the environment's region.</p> Source code in <code>agentcore_cli/models/config.py</code> Python<pre><code>@model_validator(mode=\"after\")\ndef validate_runtime_regions(cls, model):\n    \"\"\"Ensure all agent runtimes in this environment match the environment's region.\"\"\"\n    for runtime_name, runtime in model.agent_runtimes.items():\n        if hasattr(runtime, \"region\") and runtime.region != model.region:\n            raise ValueError(\n                f\"Agent runtime '{runtime_name}' is in region '{runtime.region}' \"\n                f\"but environment '{model.name}' is in region '{model.region}'. \"\n                f\"All runtimes in an environment must be in the same region.\"\n            )\n    return model\n</code></pre>"},{"location":"reference/agentcore_cli/models/config/#agentcore_cli.models.config.GlobalResourceConfig","title":"<code>GlobalResourceConfig</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Global resources shared across environments.</p> Source code in <code>agentcore_cli/models/config.py</code> Python<pre><code>class GlobalResourceConfig(BaseAgentCoreModel):\n    \"\"\"Global resources shared across environments.\"\"\"\n\n    # ECR repositories (can be shared across environments)\n    ecr_repositories: dict[str, \"ECRRepository\"] = Field(default_factory=dict, description=\"ECR repositories by name\")\n\n    # IAM roles (can be shared across environments)\n    iam_roles: dict[str, \"IAMRoleConfig\"] = Field(default_factory=dict, description=\"IAM roles by name\")\n\n    # Sync configuration\n    sync_config: SyncConfig = Field(default_factory=SyncConfig, description=\"Sync configuration\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/config/#agentcore_cli.models.config.SyncConfig","title":"<code>SyncConfig</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Configuration for cloud sync behavior.</p> Source code in <code>agentcore_cli/models/config.py</code> Python<pre><code>class SyncConfig(BaseAgentCoreModel):\n    \"\"\"Configuration for cloud sync behavior.\"\"\"\n\n    cloud_config_enabled: bool = Field(default=False, description=\"Whether cloud config is enabled\")\n    auto_sync_enabled: bool = Field(default=True, description=\"Whether auto-sync is enabled\")\n    parameter_store_prefix: str = Field(default=\"/agentcore\", description=\"Parameter Store prefix\")\n    last_full_sync: datetime | None = Field(default=None, description=\"Last full sync timestamp\")\n    sync_interval_minutes: int = Field(default=60, description=\"Sync interval in minutes when auto-sync is enabled\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/inputs/","title":"agentcore_cli.models.inputs","text":""},{"location":"reference/agentcore_cli/models/inputs/#agentcore_cli.models.inputs","title":"<code>agentcore_cli.models.inputs</code>","text":"<p>Input models for AgentCore Platform CLI.</p> <p>This module defines input models for CLI commands and API interactions. All models align with AWS Bedrock AgentCore API requirements.</p>"},{"location":"reference/agentcore_cli/models/inputs/#agentcore_cli.models.inputs.ContainerBuildInput","title":"<code>ContainerBuildInput</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Input for building and pushing a container image to ECR.</p> Source code in <code>agentcore_cli/models/inputs.py</code> Python<pre><code>class ContainerBuildInput(BaseAgentCoreModel):\n    \"\"\"Input for building and pushing a container image to ECR.\"\"\"\n\n    ecr_repository_name: str = Field(description=\"ECR repository name (must exist in configuration)\")\n    image_tag: str = Field(default=\"latest\", description=\"Image tag to assign\")\n    dockerfile_path: str = Field(default=\"Dockerfile\", description=\"Path to Dockerfile\")\n    build_context: str = Field(default=\".\", description=\"Docker build context directory\")\n    build_args: dict[str, str] = Field(default_factory=dict, description=\"Docker build arguments\")\n    platform: str = Field(default=\"linux/arm64\", description=\"Target platform for the build\")\n    no_cache: bool = Field(default=False, description=\"Disable Docker build cache\")\n\n    @property\n    def dockerfile(self) -&gt; str:\n        \"\"\"Legacy property for backward compatibility.\"\"\"\n        return self.dockerfile_path\n</code></pre>"},{"location":"reference/agentcore_cli/models/inputs/#agentcore_cli.models.inputs.ContainerBuildInput.dockerfile","title":"<code>dockerfile</code>  <code>property</code>","text":"<p>Legacy property for backward compatibility.</p>"},{"location":"reference/agentcore_cli/models/inputs/#agentcore_cli.models.inputs.CreateAgentRuntimeInput","title":"<code>CreateAgentRuntimeInput</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Input for creating a new agent runtime.</p> <p>Maps directly to AWS create_agent_runtime API parameters.</p> Source code in <code>agentcore_cli/models/inputs.py</code> Python<pre><code>class CreateAgentRuntimeInput(BaseAgentCoreModel):\n    \"\"\"Input for creating a new agent runtime.\n\n    Maps directly to AWS create_agent_runtime API parameters.\n    \"\"\"\n\n    name: str = Field(description=\"Agent runtime name\")\n    container_uri: str = Field(description=\"Full ECR container URI including tag\")\n    role_arn: str = Field(description=\"IAM execution role ARN for the agent runtime\")\n\n    # Optional parameters\n    description: str | None = Field(default=None, description=\"Agent runtime description\")\n    network_mode: NetworkModeType = Field(default=NetworkModeType.PUBLIC, description=\"Network configuration mode\")\n    protocol: ServerProtocolType = Field(default=ServerProtocolType.HTTP, description=\"Server protocol type\")\n    environment_variables: dict[str, str] = Field(default_factory=dict, description=\"Runtime environment variables\")\n    client_token: str | None = Field(default=None, description=\"Client token for idempotency\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/inputs/#agentcore_cli.models.inputs.CreateEndpointInput","title":"<code>CreateEndpointInput</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Input for creating an agent runtime endpoint.</p> <p>Maps to AWS create_agent_runtime_endpoint API parameters.</p> Source code in <code>agentcore_cli/models/inputs.py</code> Python<pre><code>class CreateEndpointInput(BaseAgentCoreModel):\n    \"\"\"Input for creating an agent runtime endpoint.\n\n    Maps to AWS create_agent_runtime_endpoint API parameters.\n    \"\"\"\n\n    agent_runtime_id: str = Field(description=\"Agent runtime ID\")\n    name: str = Field(description=\"Endpoint name\")\n    target_version: str | None = Field(default=None, description=\"Specific runtime version (defaults to latest)\")\n    description: str | None = Field(default=None, description=\"Endpoint description\")\n    client_token: str | None = Field(default=None, description=\"Client token for idempotency\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/inputs/#agentcore_cli.models.inputs.EnvironmentInput","title":"<code>EnvironmentInput</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Input for environment operations.</p> Source code in <code>agentcore_cli/models/inputs.py</code> Python<pre><code>class EnvironmentInput(BaseAgentCoreModel):\n    \"\"\"Input for environment operations.\"\"\"\n\n    name: str = Field(description=\"Environment name\")\n    region: str | None = Field(default=None, description=\"AWS region for the environment\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/inputs/#agentcore_cli.models.inputs.InvokeAgentInput","title":"<code>InvokeAgentInput</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Input for invoking an agent runtime.</p> <p>Maps directly to AWS invoke_agent_runtime API requirements. The API requires a full ARN and qualifier (endpoint name).</p> Source code in <code>agentcore_cli/models/inputs.py</code> Python<pre><code>class InvokeAgentInput(BaseAgentCoreModel):\n    \"\"\"Input for invoking an agent runtime.\n\n    Maps directly to AWS invoke_agent_runtime API requirements.\n    The API requires a full ARN and qualifier (endpoint name).\n    \"\"\"\n\n    agent_runtime_arn: str = Field(description=\"Full ARN of the agent runtime to invoke\")\n    qualifier: str = Field(description=\"Endpoint name or version qualifier (e.g., 'DEFAULT', 'production')\")\n    runtime_session_id: str = Field(description=\"Session ID for the runtime invocation\")\n    prompt: str = Field(description=\"Prompt to send to the agent\")\n\n    # Additional fields for CLI convenience\n    environment: str | None = Field(default=None, description=\"Environment context (for CLI reference only)\")\n    agent_name: str | None = Field(default=None, description=\"Agent name (for CLI reference only)\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/inputs/#agentcore_cli.models.inputs.UpdateAgentRuntimeInput","title":"<code>UpdateAgentRuntimeInput</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Input for updating an agent runtime.</p> <p>Updates create a new immutable version. Maps to AWS update_agent_runtime API.</p> Source code in <code>agentcore_cli/models/inputs.py</code> Python<pre><code>class UpdateAgentRuntimeInput(BaseAgentCoreModel):\n    \"\"\"Input for updating an agent runtime.\n\n    Updates create a new immutable version. Maps to AWS update_agent_runtime API.\n    \"\"\"\n\n    agent_runtime_id: str = Field(description=\"Agent runtime ID to update\")\n\n    # Optional update parameters - at least one must be provided\n    description: str | None = Field(default=None, description=\"Updated description\")\n    container_uri: str | None = Field(default=None, description=\"New container URI\")\n    role_arn: str | None = Field(default=None, description=\"New IAM execution role ARN\")\n    network_mode: NetworkModeType | None = Field(default=None, description=\"New network mode\")\n    protocol: ServerProtocolType | None = Field(default=None, description=\"New protocol type\")\n    environment_variables: dict[str, str] | None = Field(default=None, description=\"Updated environment variables\")\n    client_token: str | None = Field(default=None, description=\"Client token for idempotency\")\n\n    @model_validator(mode=\"after\")\n    def validate_at_least_one_update(cls, model):\n        \"\"\"Ensure at least one field is being updated.\"\"\"\n        update_fields = [\n            model.description,\n            model.container_uri,\n            model.role_arn,\n            model.network_mode,\n            model.protocol,\n            model.environment_variables,\n        ]\n        if not any(field is not None for field in update_fields):\n            raise ValueError(\"At least one field must be provided for update\")\n        return model\n</code></pre>"},{"location":"reference/agentcore_cli/models/inputs/#agentcore_cli.models.inputs.UpdateAgentRuntimeInput.validate_at_least_one_update","title":"<code>validate_at_least_one_update(model)</code>","text":"<p>Ensure at least one field is being updated.</p> Source code in <code>agentcore_cli/models/inputs.py</code> Python<pre><code>@model_validator(mode=\"after\")\ndef validate_at_least_one_update(cls, model):\n    \"\"\"Ensure at least one field is being updated.\"\"\"\n    update_fields = [\n        model.description,\n        model.container_uri,\n        model.role_arn,\n        model.network_mode,\n        model.protocol,\n        model.environment_variables,\n    ]\n    if not any(field is not None for field in update_fields):\n        raise ValueError(\"At least one field must be provided for update\")\n    return model\n</code></pre>"},{"location":"reference/agentcore_cli/models/inputs/#agentcore_cli.models.inputs.UpdateEndpointInput","title":"<code>UpdateEndpointInput</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Input for updating an agent runtime endpoint.</p> <p>Maps to AWS update_agent_runtime_endpoint API parameters.</p> Source code in <code>agentcore_cli/models/inputs.py</code> Python<pre><code>class UpdateEndpointInput(BaseAgentCoreModel):\n    \"\"\"Input for updating an agent runtime endpoint.\n\n    Maps to AWS update_agent_runtime_endpoint API parameters.\n    \"\"\"\n\n    agent_runtime_id: str = Field(description=\"Agent runtime ID\")\n    endpoint_name: str = Field(description=\"Endpoint name to update\")\n    target_version: str = Field(description=\"New runtime version to point endpoint to\")\n    description: str | None = Field(default=None, description=\"Updated description\")\n    client_token: str | None = Field(default=None, description=\"Client token for idempotency\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/resources/","title":"agentcore_cli.models.resources","text":""},{"location":"reference/agentcore_cli/models/resources/#agentcore_cli.models.resources","title":"<code>agentcore_cli.models.resources</code>","text":"<p>Resource models for AgentCore Platform CLI.</p> <p>This module defines models for AWS resources like IAM roles, ECR repositories, and Cognito configurations.</p>"},{"location":"reference/agentcore_cli/models/resources/#agentcore_cli.models.resources.CognitoConfig","title":"<code>CognitoConfig</code>","text":"<p>               Bases: <code>ResourceBase</code></p> <p>Cognito user pool and identity pool configuration.</p> Source code in <code>agentcore_cli/models/resources.py</code> Python<pre><code>class CognitoConfig(ResourceBase):\n    \"\"\"Cognito user pool and identity pool configuration.\"\"\"\n\n    user_pool: CognitoUserPool | None = Field(default=None, description=\"User pool configuration\")\n    identity_pool: CognitoIdentityPool | None = Field(default=None, description=\"Identity pool configuration\")\n    last_sync: datetime | None = Field(default=None, description=\"Last sync timestamp\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/resources/#agentcore_cli.models.resources.CognitoIdentityPool","title":"<code>CognitoIdentityPool</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Cognito identity pool configuration.</p> Source code in <code>agentcore_cli/models/resources.py</code> Python<pre><code>class CognitoIdentityPool(BaseAgentCoreModel):\n    \"\"\"Cognito identity pool configuration.\"\"\"\n\n    identity_pool_id: str = Field(description=\"Identity pool ID\")\n    identity_pool_name: str = Field(description=\"Identity pool name\")\n    created_at: datetime | None = Field(default=None, description=\"Creation timestamp\")\n    allow_unauthenticated_identities: bool = Field(\n        default=False, description=\"Whether unauthenticated identities are allowed\"\n    )\n</code></pre>"},{"location":"reference/agentcore_cli/models/resources/#agentcore_cli.models.resources.CognitoUserPool","title":"<code>CognitoUserPool</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Cognito user pool configuration.</p> Source code in <code>agentcore_cli/models/resources.py</code> Python<pre><code>class CognitoUserPool(BaseAgentCoreModel):\n    \"\"\"Cognito user pool configuration.\"\"\"\n\n    user_pool_id: str = Field(description=\"User pool ID\")\n    user_pool_name: str = Field(description=\"User pool name\")\n    user_pool_arn: str | None = Field(default=None, description=\"User pool ARN\")\n    client_id: str | None = Field(default=None, description=\"App client ID\")\n    client_secret: str | None = Field(default=None, description=\"App client secret\")\n    created_at: datetime | None = Field(default=None, description=\"Creation timestamp\")\n    domain: str | None = Field(default=None, description=\"User pool domain\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/resources/#agentcore_cli.models.resources.ECRRepository","title":"<code>ECRRepository</code>","text":"<p>               Bases: <code>ResourceBase</code></p> <p>ECR repository configuration.</p> <p>Represents an Amazon ECR repository that can contain multiple image tags. Each AgentRuntimeVersion should reference this repository and specify an image tag.</p> Source code in <code>agentcore_cli/models/resources.py</code> Python<pre><code>class ECRRepository(ResourceBase):\n    \"\"\"ECR repository configuration.\n\n    Represents an Amazon ECR repository that can contain multiple image tags.\n    Each AgentRuntimeVersion should reference this repository and specify an image tag.\n    \"\"\"\n\n    name: str = Field(description=\"Repository name (e.g., 'my-chat-agent', 'my-data-processor')\")\n    registry_id: str = Field(description=\"AWS account ID that owns this repository\")\n    repository_uri: str = Field(\n        description=\"Full repository URI without image tag (e.g., '123456789.dkr.ecr.us-east-1.amazonaws.com/my-agent')\"\n    )\n\n    # Repository settings\n    image_scanning_config: bool = Field(default=True, description=\"Whether images are scanned on push\")\n    image_tag_mutability: str = Field(default=\"MUTABLE\", description=\"Image tag mutability: MUTABLE or IMMUTABLE\")\n    lifecycle_policy: dict[str, Any] | None = Field(default=None, description=\"Repository lifecycle policy\")\n\n    # Image tracking\n    available_tags: set[str] = Field(default_factory=set, description=\"Set of available image tags in this repository\")\n    last_push: datetime | None = Field(default=None, description=\"Last image push timestamp\")\n    last_sync: datetime | None = Field(default=None, description=\"Last sync timestamp with AWS\")\n\n    @property\n    def registry_url(self) -&gt; str:\n        \"\"\"Get the ECR registry URL (without repository name).\"\"\"\n        # Extract registry from repository_uri\n        # Format: registry_id.dkr.ecr.region.amazonaws.com/repo_name\n        if \"/\" in self.repository_uri:\n            return self.repository_uri.split(\"/\")[0]\n        return self.repository_uri\n\n    def get_image_uri(self, tag: str) -&gt; str:\n        \"\"\"Get the full container image URI for a specific tag.\n\n        Args:\n            tag: Image tag (e.g., 'v1', 'latest', 'prod-2024-01-15')\n\n        Returns:\n            Full container URI: registry/repository:tag\n        \"\"\"\n        return f\"{self.repository_uri}:{tag}\"\n\n    def validate_tag_exists(self, tag: str) -&gt; bool:\n        \"\"\"Check if an image tag exists in this repository.\"\"\"\n        return tag in self.available_tags\n\n    @field_validator(\"repository_uri\")\n    @classmethod\n    def validate_repository_uri(cls, v: str) -&gt; str:\n        \"\"\"Validate ECR repository URI format.\"\"\"\n        if not v:\n            raise ValueError(\"Repository URI cannot be empty\")\n\n        # Should match ECR pattern: account.dkr.ecr.region.amazonaws.com/repo-name\n        import re\n\n        ecr_pattern = r\"^[0-9]+\\.dkr\\.ecr\\.[a-z0-9-]+\\.amazonaws\\.com\\/[a-z0-9][a-z0-9._-]*$\"\n        if not re.match(ecr_pattern, v):\n            raise ValueError(\n                f\"Repository URI '{v}' does not match ECR format: account.dkr.ecr.region.amazonaws.com/repository-name\"\n            )\n\n        return v\n</code></pre>"},{"location":"reference/agentcore_cli/models/resources/#agentcore_cli.models.resources.ECRRepository.registry_url","title":"<code>registry_url</code>  <code>property</code>","text":"<p>Get the ECR registry URL (without repository name).</p>"},{"location":"reference/agentcore_cli/models/resources/#agentcore_cli.models.resources.ECRRepository.get_image_uri","title":"<code>get_image_uri(tag)</code>","text":"<p>Get the full container image URI for a specific tag.</p> <p>Parameters:</p> Name Type Description Default <code>tag</code> <code>str</code> <p>Image tag (e.g., 'v1', 'latest', 'prod-2024-01-15')</p> required <p>Returns:</p> Type Description <code>str</code> <p>Full container URI: registry/repository:tag</p> Source code in <code>agentcore_cli/models/resources.py</code> Python<pre><code>def get_image_uri(self, tag: str) -&gt; str:\n    \"\"\"Get the full container image URI for a specific tag.\n\n    Args:\n        tag: Image tag (e.g., 'v1', 'latest', 'prod-2024-01-15')\n\n    Returns:\n        Full container URI: registry/repository:tag\n    \"\"\"\n    return f\"{self.repository_uri}:{tag}\"\n</code></pre>"},{"location":"reference/agentcore_cli/models/resources/#agentcore_cli.models.resources.ECRRepository.validate_repository_uri","title":"<code>validate_repository_uri(v)</code>  <code>classmethod</code>","text":"<p>Validate ECR repository URI format.</p> Source code in <code>agentcore_cli/models/resources.py</code> Python<pre><code>@field_validator(\"repository_uri\")\n@classmethod\ndef validate_repository_uri(cls, v: str) -&gt; str:\n    \"\"\"Validate ECR repository URI format.\"\"\"\n    if not v:\n        raise ValueError(\"Repository URI cannot be empty\")\n\n    # Should match ECR pattern: account.dkr.ecr.region.amazonaws.com/repo-name\n    import re\n\n    ecr_pattern = r\"^[0-9]+\\.dkr\\.ecr\\.[a-z0-9-]+\\.amazonaws\\.com\\/[a-z0-9][a-z0-9._-]*$\"\n    if not re.match(ecr_pattern, v):\n        raise ValueError(\n            f\"Repository URI '{v}' does not match ECR format: account.dkr.ecr.region.amazonaws.com/repository-name\"\n        )\n\n    return v\n</code></pre>"},{"location":"reference/agentcore_cli/models/resources/#agentcore_cli.models.resources.ECRRepository.validate_tag_exists","title":"<code>validate_tag_exists(tag)</code>","text":"<p>Check if an image tag exists in this repository.</p> Source code in <code>agentcore_cli/models/resources.py</code> Python<pre><code>def validate_tag_exists(self, tag: str) -&gt; bool:\n    \"\"\"Check if an image tag exists in this repository.\"\"\"\n    return tag in self.available_tags\n</code></pre>"},{"location":"reference/agentcore_cli/models/resources/#agentcore_cli.models.resources.IAMRoleConfig","title":"<code>IAMRoleConfig</code>","text":"<p>               Bases: <code>ResourceBase</code></p> <p>IAM role configuration.</p> Source code in <code>agentcore_cli/models/resources.py</code> Python<pre><code>class IAMRoleConfig(ResourceBase):\n    \"\"\"IAM role configuration.\"\"\"\n\n    name: str = Field(description=\"Role name\")\n    arn: str = Field(description=\"Role ARN\")\n    path: str = Field(default=\"/\", description=\"Role path\")\n    description: str | None = Field(default=None, description=\"Role description\")\n    assume_role_policy_document: dict[str, Any] | None = Field(default=None, description=\"Assume role policy\")\n    last_sync: datetime | None = Field(default=None, description=\"Last sync timestamp with AWS\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/responses/","title":"agentcore_cli.models.responses","text":""},{"location":"reference/agentcore_cli/models/responses/#agentcore_cli.models.responses","title":"<code>agentcore_cli.models.responses</code>","text":"<p>Response models for AgentCore Platform CLI.</p> <p>This module defines models for responses from AgentCore operations and CLI commands.</p>"},{"location":"reference/agentcore_cli/models/responses/#agentcore_cli.models.responses.ActionResult","title":"<code>ActionResult</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Base model for CLI action results.</p> Source code in <code>agentcore_cli/models/responses.py</code> Python<pre><code>class ActionResult(BaseAgentCoreModel):\n    \"\"\"Base model for CLI action results.\"\"\"\n\n    success: bool = Field(description=\"Whether the action was successful\")\n    message: str = Field(description=\"Status message\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/responses/#agentcore_cli.models.responses.AgentCreationResult","title":"<code>AgentCreationResult</code>","text":"<p>               Bases: <code>ActionResult</code></p> <p>Result of agent creation.</p> Source code in <code>agentcore_cli/models/responses.py</code> Python<pre><code>class AgentCreationResult(ActionResult):\n    \"\"\"Result of agent creation.\"\"\"\n\n    agent_name: str = Field(description=\"Agent name\")\n    runtime_id: str | None = Field(default=None, description=\"Runtime ID\")\n    runtime_arn: str | None = Field(default=None, description=\"Runtime ARN\")\n    container_uri: str | None = Field(default=None, description=\"Container URI\")\n    role_arn: str | None = Field(default=None, description=\"IAM role ARN\")\n    environment: str = Field(description=\"Environment name\")\n    default_endpoint: str = Field(default=\"DEFAULT\", description=\"Default endpoint name\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/responses/#agentcore_cli.models.responses.AgentDeletionResult","title":"<code>AgentDeletionResult</code>","text":"<p>               Bases: <code>ActionResult</code></p> <p>Result of agent deletion.</p> Source code in <code>agentcore_cli/models/responses.py</code> Python<pre><code>class AgentDeletionResult(ActionResult):\n    \"\"\"Result of agent deletion.\"\"\"\n\n    agent_name: str = Field(description=\"Agent name\")\n    deleted_resources: list[str] = Field(default_factory=list, description=\"Deleted resources\")\n    environment: str = Field(description=\"Environment name\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/responses/#agentcore_cli.models.responses.AgentInvocationResponse","title":"<code>AgentInvocationResponse</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Response model for agent invocation.</p> <p>This model handles both streaming and non-streaming responses from the boto3 invoke_agent_runtime API.</p> Source code in <code>agentcore_cli/models/responses.py</code> Python<pre><code>class AgentInvocationResponse(BaseAgentCoreModel):\n    \"\"\"Response model for agent invocation.\n\n    This model handles both streaming and non-streaming responses from\n    the boto3 invoke_agent_runtime API.\n    \"\"\"\n\n    content_type: str | None = Field(default=None, description=\"Content type of the response\")\n    streaming: bool = Field(default=False, description=\"Whether response was streaming\")\n    session_id: str = Field(description=\"Session ID used for the invocation\")\n    agent_name: str = Field(description=\"Agent name that was invoked\")\n    endpoint_name: str = Field(description=\"Endpoint name that was used\")\n    timestamp: datetime = Field(default_factory=datetime.now, description=\"Timestamp of the invocation\")\n\n    # For streaming responses\n    stream_content: list[str] | None = Field(default=None, description=\"Collected content from streaming response\")\n\n    # For non-streaming responses\n    output: Any | None = Field(default=None, description=\"Response output object for non-streaming response\")\n\n    @classmethod\n    def from_streaming_response(\n        cls, response: Any, agent_name: str, endpoint_name: str, session_id: str\n    ) -&gt; \"AgentInvocationResponse\":\n        \"\"\"Create a response object from a streaming API response.\"\"\"\n        content = []\n\n        # Handle streaming response\n        if \"response\" in response and hasattr(response[\"response\"], \"iter_lines\"):\n            for line in response[\"response\"].iter_lines(chunk_size=1):\n                if line:\n                    line_text = line.decode(\"utf-8\")\n                    # Check for \"data: \" prefix\n                    if line_text.startswith(\"data: \"):\n                        line_text = line_text[6:]  # Remove the \"data: \" prefix\n                        content.append(line_text)\n\n        return cls(\n            content_type=response.get(\"contentType\"),\n            streaming=True,\n            session_id=session_id,\n            agent_name=agent_name,\n            endpoint_name=endpoint_name,\n            stream_content=content,\n        )\n\n    @classmethod\n    def from_nonstreaming_response(\n        cls, response: Any, agent_name: str, endpoint_name: str, session_id: str\n    ) -&gt; \"AgentInvocationResponse\":\n        \"\"\"Create a response object from a non-streaming API response.\"\"\"\n        try:\n            # Extract response body\n            response_body = None\n            if \"response\" in response:\n                if hasattr(response[\"response\"], \"read\"):\n                    response_body = response[\"response\"].read()\n                    if response_body:\n                        response_data = json.loads(response_body)\n                        output = response_data.get(\"output\", {})\n                    else:\n                        output = {}\n                else:\n                    output = response.get(\"response\", {})\n            else:\n                output = {}\n\n            return cls(\n                content_type=response.get(\"contentType\"),\n                streaming=False,\n                session_id=session_id,\n                agent_name=agent_name,\n                endpoint_name=endpoint_name,\n                output=output,\n            )\n\n        except Exception as e:\n            # Handle any parsing errors\n            return cls(\n                content_type=response.get(\"contentType\"),\n                streaming=False,\n                session_id=session_id,\n                agent_name=agent_name,\n                endpoint_name=endpoint_name,\n                output={\"error\": f\"Failed to parse response: {str(e)}\"},\n            )\n</code></pre>"},{"location":"reference/agentcore_cli/models/responses/#agentcore_cli.models.responses.AgentInvocationResponse.from_nonstreaming_response","title":"<code>from_nonstreaming_response(response, agent_name, endpoint_name, session_id)</code>  <code>classmethod</code>","text":"<p>Create a response object from a non-streaming API response.</p> Source code in <code>agentcore_cli/models/responses.py</code> Python<pre><code>@classmethod\ndef from_nonstreaming_response(\n    cls, response: Any, agent_name: str, endpoint_name: str, session_id: str\n) -&gt; \"AgentInvocationResponse\":\n    \"\"\"Create a response object from a non-streaming API response.\"\"\"\n    try:\n        # Extract response body\n        response_body = None\n        if \"response\" in response:\n            if hasattr(response[\"response\"], \"read\"):\n                response_body = response[\"response\"].read()\n                if response_body:\n                    response_data = json.loads(response_body)\n                    output = response_data.get(\"output\", {})\n                else:\n                    output = {}\n            else:\n                output = response.get(\"response\", {})\n        else:\n            output = {}\n\n        return cls(\n            content_type=response.get(\"contentType\"),\n            streaming=False,\n            session_id=session_id,\n            agent_name=agent_name,\n            endpoint_name=endpoint_name,\n            output=output,\n        )\n\n    except Exception as e:\n        # Handle any parsing errors\n        return cls(\n            content_type=response.get(\"contentType\"),\n            streaming=False,\n            session_id=session_id,\n            agent_name=agent_name,\n            endpoint_name=endpoint_name,\n            output={\"error\": f\"Failed to parse response: {str(e)}\"},\n        )\n</code></pre>"},{"location":"reference/agentcore_cli/models/responses/#agentcore_cli.models.responses.AgentInvocationResponse.from_streaming_response","title":"<code>from_streaming_response(response, agent_name, endpoint_name, session_id)</code>  <code>classmethod</code>","text":"<p>Create a response object from a streaming API response.</p> Source code in <code>agentcore_cli/models/responses.py</code> Python<pre><code>@classmethod\ndef from_streaming_response(\n    cls, response: Any, agent_name: str, endpoint_name: str, session_id: str\n) -&gt; \"AgentInvocationResponse\":\n    \"\"\"Create a response object from a streaming API response.\"\"\"\n    content = []\n\n    # Handle streaming response\n    if \"response\" in response and hasattr(response[\"response\"], \"iter_lines\"):\n        for line in response[\"response\"].iter_lines(chunk_size=1):\n            if line:\n                line_text = line.decode(\"utf-8\")\n                # Check for \"data: \" prefix\n                if line_text.startswith(\"data: \"):\n                    line_text = line_text[6:]  # Remove the \"data: \" prefix\n                    content.append(line_text)\n\n    return cls(\n        content_type=response.get(\"contentType\"),\n        streaming=True,\n        session_id=session_id,\n        agent_name=agent_name,\n        endpoint_name=endpoint_name,\n        stream_content=content,\n    )\n</code></pre>"},{"location":"reference/agentcore_cli/models/responses/#agentcore_cli.models.responses.AgentUpdateResult","title":"<code>AgentUpdateResult</code>","text":"<p>               Bases: <code>ActionResult</code></p> <p>Result of agent update.</p> Source code in <code>agentcore_cli/models/responses.py</code> Python<pre><code>class AgentUpdateResult(ActionResult):\n    \"\"\"Result of agent update.\"\"\"\n\n    agent_name: str = Field(description=\"Agent name\")\n    runtime_id: str = Field(description=\"Runtime ID\")\n    version: str = Field(description=\"New runtime version created\")\n    container_uri: str = Field(description=\"Container URI used\")\n    environment: str = Field(description=\"Environment name\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/responses/#agentcore_cli.models.responses.CloudSyncResult","title":"<code>CloudSyncResult</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Result of a cloud sync operation.</p> Source code in <code>agentcore_cli/models/responses.py</code> Python<pre><code>class CloudSyncResult(BaseAgentCoreModel):\n    \"\"\"Result of a cloud sync operation.\"\"\"\n\n    success: bool = Field(description=\"Whether the operation was successful\")\n    message: str = Field(description=\"Status message\")\n    environment: str = Field(description=\"Environment name\")\n    synced_items: dict[str, int] = Field(default_factory=dict, description=\"Count of synced items by type\")\n    errors: list[str] = Field(default_factory=list, description=\"Errors encountered during sync\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/responses/#agentcore_cli.models.responses.EndpointCreationResult","title":"<code>EndpointCreationResult</code>","text":"<p>               Bases: <code>ActionResult</code></p> <p>Result of endpoint creation.</p> Source code in <code>agentcore_cli/models/responses.py</code> Python<pre><code>class EndpointCreationResult(ActionResult):\n    \"\"\"Result of endpoint creation.\"\"\"\n\n    agent_name: str = Field(description=\"Agent name\")\n    runtime_id: str = Field(description=\"Runtime ID\")\n    endpoint_name: str = Field(description=\"Endpoint name\")\n    endpoint_arn: str | None = Field(default=None, description=\"Endpoint ARN\")\n    target_version: str = Field(description=\"Version the endpoint points to\")\n    environment: str | None = Field(default=None, description=\"Environment mapped to this endpoint\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/responses/#agentcore_cli.models.responses.EndpointUpdateResult","title":"<code>EndpointUpdateResult</code>","text":"<p>               Bases: <code>ActionResult</code></p> <p>Result of endpoint update.</p> Source code in <code>agentcore_cli/models/responses.py</code> Python<pre><code>class EndpointUpdateResult(ActionResult):\n    \"\"\"Result of endpoint update.\"\"\"\n\n    agent_name: str = Field(description=\"Agent name\")\n    runtime_id: str = Field(description=\"Runtime ID\")\n    endpoint_name: str = Field(description=\"Endpoint name\")\n    previous_version: str = Field(description=\"Previous version\")\n    new_version: str = Field(description=\"New version the endpoint points to\")\n    environment: str | None = Field(default=None, description=\"Environment mapped to this endpoint\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/responses/#agentcore_cli.models.responses.EnvironmentCreationResult","title":"<code>EnvironmentCreationResult</code>","text":"<p>               Bases: <code>ActionResult</code></p> <p>Result of environment creation.</p> Source code in <code>agentcore_cli/models/responses.py</code> Python<pre><code>class EnvironmentCreationResult(ActionResult):\n    \"\"\"Result of environment creation.\"\"\"\n\n    name: str = Field(description=\"Environment name\")\n    region: str = Field(description=\"AWS region\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/responses/#agentcore_cli.models.responses.EnvironmentDeletionResult","title":"<code>EnvironmentDeletionResult</code>","text":"<p>               Bases: <code>ActionResult</code></p> <p>Result of environment deletion.</p> Source code in <code>agentcore_cli/models/responses.py</code> Python<pre><code>class EnvironmentDeletionResult(ActionResult):\n    \"\"\"Result of environment deletion.\"\"\"\n\n    name: str = Field(description=\"Environment name\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/responses/#agentcore_cli.models.responses.ImageBuildResult","title":"<code>ImageBuildResult</code>","text":"<p>               Bases: <code>ActionResult</code></p> <p>Result of image build.</p> Source code in <code>agentcore_cli/models/responses.py</code> Python<pre><code>class ImageBuildResult(ActionResult):\n    \"\"\"Result of image build.\"\"\"\n\n    repo_name: str = Field(description=\"Repository name\")\n    tag: str = Field(description=\"Image tag\")\n    image_id: str | None = Field(default=None, description=\"Image ID\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/responses/#agentcore_cli.models.responses.SyncStatus","title":"<code>SyncStatus</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Status of configuration synchronization.</p> Source code in <code>agentcore_cli/models/responses.py</code> Python<pre><code>class SyncStatus(BaseAgentCoreModel):\n    \"\"\"Status of configuration synchronization.\"\"\"\n\n    environment: str = Field(description=\"Environment name\")\n    cloud_config_enabled: bool = Field(description=\"Whether cloud config is enabled\")\n    auto_sync_enabled: bool = Field(description=\"Whether auto-sync is enabled\")\n    last_sync: datetime | None = Field(default=None, description=\"Last sync timestamp\")\n    in_sync: bool = Field(description=\"Whether local and cloud are in sync\")\n    drift_details: dict[str, dict[str, list[str]]] | None = Field(default=None, description=\"Drift details\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/runtime/","title":"agentcore_cli.models.runtime","text":""},{"location":"reference/agentcore_cli/models/runtime/#agentcore_cli.models.runtime","title":"<code>agentcore_cli.models.runtime</code>","text":"<p>Runtime models for AgentCore Platform CLI.</p> <p>This module defines models related to agent runtimes, their versions, and endpoints.</p>"},{"location":"reference/agentcore_cli/models/runtime/#agentcore_cli.models.runtime.AgentRuntime","title":"<code>AgentRuntime</code>","text":"<p>               Bases: <code>ResourceBase</code></p> <p>Configuration for an agent runtime.</p> <p>Agent runtimes are associated with ECR repositories where their container images are stored. Each runtime can have multiple versions, each pointing to different image tags.</p> Source code in <code>agentcore_cli/models/runtime.py</code> Python<pre><code>class AgentRuntime(ResourceBase):\n    \"\"\"Configuration for an agent runtime.\n\n    Agent runtimes are associated with ECR repositories where their container images are stored.\n    Each runtime can have multiple versions, each pointing to different image tags.\n    \"\"\"\n\n    name: str = Field(description=\"Agent runtime name\")\n    agent_runtime_id: str = Field(description=\"Runtime ID\")\n    agent_runtime_arn: str | None = Field(default=None, description=\"Runtime ARN\")\n    description: str | None = Field(default=None, description=\"Runtime description\")\n    latest_version: str = Field(description=\"Latest version identifier\")\n\n    # ECR Repository association\n    primary_ecr_repository: str = Field(\n        description=\"Primary ECR repository name for this runtime (must exist in global_resources.ecr_repositories)\"\n    )\n\n    # Runtime components\n    versions: dict[str, AgentRuntimeVersion] = Field(\n        default_factory=dict, description=\"Available versions by version identifier\"\n    )\n    endpoints: dict[str, AgentRuntimeEndpoint] = Field(default_factory=dict, description=\"Available endpoints by name\")\n    workload_identity: WorkloadIdentity | None = Field(default=None, description=\"Workload identity details\")\n    authorizer_config: AuthorizerConfig | None = Field(default=None, description=\"Authorizer configuration\")\n\n    @field_validator(\"name\")\n    @classmethod\n    def validate_runtime_name(cls, v: str) -&gt; str:\n        \"\"\"Validate agent runtime name format.\"\"\"\n        if not v:\n            raise ValueError(\"Agent runtime name cannot be empty\")\n\n        if not v[0].isalpha():\n            raise ValueError(\"Agent runtime name must start with a letter\")\n\n        if not all(c.isalnum() or c == \"-\" for c in v):\n            raise ValueError(\"Agent runtime name can only contain alphanumeric characters and hyphens\")\n\n        if len(v) &lt; 3 or len(v) &gt; 63:\n            raise ValueError(\"Agent runtime name must be between 3 and 63 characters\")\n\n        return v\n\n    @model_validator(mode=\"after\")\n    def validate_version_repository_consistency(cls, model):\n        \"\"\"Validate that all versions reference valid ECR repositories.\"\"\"\n        for version_id, version in model.versions.items():\n            # All versions should typically use the same repository as the runtime's primary repository\n            # This is a soft validation - you could have versions in different repositories\n            if version.ecr_repository_name != model.primary_ecr_repository:\n                import warnings\n\n                warnings.warn(\n                    f\"Version '{version_id}' uses repository '{version.ecr_repository_name}' \"\n                    f\"but runtime '{model.name}' primary repository is '{model.primary_ecr_repository}'\"\n                )\n        return model\n\n    @model_validator(mode=\"after\")\n    def ensure_default_endpoint(cls, model):\n        \"\"\"Ensure the DEFAULT endpoint exists and points to latest version.\n\n        Note: AWS AgentCore automatically creates and manages the DEFAULT endpoint.\n        This validator ensures our model reflects this AWS behavior.\n        \"\"\"\n        if model.versions and model.latest_version in model.versions:\n            # If we have versions but no DEFAULT endpoint info, create a placeholder\n            # representing what AWS would automatically create\n            if \"DEFAULT\" not in model.endpoints:\n                model.endpoints[\"DEFAULT\"] = AgentRuntimeEndpoint(\n                    name=\"DEFAULT\",\n                    agent_runtime_id=model.agent_runtime_id,\n                    target_version=model.latest_version,\n                    status=AgentEndpointStatusType.READY,\n                    created_at=model.created_at,\n                    description=\"Default endpoint (automatically managed by AWS)\",\n                )\n            else:\n                # Ensure DEFAULT endpoint points to latest version (AWS behavior)\n                default_endpoint = model.endpoints[\"DEFAULT\"]\n                if default_endpoint.target_version != model.latest_version:\n                    default_endpoint.target_version = model.latest_version\n        return model\n\n    def get_version_container_uri(self, version_id: str, ecr_repository: \"ECRRepository\") -&gt; str | None:\n        \"\"\"Get the full container URI for a specific version.\n\n        Args:\n            version_id: Version identifier\n            ecr_repository: ECR repository configuration\n\n        Returns:\n            Full container URI or None if version not found\n        \"\"\"\n        if version_id not in self.versions:\n            return None\n\n        version = self.versions[version_id]\n        return version.get_container_uri(ecr_repository)\n</code></pre>"},{"location":"reference/agentcore_cli/models/runtime/#agentcore_cli.models.runtime.AgentRuntime.ensure_default_endpoint","title":"<code>ensure_default_endpoint(model)</code>","text":"<p>Ensure the DEFAULT endpoint exists and points to latest version.</p> <p>Note: AWS AgentCore automatically creates and manages the DEFAULT endpoint. This validator ensures our model reflects this AWS behavior.</p> Source code in <code>agentcore_cli/models/runtime.py</code> Python<pre><code>@model_validator(mode=\"after\")\ndef ensure_default_endpoint(cls, model):\n    \"\"\"Ensure the DEFAULT endpoint exists and points to latest version.\n\n    Note: AWS AgentCore automatically creates and manages the DEFAULT endpoint.\n    This validator ensures our model reflects this AWS behavior.\n    \"\"\"\n    if model.versions and model.latest_version in model.versions:\n        # If we have versions but no DEFAULT endpoint info, create a placeholder\n        # representing what AWS would automatically create\n        if \"DEFAULT\" not in model.endpoints:\n            model.endpoints[\"DEFAULT\"] = AgentRuntimeEndpoint(\n                name=\"DEFAULT\",\n                agent_runtime_id=model.agent_runtime_id,\n                target_version=model.latest_version,\n                status=AgentEndpointStatusType.READY,\n                created_at=model.created_at,\n                description=\"Default endpoint (automatically managed by AWS)\",\n            )\n        else:\n            # Ensure DEFAULT endpoint points to latest version (AWS behavior)\n            default_endpoint = model.endpoints[\"DEFAULT\"]\n            if default_endpoint.target_version != model.latest_version:\n                default_endpoint.target_version = model.latest_version\n    return model\n</code></pre>"},{"location":"reference/agentcore_cli/models/runtime/#agentcore_cli.models.runtime.AgentRuntime.get_version_container_uri","title":"<code>get_version_container_uri(version_id, ecr_repository)</code>","text":"<p>Get the full container URI for a specific version.</p> <p>Parameters:</p> Name Type Description Default <code>version_id</code> <code>str</code> <p>Version identifier</p> required <code>ecr_repository</code> <code>ECRRepository</code> <p>ECR repository configuration</p> required <p>Returns:</p> Type Description <code>str | None</code> <p>Full container URI or None if version not found</p> Source code in <code>agentcore_cli/models/runtime.py</code> Python<pre><code>def get_version_container_uri(self, version_id: str, ecr_repository: \"ECRRepository\") -&gt; str | None:\n    \"\"\"Get the full container URI for a specific version.\n\n    Args:\n        version_id: Version identifier\n        ecr_repository: ECR repository configuration\n\n    Returns:\n        Full container URI or None if version not found\n    \"\"\"\n    if version_id not in self.versions:\n        return None\n\n    version = self.versions[version_id]\n    return version.get_container_uri(ecr_repository)\n</code></pre>"},{"location":"reference/agentcore_cli/models/runtime/#agentcore_cli.models.runtime.AgentRuntime.validate_runtime_name","title":"<code>validate_runtime_name(v)</code>  <code>classmethod</code>","text":"<p>Validate agent runtime name format.</p> Source code in <code>agentcore_cli/models/runtime.py</code> Python<pre><code>@field_validator(\"name\")\n@classmethod\ndef validate_runtime_name(cls, v: str) -&gt; str:\n    \"\"\"Validate agent runtime name format.\"\"\"\n    if not v:\n        raise ValueError(\"Agent runtime name cannot be empty\")\n\n    if not v[0].isalpha():\n        raise ValueError(\"Agent runtime name must start with a letter\")\n\n    if not all(c.isalnum() or c == \"-\" for c in v):\n        raise ValueError(\"Agent runtime name can only contain alphanumeric characters and hyphens\")\n\n    if len(v) &lt; 3 or len(v) &gt; 63:\n        raise ValueError(\"Agent runtime name must be between 3 and 63 characters\")\n\n    return v\n</code></pre>"},{"location":"reference/agentcore_cli/models/runtime/#agentcore_cli.models.runtime.AgentRuntime.validate_version_repository_consistency","title":"<code>validate_version_repository_consistency(model)</code>","text":"<p>Validate that all versions reference valid ECR repositories.</p> Source code in <code>agentcore_cli/models/runtime.py</code> Python<pre><code>@model_validator(mode=\"after\")\ndef validate_version_repository_consistency(cls, model):\n    \"\"\"Validate that all versions reference valid ECR repositories.\"\"\"\n    for version_id, version in model.versions.items():\n        # All versions should typically use the same repository as the runtime's primary repository\n        # This is a soft validation - you could have versions in different repositories\n        if version.ecr_repository_name != model.primary_ecr_repository:\n            import warnings\n\n            warnings.warn(\n                f\"Version '{version_id}' uses repository '{version.ecr_repository_name}' \"\n                f\"but runtime '{model.name}' primary repository is '{model.primary_ecr_repository}'\"\n            )\n    return model\n</code></pre>"},{"location":"reference/agentcore_cli/models/runtime/#agentcore_cli.models.runtime.AgentRuntimeEndpoint","title":"<code>AgentRuntimeEndpoint</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>An endpoint for accessing a specific version of an agent runtime.</p> Source code in <code>agentcore_cli/models/runtime.py</code> Python<pre><code>class AgentRuntimeEndpoint(BaseAgentCoreModel):\n    \"\"\"An endpoint for accessing a specific version of an agent runtime.\"\"\"\n\n    name: str = Field(description=\"Endpoint name (e.g., 'DEFAULT', 'prod', 'dev')\")\n    agent_runtime_id: str = Field(description=\"Runtime ID this endpoint belongs to\")\n    target_version: str = Field(description=\"Version identifier this endpoint points to\")\n    status: AgentEndpointStatusType = Field(description=\"Current endpoint status\")\n    description: str | None = Field(default=None, description=\"Endpoint description\")\n    created_at: datetime | None = Field(default=None, description=\"When this endpoint was created\")\n    updated_at: datetime | None = Field(default=None, description=\"When this endpoint was last updated\")\n    endpoint_arn: str | None = Field(default=None, description=\"ARN of this endpoint\")\n    failure_reason: str | None = Field(\n        default=None, description=\"Reason for failure if status is CREATE_FAILED or UPDATE_FAILED\"\n    )\n    live_version: str | None = Field(default=None, description=\"Currently active version for this endpoint\")\n\n    @field_validator(\"name\")\n    @classmethod\n    def validate_endpoint_name(cls, v: str) -&gt; str:\n        \"\"\"Validate endpoint name format.\"\"\"\n        if not v:\n            raise ValueError(\"Endpoint name cannot be empty\")\n\n        if not v.isalnum() and not all(c.isalnum() or c == \"-\" for c in v):\n            raise ValueError(\"Endpoint name can only contain alphanumeric characters and hyphens\")\n\n        return v\n</code></pre>"},{"location":"reference/agentcore_cli/models/runtime/#agentcore_cli.models.runtime.AgentRuntimeEndpoint.validate_endpoint_name","title":"<code>validate_endpoint_name(v)</code>  <code>classmethod</code>","text":"<p>Validate endpoint name format.</p> Source code in <code>agentcore_cli/models/runtime.py</code> Python<pre><code>@field_validator(\"name\")\n@classmethod\ndef validate_endpoint_name(cls, v: str) -&gt; str:\n    \"\"\"Validate endpoint name format.\"\"\"\n    if not v:\n        raise ValueError(\"Endpoint name cannot be empty\")\n\n    if not v.isalnum() and not all(c.isalnum() or c == \"-\" for c in v):\n        raise ValueError(\"Endpoint name can only contain alphanumeric characters and hyphens\")\n\n    return v\n</code></pre>"},{"location":"reference/agentcore_cli/models/runtime/#agentcore_cli.models.runtime.AgentRuntimeVersion","title":"<code>AgentRuntimeVersion</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>A specific version of an agent runtime.</p> <p>Each version references a specific ECR repository and image tag. The container URI is constructed from the repository + tag combination.</p> Source code in <code>agentcore_cli/models/runtime.py</code> Python<pre><code>class AgentRuntimeVersion(BaseAgentCoreModel):\n    \"\"\"A specific version of an agent runtime.\n\n    Each version references a specific ECR repository and image tag.\n    The container URI is constructed from the repository + tag combination.\n    \"\"\"\n\n    version_id: str = Field(description=\"Version identifier (e.g., 'V1', 'V2')\")\n    agent_runtime_id: str = Field(description=\"Runtime ID this version belongs to\")\n\n    # ECR Image Reference\n    ecr_repository_name: str = Field(\n        description=\"Name of the ECR repository (must exist in global_resources.ecr_repositories)\"\n    )\n    image_tag: str = Field(\n        description=\"Docker image tag in the ECR repository (e.g., 'v1', 'latest', 'prod-2024-01-15')\"\n    )\n\n    # Runtime Configuration\n    status: AgentStatusType = Field(description=\"Status of this runtime version\")\n    created_at: datetime | None = Field(default=None, description=\"When this version was created\")\n    network_mode: NetworkModeType = Field(default=NetworkModeType.PUBLIC, description=\"Network mode for this version\")\n    protocol: ServerProtocolType = Field(default=ServerProtocolType.HTTP, description=\"Protocol type for this version\")\n    environment_variables: dict[str, str] = Field(\n        default_factory=dict, description=\"Environment variables for this version\"\n    )\n    execution_role_arn: str = Field(description=\"IAM role ARN used for this version\")\n    description: str | None = Field(default=None, description=\"Description of this version\")\n    failure_reason: str | None = Field(\n        default=None, description=\"Reason for failure if status is CREATE_FAILED or UPDATE_FAILED\"\n    )\n    updated_at: datetime | None = Field(default=None, description=\"When this version was last updated\")\n\n    model_config = ConfigDict(frozen=False)  # Allow updates for status changes, but versions are conceptually immutable\n\n    @property\n    def container_uri(self) -&gt; str:\n        \"\"\"Get the full container URI by combining repository and tag.\n\n        Note: This requires access to the ECR repository configuration to build the full URI.\n        Use get_container_uri() method with repository config for the complete URI.\n        \"\"\"\n        return f\"&lt;repository_uri&gt;:{self.image_tag}\"\n\n    def get_container_uri(self, ecr_repository: \"ECRRepository\") -&gt; str:\n        \"\"\"Get the full container URI using the ECR repository configuration.\n\n        Args:\n            ecr_repository: ECR repository configuration\n\n        Returns:\n            Full container URI: registry/repository:tag\n        \"\"\"\n        return ecr_repository.get_image_uri(self.image_tag)\n\n    @property\n    def short_version(self) -&gt; str:\n        \"\"\"Get a shortened version of the version ID for display.\"\"\"\n        # AWS AgentCore uses format like 'V1', 'V2', etc.\n        # Handle various possible formats for backward compatibility\n        if self.version_id.startswith(\"version-\"):\n            return \"V\" + self.version_id.replace(\"version-\", \"\")\n        elif self.version_id.lower().startswith(\"v\"):\n            return self.version_id.upper()\n        else:\n            # If it's just a number or other format, prefix with V\n            return f\"V{self.version_id}\"\n\n    @property\n    def is_immutable(self) -&gt; bool:\n        \"\"\"Check if this version is in an immutable state.\n\n        According to AWS documentation, versions are immutable once created,\n        but status can change during creation/update process.\n        \"\"\"\n        return self.status in {AgentStatusType.READY, AgentStatusType.CREATE_FAILED, AgentStatusType.UPDATE_FAILED}\n</code></pre>"},{"location":"reference/agentcore_cli/models/runtime/#agentcore_cli.models.runtime.AgentRuntimeVersion.container_uri","title":"<code>container_uri</code>  <code>property</code>","text":"<p>Get the full container URI by combining repository and tag.</p> <p>Note: This requires access to the ECR repository configuration to build the full URI. Use get_container_uri() method with repository config for the complete URI.</p>"},{"location":"reference/agentcore_cli/models/runtime/#agentcore_cli.models.runtime.AgentRuntimeVersion.is_immutable","title":"<code>is_immutable</code>  <code>property</code>","text":"<p>Check if this version is in an immutable state.</p> <p>According to AWS documentation, versions are immutable once created, but status can change during creation/update process.</p>"},{"location":"reference/agentcore_cli/models/runtime/#agentcore_cli.models.runtime.AgentRuntimeVersion.short_version","title":"<code>short_version</code>  <code>property</code>","text":"<p>Get a shortened version of the version ID for display.</p>"},{"location":"reference/agentcore_cli/models/runtime/#agentcore_cli.models.runtime.AgentRuntimeVersion.get_container_uri","title":"<code>get_container_uri(ecr_repository)</code>","text":"<p>Get the full container URI using the ECR repository configuration.</p> <p>Parameters:</p> Name Type Description Default <code>ecr_repository</code> <code>ECRRepository</code> <p>ECR repository configuration</p> required <p>Returns:</p> Type Description <code>str</code> <p>Full container URI: registry/repository:tag</p> Source code in <code>agentcore_cli/models/runtime.py</code> Python<pre><code>def get_container_uri(self, ecr_repository: \"ECRRepository\") -&gt; str:\n    \"\"\"Get the full container URI using the ECR repository configuration.\n\n    Args:\n        ecr_repository: ECR repository configuration\n\n    Returns:\n        Full container URI: registry/repository:tag\n    \"\"\"\n    return ecr_repository.get_image_uri(self.image_tag)\n</code></pre>"},{"location":"reference/agentcore_cli/models/runtime/#agentcore_cli.models.runtime.AuthorizerConfig","title":"<code>AuthorizerConfig</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Authorizer configuration for AgentCore runtime.</p> Source code in <code>agentcore_cli/models/runtime.py</code> Python<pre><code>class AuthorizerConfig(BaseAgentCoreModel):\n    \"\"\"Authorizer configuration for AgentCore runtime.\"\"\"\n\n    custom_jwt_authorizer: CustomJWTAuthorizer | None = Field(default=None, description=\"JWT authorizer configuration\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/runtime/#agentcore_cli.models.runtime.CustomJWTAuthorizer","title":"<code>CustomJWTAuthorizer</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>JWT authorizer configuration for AgentCore runtime.</p> Source code in <code>agentcore_cli/models/runtime.py</code> Python<pre><code>class CustomJWTAuthorizer(BaseAgentCoreModel):\n    \"\"\"JWT authorizer configuration for AgentCore runtime.\"\"\"\n\n    discovery_url: str = Field(description=\"Discovery URL for JWT validation\")\n    allowed_audience: list[str] = Field(default_factory=list, description=\"Allowed audiences\")\n    allowed_clients: list[str] = Field(default_factory=list, description=\"Allowed clients\")\n</code></pre>"},{"location":"reference/agentcore_cli/models/runtime/#agentcore_cli.models.runtime.WorkloadIdentity","title":"<code>WorkloadIdentity</code>","text":"<p>               Bases: <code>BaseAgentCoreModel</code></p> <p>Workload identity details for AgentCore runtime.</p> Source code in <code>agentcore_cli/models/runtime.py</code> Python<pre><code>class WorkloadIdentity(BaseAgentCoreModel):\n    \"\"\"Workload identity details for AgentCore runtime.\"\"\"\n\n    workload_identity_arn: str = Field(description=\"Workload identity ARN\")\n</code></pre>"},{"location":"reference/agentcore_cli/services/","title":"agentcore_cli.services","text":""},{"location":"reference/agentcore_cli/services/#agentcore_cli.services","title":"<code>agentcore_cli.services</code>","text":""},{"location":"reference/agentcore_cli/services/agentcore/","title":"agentcore_cli.services.agentcore","text":""},{"location":"reference/agentcore_cli/services/agentcore/#agentcore_cli.services.agentcore","title":"<code>agentcore_cli.services.agentcore</code>","text":"<p>AgentCore service operations for AgentCore Platform CLI.</p> <p>This module provides a service layer for AWS AgentCore operations using boto3 to create and manage agent runtimes, their versions, and endpoints.</p>"},{"location":"reference/agentcore_cli/services/agentcore/#agentcore_cli.services.agentcore.AgentCoreService","title":"<code>AgentCoreService</code>","text":"<p>Service for AWS AgentCore operations.</p> Source code in <code>agentcore_cli/services/agentcore.py</code> Python<pre><code>class AgentCoreService:\n    \"\"\"Service for AWS AgentCore operations.\"\"\"\n\n    def __init__(self, region: str, session: Session | None = None):\n        \"\"\"Initialize the AgentCore service.\n\n        Args:\n            region: AWS region for AgentCore operations.\n            session: Boto3 session to use. If None, creates a new session.\n        \"\"\"\n        self.region = region\n        self.session = session or Session(region_name=region)\n\n        # Initialize the boto3 clients\n        self.agentcore_control_client = self.session.client(\"bedrock-agentcore-control\", region_name=region)\n        self.agentcore_client = self.session.client(\"bedrock-agentcore\", region_name=region)\n\n    def create_agent_runtime(self, input_params: CreateAgentRuntimeInput) -&gt; AgentCreationResult:\n        \"\"\"Create an agent runtime.\n\n        Args:\n            input_params: Parameters for creating the agent runtime.\n\n        Returns:\n            AgentCreationResult: Result of the agent creation operation.\n        \"\"\"\n        try:\n            # Prepare the request parameters\n            create_params: dict[str, Any] = {\n                \"agentRuntimeName\": input_params.name,\n                \"agentRuntimeArtifact\": {\"containerConfiguration\": {\"containerUri\": input_params.container_uri}},\n                \"roleArn\": input_params.role_arn,\n                \"networkConfiguration\": {\"networkMode\": input_params.network_mode},\n                \"protocolConfiguration\": {\"serverProtocol\": input_params.protocol},\n            }\n\n            # Add optional parameters if provided\n            if input_params.description:\n                create_params[\"description\"] = input_params.description\n\n            if input_params.environment_variables:\n                create_params[\"environmentVariables\"] = input_params.environment_variables\n\n            if input_params.client_token:\n                create_params[\"clientToken\"] = input_params.client_token\n\n            # Call the API to create the agent runtime\n            logger.info(f\"Creating agent runtime '{input_params.name}'...\")\n            response = self.agentcore_control_client.create_agent_runtime(**create_params)\n\n            # Return success result\n            return AgentCreationResult(\n                success=True,\n                message=f\"Agent runtime '{input_params.name}' created successfully\",\n                agent_name=input_params.name,\n                runtime_id=response.get(\"agentRuntimeId\"),\n                runtime_arn=response.get(\"agentRuntimeArn\"),\n                container_uri=input_params.container_uri,\n                role_arn=input_params.role_arn,\n                environment=self.region,\n                default_endpoint=\"DEFAULT\",\n            )\n\n        except Exception as e:\n            # Handle error cases\n            logger.error(f\"Failed to create agent runtime: {str(e)}\")\n            return AgentCreationResult(\n                success=False,\n                message=f\"Failed to create agent runtime: {str(e)}\",\n                agent_name=input_params.name,\n                environment=self.region,\n            )\n\n    def update_agent_runtime(self, input_params: UpdateAgentRuntimeInput) -&gt; AgentUpdateResult:\n        \"\"\"Update an agent runtime, creating a new version.\n\n        Args:\n            input_params: Parameters for updating the agent runtime.\n\n        Returns:\n            AgentUpdateResult: Result of the agent update operation.\n        \"\"\"\n        try:\n            # Prepare the request parameters\n            update_params: dict[str, Any] = {\"agentRuntimeId\": input_params.agent_runtime_id}\n\n            # Add optional parameters if provided\n            if input_params.description:\n                update_params[\"description\"] = input_params.description\n\n            if input_params.container_uri:\n                update_params[\"agentRuntimeArtifact\"] = {\n                    \"containerConfiguration\": {\"containerUri\": input_params.container_uri}\n                }\n\n            if input_params.role_arn:\n                update_params[\"roleArn\"] = input_params.role_arn\n\n            if input_params.network_mode:\n                update_params[\"networkConfiguration\"] = {\"networkMode\": input_params.network_mode}\n\n            if input_params.protocol:\n                update_params[\"protocolConfiguration\"] = {\"serverProtocol\": input_params.protocol}\n\n            if input_params.environment_variables:\n                update_params[\"environmentVariables\"] = input_params.environment_variables\n\n            if input_params.client_token:\n                update_params[\"clientToken\"] = input_params.client_token\n\n            # Call the API to update the agent runtime\n            logger.info(f\"Updating agent runtime {input_params.agent_runtime_id}...\")\n            response = self.agentcore_control_client.update_agent_runtime(**update_params)\n\n            # Get the new version\n            new_version = response.get(\"agentRuntimeVersion\", \"unknown\")\n\n            # Return success result\n            container_uri = input_params.container_uri or \"unchanged\"\n            return AgentUpdateResult(\n                success=True,\n                message=f\"Agent runtime updated successfully, new version: {new_version}\",\n                agent_name=input_params.agent_runtime_id,  # We don't have the name here, just ID\n                runtime_id=input_params.agent_runtime_id,\n                version=new_version,\n                container_uri=container_uri,\n                environment=self.region,\n            )\n\n        except Exception as e:\n            # Handle error cases\n            logger.error(f\"Failed to update agent runtime: {str(e)}\")\n            return AgentUpdateResult(\n                success=False,\n                message=f\"Failed to update agent runtime: {str(e)}\",\n                agent_name=input_params.agent_runtime_id,  # We don't have the name here, just ID\n                runtime_id=input_params.agent_runtime_id,\n                version=\"N/A\",\n                container_uri=\"N/A\",\n                environment=self.region,\n            )\n\n    def create_endpoint(self, input_params: CreateEndpointInput) -&gt; EndpointCreationResult:\n        \"\"\"Create an agent runtime endpoint.\n\n        Args:\n            input_params: Parameters for creating the endpoint.\n\n        Returns:\n            EndpointCreationResult: Result of the endpoint creation operation.\n        \"\"\"\n        try:\n            # Prepare the request parameters\n            create_params: dict[str, Any] = {\"agentRuntimeId\": input_params.agent_runtime_id, \"name\": input_params.name}\n\n            # Add optional parameters if provided\n            if input_params.target_version:\n                create_params[\"agentRuntimeVersion\"] = input_params.target_version\n\n            if input_params.description:\n                create_params[\"description\"] = input_params.description\n\n            if input_params.client_token:\n                create_params[\"clientToken\"] = input_params.client_token\n\n            # Call the API to create the endpoint\n            logger.info(f\"Creating endpoint '{input_params.name}' for agent runtime {input_params.agent_runtime_id}...\")\n            response = self.agentcore_control_client.create_agent_runtime_endpoint(**create_params)\n\n            # Get the target version and endpoint ARN\n            target_version = response.get(\"targetVersion\", \"latest\")\n            endpoint_arn = response.get(\"agentRuntimeEndpointArn\")\n\n            # Return success result\n            return EndpointCreationResult(\n                success=True,\n                message=f\"Endpoint '{input_params.name}' created successfully\",\n                agent_name=input_params.agent_runtime_id,  # We don't have the name here, just ID\n                runtime_id=input_params.agent_runtime_id,\n                endpoint_name=input_params.name,\n                endpoint_arn=endpoint_arn,\n                target_version=target_version,\n            )\n\n        except Exception as e:\n            # Handle error cases\n            logger.error(f\"Failed to create endpoint: {str(e)}\")\n            return EndpointCreationResult(\n                success=False,\n                message=f\"Failed to create endpoint: {str(e)}\",\n                agent_name=input_params.agent_runtime_id,\n                runtime_id=input_params.agent_runtime_id,\n                endpoint_name=input_params.name,\n                target_version=\"N/A\",\n            )\n\n    def update_endpoint(self, input_params: UpdateEndpointInput) -&gt; EndpointUpdateResult:\n        \"\"\"Update an agent runtime endpoint.\n\n        Args:\n            input_params: Parameters for updating the endpoint.\n\n        Returns:\n            EndpointUpdateResult: Result of the endpoint update operation.\n        \"\"\"\n        try:\n            # First get the current endpoint details to know the previous version\n            try:\n                endpoint_response = self.agentcore_control_client.get_agent_runtime_endpoint(\n                    agentRuntimeId=input_params.agent_runtime_id, endpointName=input_params.endpoint_name\n                )\n                previous_version = endpoint_response.get(\"targetVersion\", \"unknown\")\n            except Exception as e:\n                logger.warning(f\"Could not retrieve current endpoint details: {str(e)}\")\n                previous_version = \"unknown\"\n\n            # Prepare the request parameters\n            update_params: dict[str, Any] = {\n                \"agentRuntimeId\": input_params.agent_runtime_id,\n                \"name\": input_params.endpoint_name,\n                \"agentRuntimeVersion\": input_params.target_version,\n            }\n\n            # Add optional parameters if provided\n            if input_params.description:\n                update_params[\"description\"] = input_params.description\n\n            if input_params.client_token:\n                update_params[\"clientToken\"] = input_params.client_token\n\n            # Call the API to update the endpoint\n            logger.info(f\"Updating endpoint '{input_params.endpoint_name}' to version {input_params.target_version}...\")\n            response = self.agentcore_control_client.update_agent_runtime_endpoint(**update_params)\n\n            # Return success result\n            return EndpointUpdateResult(\n                success=True,\n                message=f\"Endpoint '{input_params.endpoint_name}' updated successfully to version {input_params.target_version}\",\n                agent_name=input_params.agent_runtime_id,  # We don't have the name here, just ID\n                runtime_id=input_params.agent_runtime_id,\n                endpoint_name=input_params.endpoint_name,\n                previous_version=previous_version,\n                new_version=input_params.target_version,\n            )\n\n        except Exception as e:\n            # Handle error cases\n            logger.error(f\"Failed to update endpoint: {str(e)}\")\n            return EndpointUpdateResult(\n                success=False,\n                message=f\"Failed to update endpoint: {str(e)}\",\n                agent_name=input_params.agent_runtime_id,\n                runtime_id=input_params.agent_runtime_id,\n                endpoint_name=input_params.endpoint_name,\n                previous_version=\"unknown\",\n                new_version=input_params.target_version,\n            )\n\n    def delete_agent_runtime(self, agent_runtime_id: str) -&gt; AgentDeletionResult:\n        \"\"\"Delete an agent runtime.\n\n        Args:\n            agent_runtime_id: ID of the agent runtime to delete.\n\n        Returns:\n            AgentDeletionResult: Result of the agent deletion operation.\n        \"\"\"\n        try:\n            # First, list and delete all endpoints\n            deleted_resources: list[str] = []\n\n            try:\n                # List all endpoints\n                endpoints_response = self.agentcore_control_client.list_agent_runtime_endpoints(\n                    agentRuntimeId=agent_runtime_id\n                )\n\n                # Get endpoints list with fallback to empty list\n                endpoints_list = endpoints_response.get(\"endpoints\", []) or []\n\n                # Ensure we have an iterable before looping\n                if not hasattr(endpoints_list, \"__iter__\"):\n                    logger.warning(\"Endpoints list is not iterable, skipping endpoint deletion\")\n                    endpoints_list = []\n\n                # Delete each endpoint\n                for endpoint in endpoints_list:\n                    endpoint_name = endpoint.get(\"name\")\n                    if endpoint_name:\n                        try:\n                            self.agentcore_control_client.delete_agent_runtime_endpoint(\n                                agentRuntimeId=agent_runtime_id, endpointName=endpoint_name\n                            )\n                            deleted_resources.append(f\"Endpoint: {endpoint_name}\")\n                            logger.info(f\"Deleted endpoint '{endpoint_name}'\")\n                        except Exception as endpoint_error:\n                            logger.warning(f\"Failed to delete endpoint '{endpoint_name}': {str(endpoint_error)}\")\n            except Exception as list_error:\n                logger.warning(f\"Failed to list endpoints: {str(list_error)}\")\n\n            # Then delete the agent runtime itself\n            logger.info(f\"Deleting agent runtime {agent_runtime_id}...\")\n            self.agentcore_control_client.delete_agent_runtime(agentRuntimeId=agent_runtime_id)\n            deleted_resources.append(f\"Agent Runtime: {agent_runtime_id}\")\n\n            # Return success result\n            return AgentDeletionResult(\n                success=True,\n                message=f\"Agent runtime {agent_runtime_id} and its endpoints deleted successfully\",\n                agent_name=agent_runtime_id,  # We don't have the name here, just ID\n                deleted_resources=deleted_resources,\n                environment=self.region,\n            )\n\n        except Exception as e:\n            # Handle error cases\n            logger.error(f\"Failed to delete agent runtime: {str(e)}\")\n            return AgentDeletionResult(\n                success=False,\n                message=f\"Failed to delete agent runtime: {str(e)}\",\n                agent_name=agent_runtime_id,\n                deleted_resources=[],\n                environment=self.region,\n            )\n\n    def list_agent_runtimes(self) -&gt; list[AgentRuntime]:\n        \"\"\"List all agent runtimes.\n\n        Returns:\n            list[AgentTypeDef]: List of agent runtimes.\n        \"\"\"\n        response = self.agentcore_control_client.list_agent_runtimes()\n\n        return [AgentRuntimeResponseAdapter.from_aws_response(runtime) for runtime in response[\"agentRuntimes\"]]\n\n    def get_agent_runtime(self, agent_runtime_id: str) -&gt; AgentRuntime | None:\n        \"\"\"Get details for a specific agent runtime.\n\n        Args:\n            agent_runtime_id: ID of the agent runtime to retrieve.\n\n        Returns:\n            Optional[AgentRuntime]: Agent runtime details or None if not found.\n        \"\"\"\n        try:\n            response = self.agentcore_control_client.get_agent_runtime(agentRuntimeId=agent_runtime_id)\n\n            # Convert API response to our model\n            agent_runtime = AgentRuntimeResponseAdapter.from_aws_response(response)\n            return agent_runtime\n\n        except Exception as e:\n            logger.error(f\"Failed to get agent runtime {agent_runtime_id}: {str(e)}\")\n            return None\n\n    def list_agent_runtime_versions(self, agent_runtime_id: str) -&gt; list[AgentRuntime]:\n        \"\"\"List all versions of an agent runtime.\n\n        Args:\n            agent_runtime_id: ID of the agent runtime to list versions for.\n\n        Returns:\n            list[dict[str, Any]]: List of agent runtime versions.\n        \"\"\"\n        response = self.agentcore_control_client.list_agent_runtime_versions(agentRuntimeId=agent_runtime_id)\n\n        return [AgentRuntimeResponseAdapter.from_aws_response(version) for version in response[\"agentRuntimes\"]]\n\n    def list_agent_runtime_endpoints(self, agent_runtime_id: str) -&gt; list[AgentRuntimeEndpoint]:\n        \"\"\"List all endpoints for an agent runtime.\n\n        Args:\n            agent_runtime_id: ID of the agent runtime to list endpoints for.\n\n        Returns:\n            list[dict[str, Any]]: List of agent runtime endpoints.\n        \"\"\"\n        response = self.agentcore_control_client.list_agent_runtime_endpoints(agentRuntimeId=agent_runtime_id)\n        return [\n            AgentRuntimeResponseAdapter.from_endpoint_response(endpoint, agent_runtime_id)\n            for endpoint in response[\"runtimeEndpoints\"]\n        ]\n\n    def get_agent_runtime_endpoint(self, agent_runtime_id: str, endpoint_name: str) -&gt; AgentRuntimeEndpoint | None:\n        \"\"\"Get details for a specific agent runtime endpoint.\n\n        Args:\n            agent_runtime_id: ID of the agent runtime.\n            endpoint_name: Name of the endpoint to retrieve.\n\n        Returns:\n            Optional[AgentRuntimeEndpoint]: Endpoint details or None if not found.\n        \"\"\"\n        try:\n            response = self.agentcore_control_client.get_agent_runtime_endpoint(\n                agentRuntimeId=agent_runtime_id, endpointName=endpoint_name\n            )\n\n            # Convert API response to our model\n            endpoint = AgentRuntimeResponseAdapter.from_endpoint_response(response, agent_runtime_id)\n            return endpoint\n\n        except Exception as e:\n            logger.error(f\"Failed to get endpoint {endpoint_name} for agent runtime {agent_runtime_id}: {str(e)}\")\n            return None\n\n    def invoke_agent_runtime(\n        self,\n        agent_runtime_arn: str,\n        qualifier: str,\n        runtime_session_id: str,\n        payload: str,\n        content_type: str = \"application/json\",\n        accept: str = \"application/json\",\n    ) -&gt; tuple[int, str]:\n        \"\"\"Invoke an agent runtime with a given payload.\n\n        Args:\n            agent_runtime_arn: ARN of the agent runtime to invoke.\n            qualifier: Qualifier (endpoint name or version) to use.\n            runtime_session_id: Session ID for the invocation.\n            payload: Payload to send to the agent runtime.\n            content_type: Content type of the payload.\n            accept: Accept header value.\n\n        Returns:\n            Tuple[int, StreamingBody]: Status code and response object.\n        \"\"\"\n        try:\n            # Prepare the invoke parameters\n            invoke_params: dict[str, Any] = {\n                \"agentRuntimeArn\": agent_runtime_arn,\n                \"qualifier\": qualifier,\n                \"runtimeSessionId\": runtime_session_id,\n                \"contentType\": content_type,\n                \"accept\": accept,\n                \"payload\": payload.encode(\"utf-8\"),\n            }\n\n            # Call the API to invoke the agent runtime\n            response = self.agentcore_client.invoke_agent_runtime(**invoke_params)\n\n            # Extract status code and response body\n            status_code = response.get(\"statusCode\", 500)\n            response_body = response.get(\"response\")\n            if not response_body:\n                raise Exception(\"No response body received from agent runtime\")\n            else:\n                agent_response = response_body.read().decode(\"utf-8\")\n\n            return status_code, agent_response\n        except Exception as e:\n            logger.error(f\"Failed to invoke agent runtime: {str(e)}\")\n            return 500, str(e)\n</code></pre>"},{"location":"reference/agentcore_cli/services/agentcore/#agentcore_cli.services.agentcore.AgentCoreService.__init__","title":"<code>__init__(region, session=None)</code>","text":"<p>Initialize the AgentCore service.</p> <p>Parameters:</p> Name Type Description Default <code>region</code> <code>str</code> <p>AWS region for AgentCore operations.</p> required <code>session</code> <code>Session | None</code> <p>Boto3 session to use. If None, creates a new session.</p> <code>None</code> Source code in <code>agentcore_cli/services/agentcore.py</code> Python<pre><code>def __init__(self, region: str, session: Session | None = None):\n    \"\"\"Initialize the AgentCore service.\n\n    Args:\n        region: AWS region for AgentCore operations.\n        session: Boto3 session to use. If None, creates a new session.\n    \"\"\"\n    self.region = region\n    self.session = session or Session(region_name=region)\n\n    # Initialize the boto3 clients\n    self.agentcore_control_client = self.session.client(\"bedrock-agentcore-control\", region_name=region)\n    self.agentcore_client = self.session.client(\"bedrock-agentcore\", region_name=region)\n</code></pre>"},{"location":"reference/agentcore_cli/services/agentcore/#agentcore_cli.services.agentcore.AgentCoreService.create_agent_runtime","title":"<code>create_agent_runtime(input_params)</code>","text":"<p>Create an agent runtime.</p> <p>Parameters:</p> Name Type Description Default <code>input_params</code> <code>CreateAgentRuntimeInput</code> <p>Parameters for creating the agent runtime.</p> required <p>Returns:</p> Name Type Description <code>AgentCreationResult</code> <code>AgentCreationResult</code> <p>Result of the agent creation operation.</p> Source code in <code>agentcore_cli/services/agentcore.py</code> Python<pre><code>def create_agent_runtime(self, input_params: CreateAgentRuntimeInput) -&gt; AgentCreationResult:\n    \"\"\"Create an agent runtime.\n\n    Args:\n        input_params: Parameters for creating the agent runtime.\n\n    Returns:\n        AgentCreationResult: Result of the agent creation operation.\n    \"\"\"\n    try:\n        # Prepare the request parameters\n        create_params: dict[str, Any] = {\n            \"agentRuntimeName\": input_params.name,\n            \"agentRuntimeArtifact\": {\"containerConfiguration\": {\"containerUri\": input_params.container_uri}},\n            \"roleArn\": input_params.role_arn,\n            \"networkConfiguration\": {\"networkMode\": input_params.network_mode},\n            \"protocolConfiguration\": {\"serverProtocol\": input_params.protocol},\n        }\n\n        # Add optional parameters if provided\n        if input_params.description:\n            create_params[\"description\"] = input_params.description\n\n        if input_params.environment_variables:\n            create_params[\"environmentVariables\"] = input_params.environment_variables\n\n        if input_params.client_token:\n            create_params[\"clientToken\"] = input_params.client_token\n\n        # Call the API to create the agent runtime\n        logger.info(f\"Creating agent runtime '{input_params.name}'...\")\n        response = self.agentcore_control_client.create_agent_runtime(**create_params)\n\n        # Return success result\n        return AgentCreationResult(\n            success=True,\n            message=f\"Agent runtime '{input_params.name}' created successfully\",\n            agent_name=input_params.name,\n            runtime_id=response.get(\"agentRuntimeId\"),\n            runtime_arn=response.get(\"agentRuntimeArn\"),\n            container_uri=input_params.container_uri,\n            role_arn=input_params.role_arn,\n            environment=self.region,\n            default_endpoint=\"DEFAULT\",\n        )\n\n    except Exception as e:\n        # Handle error cases\n        logger.error(f\"Failed to create agent runtime: {str(e)}\")\n        return AgentCreationResult(\n            success=False,\n            message=f\"Failed to create agent runtime: {str(e)}\",\n            agent_name=input_params.name,\n            environment=self.region,\n        )\n</code></pre>"},{"location":"reference/agentcore_cli/services/agentcore/#agentcore_cli.services.agentcore.AgentCoreService.create_endpoint","title":"<code>create_endpoint(input_params)</code>","text":"<p>Create an agent runtime endpoint.</p> <p>Parameters:</p> Name Type Description Default <code>input_params</code> <code>CreateEndpointInput</code> <p>Parameters for creating the endpoint.</p> required <p>Returns:</p> Name Type Description <code>EndpointCreationResult</code> <code>EndpointCreationResult</code> <p>Result of the endpoint creation operation.</p> Source code in <code>agentcore_cli/services/agentcore.py</code> Python<pre><code>def create_endpoint(self, input_params: CreateEndpointInput) -&gt; EndpointCreationResult:\n    \"\"\"Create an agent runtime endpoint.\n\n    Args:\n        input_params: Parameters for creating the endpoint.\n\n    Returns:\n        EndpointCreationResult: Result of the endpoint creation operation.\n    \"\"\"\n    try:\n        # Prepare the request parameters\n        create_params: dict[str, Any] = {\"agentRuntimeId\": input_params.agent_runtime_id, \"name\": input_params.name}\n\n        # Add optional parameters if provided\n        if input_params.target_version:\n            create_params[\"agentRuntimeVersion\"] = input_params.target_version\n\n        if input_params.description:\n            create_params[\"description\"] = input_params.description\n\n        if input_params.client_token:\n            create_params[\"clientToken\"] = input_params.client_token\n\n        # Call the API to create the endpoint\n        logger.info(f\"Creating endpoint '{input_params.name}' for agent runtime {input_params.agent_runtime_id}...\")\n        response = self.agentcore_control_client.create_agent_runtime_endpoint(**create_params)\n\n        # Get the target version and endpoint ARN\n        target_version = response.get(\"targetVersion\", \"latest\")\n        endpoint_arn = response.get(\"agentRuntimeEndpointArn\")\n\n        # Return success result\n        return EndpointCreationResult(\n            success=True,\n            message=f\"Endpoint '{input_params.name}' created successfully\",\n            agent_name=input_params.agent_runtime_id,  # We don't have the name here, just ID\n            runtime_id=input_params.agent_runtime_id,\n            endpoint_name=input_params.name,\n            endpoint_arn=endpoint_arn,\n            target_version=target_version,\n        )\n\n    except Exception as e:\n        # Handle error cases\n        logger.error(f\"Failed to create endpoint: {str(e)}\")\n        return EndpointCreationResult(\n            success=False,\n            message=f\"Failed to create endpoint: {str(e)}\",\n            agent_name=input_params.agent_runtime_id,\n            runtime_id=input_params.agent_runtime_id,\n            endpoint_name=input_params.name,\n            target_version=\"N/A\",\n        )\n</code></pre>"},{"location":"reference/agentcore_cli/services/agentcore/#agentcore_cli.services.agentcore.AgentCoreService.delete_agent_runtime","title":"<code>delete_agent_runtime(agent_runtime_id)</code>","text":"<p>Delete an agent runtime.</p> <p>Parameters:</p> Name Type Description Default <code>agent_runtime_id</code> <code>str</code> <p>ID of the agent runtime to delete.</p> required <p>Returns:</p> Name Type Description <code>AgentDeletionResult</code> <code>AgentDeletionResult</code> <p>Result of the agent deletion operation.</p> Source code in <code>agentcore_cli/services/agentcore.py</code> Python<pre><code>def delete_agent_runtime(self, agent_runtime_id: str) -&gt; AgentDeletionResult:\n    \"\"\"Delete an agent runtime.\n\n    Args:\n        agent_runtime_id: ID of the agent runtime to delete.\n\n    Returns:\n        AgentDeletionResult: Result of the agent deletion operation.\n    \"\"\"\n    try:\n        # First, list and delete all endpoints\n        deleted_resources: list[str] = []\n\n        try:\n            # List all endpoints\n            endpoints_response = self.agentcore_control_client.list_agent_runtime_endpoints(\n                agentRuntimeId=agent_runtime_id\n            )\n\n            # Get endpoints list with fallback to empty list\n            endpoints_list = endpoints_response.get(\"endpoints\", []) or []\n\n            # Ensure we have an iterable before looping\n            if not hasattr(endpoints_list, \"__iter__\"):\n                logger.warning(\"Endpoints list is not iterable, skipping endpoint deletion\")\n                endpoints_list = []\n\n            # Delete each endpoint\n            for endpoint in endpoints_list:\n                endpoint_name = endpoint.get(\"name\")\n                if endpoint_name:\n                    try:\n                        self.agentcore_control_client.delete_agent_runtime_endpoint(\n                            agentRuntimeId=agent_runtime_id, endpointName=endpoint_name\n                        )\n                        deleted_resources.append(f\"Endpoint: {endpoint_name}\")\n                        logger.info(f\"Deleted endpoint '{endpoint_name}'\")\n                    except Exception as endpoint_error:\n                        logger.warning(f\"Failed to delete endpoint '{endpoint_name}': {str(endpoint_error)}\")\n        except Exception as list_error:\n            logger.warning(f\"Failed to list endpoints: {str(list_error)}\")\n\n        # Then delete the agent runtime itself\n        logger.info(f\"Deleting agent runtime {agent_runtime_id}...\")\n        self.agentcore_control_client.delete_agent_runtime(agentRuntimeId=agent_runtime_id)\n        deleted_resources.append(f\"Agent Runtime: {agent_runtime_id}\")\n\n        # Return success result\n        return AgentDeletionResult(\n            success=True,\n            message=f\"Agent runtime {agent_runtime_id} and its endpoints deleted successfully\",\n            agent_name=agent_runtime_id,  # We don't have the name here, just ID\n            deleted_resources=deleted_resources,\n            environment=self.region,\n        )\n\n    except Exception as e:\n        # Handle error cases\n        logger.error(f\"Failed to delete agent runtime: {str(e)}\")\n        return AgentDeletionResult(\n            success=False,\n            message=f\"Failed to delete agent runtime: {str(e)}\",\n            agent_name=agent_runtime_id,\n            deleted_resources=[],\n            environment=self.region,\n        )\n</code></pre>"},{"location":"reference/agentcore_cli/services/agentcore/#agentcore_cli.services.agentcore.AgentCoreService.get_agent_runtime","title":"<code>get_agent_runtime(agent_runtime_id)</code>","text":"<p>Get details for a specific agent runtime.</p> <p>Parameters:</p> Name Type Description Default <code>agent_runtime_id</code> <code>str</code> <p>ID of the agent runtime to retrieve.</p> required <p>Returns:</p> Type Description <code>AgentRuntime | None</code> <p>Optional[AgentRuntime]: Agent runtime details or None if not found.</p> Source code in <code>agentcore_cli/services/agentcore.py</code> Python<pre><code>def get_agent_runtime(self, agent_runtime_id: str) -&gt; AgentRuntime | None:\n    \"\"\"Get details for a specific agent runtime.\n\n    Args:\n        agent_runtime_id: ID of the agent runtime to retrieve.\n\n    Returns:\n        Optional[AgentRuntime]: Agent runtime details or None if not found.\n    \"\"\"\n    try:\n        response = self.agentcore_control_client.get_agent_runtime(agentRuntimeId=agent_runtime_id)\n\n        # Convert API response to our model\n        agent_runtime = AgentRuntimeResponseAdapter.from_aws_response(response)\n        return agent_runtime\n\n    except Exception as e:\n        logger.error(f\"Failed to get agent runtime {agent_runtime_id}: {str(e)}\")\n        return None\n</code></pre>"},{"location":"reference/agentcore_cli/services/agentcore/#agentcore_cli.services.agentcore.AgentCoreService.get_agent_runtime_endpoint","title":"<code>get_agent_runtime_endpoint(agent_runtime_id, endpoint_name)</code>","text":"<p>Get details for a specific agent runtime endpoint.</p> <p>Parameters:</p> Name Type Description Default <code>agent_runtime_id</code> <code>str</code> <p>ID of the agent runtime.</p> required <code>endpoint_name</code> <code>str</code> <p>Name of the endpoint to retrieve.</p> required <p>Returns:</p> Type Description <code>AgentRuntimeEndpoint | None</code> <p>Optional[AgentRuntimeEndpoint]: Endpoint details or None if not found.</p> Source code in <code>agentcore_cli/services/agentcore.py</code> Python<pre><code>def get_agent_runtime_endpoint(self, agent_runtime_id: str, endpoint_name: str) -&gt; AgentRuntimeEndpoint | None:\n    \"\"\"Get details for a specific agent runtime endpoint.\n\n    Args:\n        agent_runtime_id: ID of the agent runtime.\n        endpoint_name: Name of the endpoint to retrieve.\n\n    Returns:\n        Optional[AgentRuntimeEndpoint]: Endpoint details or None if not found.\n    \"\"\"\n    try:\n        response = self.agentcore_control_client.get_agent_runtime_endpoint(\n            agentRuntimeId=agent_runtime_id, endpointName=endpoint_name\n        )\n\n        # Convert API response to our model\n        endpoint = AgentRuntimeResponseAdapter.from_endpoint_response(response, agent_runtime_id)\n        return endpoint\n\n    except Exception as e:\n        logger.error(f\"Failed to get endpoint {endpoint_name} for agent runtime {agent_runtime_id}: {str(e)}\")\n        return None\n</code></pre>"},{"location":"reference/agentcore_cli/services/agentcore/#agentcore_cli.services.agentcore.AgentCoreService.invoke_agent_runtime","title":"<code>invoke_agent_runtime(agent_runtime_arn, qualifier, runtime_session_id, payload, content_type='application/json', accept='application/json')</code>","text":"<p>Invoke an agent runtime with a given payload.</p> <p>Parameters:</p> Name Type Description Default <code>agent_runtime_arn</code> <code>str</code> <p>ARN of the agent runtime to invoke.</p> required <code>qualifier</code> <code>str</code> <p>Qualifier (endpoint name or version) to use.</p> required <code>runtime_session_id</code> <code>str</code> <p>Session ID for the invocation.</p> required <code>payload</code> <code>str</code> <p>Payload to send to the agent runtime.</p> required <code>content_type</code> <code>str</code> <p>Content type of the payload.</p> <code>'application/json'</code> <code>accept</code> <code>str</code> <p>Accept header value.</p> <code>'application/json'</code> <p>Returns:</p> Type Description <code>tuple[int, str]</code> <p>Tuple[int, StreamingBody]: Status code and response object.</p> Source code in <code>agentcore_cli/services/agentcore.py</code> Python<pre><code>def invoke_agent_runtime(\n    self,\n    agent_runtime_arn: str,\n    qualifier: str,\n    runtime_session_id: str,\n    payload: str,\n    content_type: str = \"application/json\",\n    accept: str = \"application/json\",\n) -&gt; tuple[int, str]:\n    \"\"\"Invoke an agent runtime with a given payload.\n\n    Args:\n        agent_runtime_arn: ARN of the agent runtime to invoke.\n        qualifier: Qualifier (endpoint name or version) to use.\n        runtime_session_id: Session ID for the invocation.\n        payload: Payload to send to the agent runtime.\n        content_type: Content type of the payload.\n        accept: Accept header value.\n\n    Returns:\n        Tuple[int, StreamingBody]: Status code and response object.\n    \"\"\"\n    try:\n        # Prepare the invoke parameters\n        invoke_params: dict[str, Any] = {\n            \"agentRuntimeArn\": agent_runtime_arn,\n            \"qualifier\": qualifier,\n            \"runtimeSessionId\": runtime_session_id,\n            \"contentType\": content_type,\n            \"accept\": accept,\n            \"payload\": payload.encode(\"utf-8\"),\n        }\n\n        # Call the API to invoke the agent runtime\n        response = self.agentcore_client.invoke_agent_runtime(**invoke_params)\n\n        # Extract status code and response body\n        status_code = response.get(\"statusCode\", 500)\n        response_body = response.get(\"response\")\n        if not response_body:\n            raise Exception(\"No response body received from agent runtime\")\n        else:\n            agent_response = response_body.read().decode(\"utf-8\")\n\n        return status_code, agent_response\n    except Exception as e:\n        logger.error(f\"Failed to invoke agent runtime: {str(e)}\")\n        return 500, str(e)\n</code></pre>"},{"location":"reference/agentcore_cli/services/agentcore/#agentcore_cli.services.agentcore.AgentCoreService.list_agent_runtime_endpoints","title":"<code>list_agent_runtime_endpoints(agent_runtime_id)</code>","text":"<p>List all endpoints for an agent runtime.</p> <p>Parameters:</p> Name Type Description Default <code>agent_runtime_id</code> <code>str</code> <p>ID of the agent runtime to list endpoints for.</p> required <p>Returns:</p> Type Description <code>list[AgentRuntimeEndpoint]</code> <p>list[dict[str, Any]]: List of agent runtime endpoints.</p> Source code in <code>agentcore_cli/services/agentcore.py</code> Python<pre><code>def list_agent_runtime_endpoints(self, agent_runtime_id: str) -&gt; list[AgentRuntimeEndpoint]:\n    \"\"\"List all endpoints for an agent runtime.\n\n    Args:\n        agent_runtime_id: ID of the agent runtime to list endpoints for.\n\n    Returns:\n        list[dict[str, Any]]: List of agent runtime endpoints.\n    \"\"\"\n    response = self.agentcore_control_client.list_agent_runtime_endpoints(agentRuntimeId=agent_runtime_id)\n    return [\n        AgentRuntimeResponseAdapter.from_endpoint_response(endpoint, agent_runtime_id)\n        for endpoint in response[\"runtimeEndpoints\"]\n    ]\n</code></pre>"},{"location":"reference/agentcore_cli/services/agentcore/#agentcore_cli.services.agentcore.AgentCoreService.list_agent_runtime_versions","title":"<code>list_agent_runtime_versions(agent_runtime_id)</code>","text":"<p>List all versions of an agent runtime.</p> <p>Parameters:</p> Name Type Description Default <code>agent_runtime_id</code> <code>str</code> <p>ID of the agent runtime to list versions for.</p> required <p>Returns:</p> Type Description <code>list[AgentRuntime]</code> <p>list[dict[str, Any]]: List of agent runtime versions.</p> Source code in <code>agentcore_cli/services/agentcore.py</code> Python<pre><code>def list_agent_runtime_versions(self, agent_runtime_id: str) -&gt; list[AgentRuntime]:\n    \"\"\"List all versions of an agent runtime.\n\n    Args:\n        agent_runtime_id: ID of the agent runtime to list versions for.\n\n    Returns:\n        list[dict[str, Any]]: List of agent runtime versions.\n    \"\"\"\n    response = self.agentcore_control_client.list_agent_runtime_versions(agentRuntimeId=agent_runtime_id)\n\n    return [AgentRuntimeResponseAdapter.from_aws_response(version) for version in response[\"agentRuntimes\"]]\n</code></pre>"},{"location":"reference/agentcore_cli/services/agentcore/#agentcore_cli.services.agentcore.AgentCoreService.list_agent_runtimes","title":"<code>list_agent_runtimes()</code>","text":"<p>List all agent runtimes.</p> <p>Returns:</p> Type Description <code>list[AgentRuntime]</code> <p>list[AgentTypeDef]: List of agent runtimes.</p> Source code in <code>agentcore_cli/services/agentcore.py</code> Python<pre><code>def list_agent_runtimes(self) -&gt; list[AgentRuntime]:\n    \"\"\"List all agent runtimes.\n\n    Returns:\n        list[AgentTypeDef]: List of agent runtimes.\n    \"\"\"\n    response = self.agentcore_control_client.list_agent_runtimes()\n\n    return [AgentRuntimeResponseAdapter.from_aws_response(runtime) for runtime in response[\"agentRuntimes\"]]\n</code></pre>"},{"location":"reference/agentcore_cli/services/agentcore/#agentcore_cli.services.agentcore.AgentCoreService.update_agent_runtime","title":"<code>update_agent_runtime(input_params)</code>","text":"<p>Update an agent runtime, creating a new version.</p> <p>Parameters:</p> Name Type Description Default <code>input_params</code> <code>UpdateAgentRuntimeInput</code> <p>Parameters for updating the agent runtime.</p> required <p>Returns:</p> Name Type Description <code>AgentUpdateResult</code> <code>AgentUpdateResult</code> <p>Result of the agent update operation.</p> Source code in <code>agentcore_cli/services/agentcore.py</code> Python<pre><code>def update_agent_runtime(self, input_params: UpdateAgentRuntimeInput) -&gt; AgentUpdateResult:\n    \"\"\"Update an agent runtime, creating a new version.\n\n    Args:\n        input_params: Parameters for updating the agent runtime.\n\n    Returns:\n        AgentUpdateResult: Result of the agent update operation.\n    \"\"\"\n    try:\n        # Prepare the request parameters\n        update_params: dict[str, Any] = {\"agentRuntimeId\": input_params.agent_runtime_id}\n\n        # Add optional parameters if provided\n        if input_params.description:\n            update_params[\"description\"] = input_params.description\n\n        if input_params.container_uri:\n            update_params[\"agentRuntimeArtifact\"] = {\n                \"containerConfiguration\": {\"containerUri\": input_params.container_uri}\n            }\n\n        if input_params.role_arn:\n            update_params[\"roleArn\"] = input_params.role_arn\n\n        if input_params.network_mode:\n            update_params[\"networkConfiguration\"] = {\"networkMode\": input_params.network_mode}\n\n        if input_params.protocol:\n            update_params[\"protocolConfiguration\"] = {\"serverProtocol\": input_params.protocol}\n\n        if input_params.environment_variables:\n            update_params[\"environmentVariables\"] = input_params.environment_variables\n\n        if input_params.client_token:\n            update_params[\"clientToken\"] = input_params.client_token\n\n        # Call the API to update the agent runtime\n        logger.info(f\"Updating agent runtime {input_params.agent_runtime_id}...\")\n        response = self.agentcore_control_client.update_agent_runtime(**update_params)\n\n        # Get the new version\n        new_version = response.get(\"agentRuntimeVersion\", \"unknown\")\n\n        # Return success result\n        container_uri = input_params.container_uri or \"unchanged\"\n        return AgentUpdateResult(\n            success=True,\n            message=f\"Agent runtime updated successfully, new version: {new_version}\",\n            agent_name=input_params.agent_runtime_id,  # We don't have the name here, just ID\n            runtime_id=input_params.agent_runtime_id,\n            version=new_version,\n            container_uri=container_uri,\n            environment=self.region,\n        )\n\n    except Exception as e:\n        # Handle error cases\n        logger.error(f\"Failed to update agent runtime: {str(e)}\")\n        return AgentUpdateResult(\n            success=False,\n            message=f\"Failed to update agent runtime: {str(e)}\",\n            agent_name=input_params.agent_runtime_id,  # We don't have the name here, just ID\n            runtime_id=input_params.agent_runtime_id,\n            version=\"N/A\",\n            container_uri=\"N/A\",\n            environment=self.region,\n        )\n</code></pre>"},{"location":"reference/agentcore_cli/services/agentcore/#agentcore_cli.services.agentcore.AgentCoreService.update_endpoint","title":"<code>update_endpoint(input_params)</code>","text":"<p>Update an agent runtime endpoint.</p> <p>Parameters:</p> Name Type Description Default <code>input_params</code> <code>UpdateEndpointInput</code> <p>Parameters for updating the endpoint.</p> required <p>Returns:</p> Name Type Description <code>EndpointUpdateResult</code> <code>EndpointUpdateResult</code> <p>Result of the endpoint update operation.</p> Source code in <code>agentcore_cli/services/agentcore.py</code> Python<pre><code>def update_endpoint(self, input_params: UpdateEndpointInput) -&gt; EndpointUpdateResult:\n    \"\"\"Update an agent runtime endpoint.\n\n    Args:\n        input_params: Parameters for updating the endpoint.\n\n    Returns:\n        EndpointUpdateResult: Result of the endpoint update operation.\n    \"\"\"\n    try:\n        # First get the current endpoint details to know the previous version\n        try:\n            endpoint_response = self.agentcore_control_client.get_agent_runtime_endpoint(\n                agentRuntimeId=input_params.agent_runtime_id, endpointName=input_params.endpoint_name\n            )\n            previous_version = endpoint_response.get(\"targetVersion\", \"unknown\")\n        except Exception as e:\n            logger.warning(f\"Could not retrieve current endpoint details: {str(e)}\")\n            previous_version = \"unknown\"\n\n        # Prepare the request parameters\n        update_params: dict[str, Any] = {\n            \"agentRuntimeId\": input_params.agent_runtime_id,\n            \"name\": input_params.endpoint_name,\n            \"agentRuntimeVersion\": input_params.target_version,\n        }\n\n        # Add optional parameters if provided\n        if input_params.description:\n            update_params[\"description\"] = input_params.description\n\n        if input_params.client_token:\n            update_params[\"clientToken\"] = input_params.client_token\n\n        # Call the API to update the endpoint\n        logger.info(f\"Updating endpoint '{input_params.endpoint_name}' to version {input_params.target_version}...\")\n        response = self.agentcore_control_client.update_agent_runtime_endpoint(**update_params)\n\n        # Return success result\n        return EndpointUpdateResult(\n            success=True,\n            message=f\"Endpoint '{input_params.endpoint_name}' updated successfully to version {input_params.target_version}\",\n            agent_name=input_params.agent_runtime_id,  # We don't have the name here, just ID\n            runtime_id=input_params.agent_runtime_id,\n            endpoint_name=input_params.endpoint_name,\n            previous_version=previous_version,\n            new_version=input_params.target_version,\n        )\n\n    except Exception as e:\n        # Handle error cases\n        logger.error(f\"Failed to update endpoint: {str(e)}\")\n        return EndpointUpdateResult(\n            success=False,\n            message=f\"Failed to update endpoint: {str(e)}\",\n            agent_name=input_params.agent_runtime_id,\n            runtime_id=input_params.agent_runtime_id,\n            endpoint_name=input_params.endpoint_name,\n            previous_version=\"unknown\",\n            new_version=input_params.target_version,\n        )\n</code></pre>"},{"location":"reference/agentcore_cli/services/cognito/","title":"agentcore_cli.services.cognito","text":""},{"location":"reference/agentcore_cli/services/cognito/#agentcore_cli.services.cognito","title":"<code>agentcore_cli.services.cognito</code>","text":"<p>Cognito service operations for AgentCore Platform CLI.</p> <p>This module provides a service layer for AWS Cognito operations using CloudFormation to create and manage user pools and identity pools for agent authentication.</p>"},{"location":"reference/agentcore_cli/services/cognito/#agentcore_cli.services.cognito.CognitoService","title":"<code>CognitoService</code>","text":"<p>Service for AWS Cognito operations.</p> Source code in <code>agentcore_cli/services/cognito.py</code> Python<pre><code>class CognitoService:\n    \"\"\"Service for AWS Cognito operations.\"\"\"\n\n    def __init__(self, region: str, session: Session | None = None):\n        \"\"\"Initialize the Cognito service.\n\n        Args:\n            region: AWS region for Cognito operations.\n            session: Boto3 session to use. If None, creates a new session.\n        \"\"\"\n        self.region = region\n        self.session = session or Session(region_name=region)\n        self.cfn_service = CFNService(region)\n        self.cognito_idp_client = self.session.client(\"cognito-idp\", region_name=region)\n        self.cognito_identity_client = self.session.client(\"cognito-identity\", region_name=region)\n\n    def create_cognito_resources(\n        self,\n        agent_name: str,\n        environment: str | None = \"dev\",\n        resource_name_prefix: str = \"agentcore\",\n        allow_self_registration: bool = False,\n        email_verification_required: bool = True,\n    ) -&gt; CognitoConfig:\n        \"\"\"Create Cognito user pool and identity pool using CloudFormation.\n\n        Args:\n            agent_name: Name of the agent.\n            environment: Environment name (default: dev).\n            resource_name_prefix: Prefix for resource names (default: agentcore).\n            allow_self_registration: Whether to allow users to self-register (default: False).\n            email_verification_required: Whether to require email verification (default: True).\n\n        Returns:\n            CognitoConfig: Cognito configuration.\n        \"\"\"\n        try:\n            # Ensure environment has a valid value\n            if environment is None:\n                environment = \"dev\"\n\n            # Get the template file path\n            template_dir = Path(__file__).parent / \"templates\"\n            template_path = template_dir / \"cognito.cloudformation.yaml\"\n\n            if not template_path.exists():\n                error_msg = f\"Template file not found: {template_path}\"\n                logger.error(error_msg)\n                raise Exception(error_msg)\n\n            # Read the template file\n            with open(template_path, encoding=\"utf-8\") as f:\n                template_body = f.read()\n\n            # Create stack name\n            stack_name = f\"agentcore-{agent_name}-{environment}-cognito\"\n\n            # Set up parameters\n            # Using Any type to avoid type errors with CloudFormation parameter types\n            parameters: list[Any] = [\n                {\"ParameterKey\": \"AgentName\", \"ParameterValue\": agent_name},\n                {\"ParameterKey\": \"Environment\", \"ParameterValue\": environment},\n                {\"ParameterKey\": \"ResourceNamePrefix\", \"ParameterValue\": resource_name_prefix},\n                {\"ParameterKey\": \"AllowSelfRegistration\", \"ParameterValue\": str(allow_self_registration).lower()},\n                {\n                    \"ParameterKey\": \"EmailVerificationRequired\",\n                    \"ParameterValue\": str(email_verification_required).lower(),\n                },\n            ]\n\n            # Create or update the stack\n            logger.info(f\"Creating/updating Cognito resources for agent '{agent_name}'...\")\n            success, message = self.cfn_service.create_update_stack(\n                stack_name, template_body, parameters, wait_for_completion=True, timeout_minutes=20\n            )\n\n            if not success:\n                raise Exception(f\"Failed to create/update Cognito stack: {message}\")\n\n            # Get stack outputs (stack is guaranteed to be complete now)\n            outputs = self.cfn_service.get_stack_outputs(stack_name)\n\n            # Extract resource information from outputs\n            cognito_info = {}\n            for output in outputs:\n                if output.get(\"OutputKey\") == \"UserPoolId\":\n                    cognito_info[\"user_pool_id\"] = output.get(\"OutputValue\")\n                elif output.get(\"OutputKey\") == \"UserPoolClientId\":\n                    cognito_info[\"client_id\"] = output.get(\"OutputValue\")\n                elif output.get(\"OutputKey\") == \"IdentityPoolId\":\n                    cognito_info[\"identity_pool_id\"] = output.get(\"OutputValue\")\n                elif output.get(\"OutputKey\") == \"AuthenticatedUserRoleArn\":\n                    cognito_info[\"auth_role_arn\"] = output.get(\"OutputValue\")\n\n            if \"user_pool_id\" in cognito_info and \"identity_pool_id\" in cognito_info:\n                # Get additional user pool info\n                user_pool_id = str(cognito_info[\"user_pool_id\"])  # Ensure string type\n                identity_pool_id = str(cognito_info[\"identity_pool_id\"])  # Ensure string type\n\n                user_pool_details = self.cognito_idp_client.describe_user_pool(UserPoolId=user_pool_id)\n                identity_pool_details = self.cognito_identity_client.describe_identity_pool(\n                    IdentityPoolId=identity_pool_id\n                )\n\n                # Create User Pool model\n                user_pool = CognitoUserPool(\n                    user_pool_id=user_pool_id,\n                    user_pool_name=user_pool_details[\"UserPool\"].get(\n                        \"Name\", f\"{resource_name_prefix}-{agent_name}-{environment}\"\n                    ),\n                    user_pool_arn=user_pool_details[\"UserPool\"].get(\"Arn\"),\n                    client_id=cognito_info.get(\"client_id\", \"\"),  # Provide default value\n                    created_at=user_pool_details[\"UserPool\"].get(\"CreationDate\"),\n                )\n\n                # Create Identity Pool model\n                identity_pool = CognitoIdentityPool(\n                    identity_pool_id=identity_pool_id,\n                    identity_pool_name=identity_pool_details.get(\n                        \"IdentityPoolName\", f\"{resource_name_prefix}-{agent_name}-{environment}-identity\"\n                    ),\n                    created_at=datetime.now(),  # Identity Pool doesn't provide creation date\n                    allow_unauthenticated_identities=identity_pool_details.get(\"AllowUnauthenticatedIdentities\", False),\n                )\n\n                # Create Cognito Config\n                cognito_config = CognitoConfig(\n                    region=self.region,\n                    user_pool=user_pool,\n                    identity_pool=identity_pool,\n                    created_at=datetime.now(),\n                    last_sync=datetime.now(),\n                )\n\n                logger.success(\n                    f\"Cognito resources created: User Pool ID: {user_pool.user_pool_id}, Identity Pool ID: {identity_pool.identity_pool_id}\"\n                )\n                return cognito_config\n            else:\n                logger.error(\"Failed to retrieve Cognito resource information from stack outputs\")\n                raise Exception(\"Failed to retrieve Cognito resource information from stack outputs\")\n\n        except Exception as e:\n            error_msg = f\"Failed to create Cognito resources: {str(e)}\"\n            logger.error(error_msg)\n            raise Exception(error_msg)\n\n    def delete_cognito_resources(self, agent_name: str, environment: str | None = \"dev\") -&gt; tuple[bool, str]:\n        \"\"\"Delete Cognito resources by deleting the CloudFormation stack.\n\n        Args:\n            agent_name: Name of the agent.\n            environment: Environment name (default: dev).\n\n        Returns:\n            Tuple of (success, message).\n        \"\"\"\n        try:\n            # Ensure environment has a valid value\n            if environment is None:\n                environment = \"dev\"\n\n            # Create stack name\n            stack_name = f\"agentcore-{agent_name}-{environment}-cognito\"\n\n            # Check if stack exists\n            try:\n                self.cfn_service.get_stack_status(stack_name)\n            except Exception:\n                logger.warning(f\"Cognito stack for agent '{agent_name}' not found\")\n                return False, f\"Cognito stack for agent '{agent_name}' not found\"\n\n            # Delete the stack\n            logger.info(f\"Deleting Cognito resources for agent '{agent_name}'...\")\n            self.cfn_service.delete_stack(stack_name)\n\n            logger.success(f\"Cognito resources deletion initiated for agent '{agent_name}'\")\n            return True, f\"Cognito resources deletion initiated for agent '{agent_name}'\"\n\n        except Exception as e:\n            error_msg = f\"Failed to delete Cognito resources: {str(e)}\"\n            logger.error(error_msg)\n            return False, error_msg\n\n    def get_user_pool(self, user_pool_id: str) -&gt; tuple[bool, CognitoUserPool | None, str]:\n        \"\"\"Get details for a specific Cognito user pool.\n\n        Args:\n            user_pool_id: ID of the user pool.\n\n        Returns:\n            Tuple of (success, user_pool, message).\n        \"\"\"\n        try:\n            # Get user pool details\n            response = self.cognito_idp_client.describe_user_pool(UserPoolId=user_pool_id)\n            user_pool_data = response.get(\"UserPool\", {})\n\n            if not user_pool_data:\n                return False, None, f\"User pool '{user_pool_id}' not found\"\n\n            # Get user pool client\n            clients_response = self.cognito_idp_client.list_user_pool_clients(UserPoolId=user_pool_id, MaxResults=60)\n            client_id = None\n            client_secret = None\n\n            # Find the first client (or specific client if needed)\n            if clients_response.get(\"UserPoolClients\"):\n                client = clients_response[\"UserPoolClients\"][0]\n                client_id = client.get(\"ClientId\")\n\n                # If we have a client ID, get the client secret\n                if client_id:\n                    client_details = self.cognito_idp_client.describe_user_pool_client(\n                        UserPoolId=user_pool_id, ClientId=client_id\n                    )\n                    client_secret = client_details.get(\"UserPoolClient\", {}).get(\"ClientSecret\")\n\n            # Create user pool model\n            user_pool = CognitoUserPool(\n                user_pool_id=user_pool_id,\n                user_pool_name=user_pool_data.get(\"Name\", \"\"),\n                user_pool_arn=user_pool_data.get(\"Arn\"),\n                client_id=client_id,\n                client_secret=client_secret,\n                created_at=user_pool_data.get(\"CreationDate\"),\n                domain=user_pool_data.get(\"Domain\"),\n            )\n\n            return True, user_pool, f\"User pool '{user_pool_id}' found\"\n\n        except self.cognito_idp_client.exceptions.ResourceNotFoundException:\n            return False, None, f\"User pool '{user_pool_id}' not found\"\n        except Exception as e:\n            error_msg = f\"Failed to get user pool: {str(e)}\"\n            logger.error(error_msg)\n            return False, None, error_msg\n\n    def get_identity_pool(self, identity_pool_id: str) -&gt; tuple[bool, CognitoIdentityPool | None, str]:\n        \"\"\"Get details for a specific Cognito identity pool.\n\n        Args:\n            identity_pool_id: ID of the identity pool.\n\n        Returns:\n            Tuple of (success, identity_pool, message).\n        \"\"\"\n        try:\n            # Get identity pool details\n            response = self.cognito_identity_client.describe_identity_pool(IdentityPoolId=identity_pool_id)\n\n            logger.debug(f\"Identity pool details: {response}\")\n            if not response.get(\"IdentityPoolName\"):\n                return False, None, f\"Identity pool '{identity_pool_id}' not found\"\n\n            # Create identity pool model\n            identity_pool = CognitoIdentityPool(\n                identity_pool_id=identity_pool_id,\n                identity_pool_name=response.get(\"IdentityPoolName\", \"\"),\n                created_at=datetime.now(),  # Identity pool does not provide creation date\n                allow_unauthenticated_identities=response.get(\"AllowUnauthenticatedIdentities\", False),\n            )\n\n            return True, identity_pool, f\"Identity pool '{identity_pool_id}' found\"\n\n        except self.cognito_identity_client.exceptions.ResourceNotFoundException:\n            return False, None, f\"Identity pool '{identity_pool_id}' not found\"\n        except Exception as e:\n            error_msg = f\"Failed to get identity pool: {str(e)}\"\n            logger.error(error_msg)\n            return False, None, error_msg\n\n    def list_user_pools(self, name_filter: str | None = None) -&gt; tuple[bool, list[dict[str, Any]], str]:\n        \"\"\"List all user pools in the account.\n\n        Args:\n            name_filter: Optional filter for user pool names.\n\n        Returns:\n            Tuple of (success, user_pools, message).\n        \"\"\"\n        try:\n            user_pools = []\n\n            # List user pools with pagination - using simpler approach\n            paginator = self.cognito_idp_client.get_paginator(\"list_user_pools\")\n            for page in paginator.paginate():\n                for pool in page.get(\"UserPools\", []):\n                    # Apply name filter if provided\n                    if name_filter and name_filter not in pool.get(\"Name\", \"\"):\n                        continue\n\n                    user_pools.append(dict(pool))\n\n            return True, user_pools, f\"Found {len(user_pools)} user pools\"\n\n        except Exception as e:\n            error_msg = f\"Failed to list user pools: {str(e)}\"\n            logger.error(error_msg)\n            return False, [], error_msg\n\n    def list_identity_pools(self, max_results: int = 60) -&gt; tuple[bool, list[dict[str, Any]], str]:\n        \"\"\"List all identity pools in the account.\n\n        Args:\n            max_results: Maximum number of results to return.\n\n        Returns:\n            Tuple of (success, identity_pools, message).\n        \"\"\"\n        try:\n            # List identity pools\n            response = self.cognito_identity_client.list_identity_pools(\n                MaxResults=int(max_results)\n            )  # AWS SDK parameter name\n            identity_pools = response.get(\"IdentityPools\", [])\n\n            # Convert to plain dictionaries for compatibility\n            pools = []\n            for pool in identity_pools:\n                pools.append(dict(pool))\n\n            return True, pools, f\"Found {len(pools)} identity pools\"\n\n        except Exception as e:\n            error_msg = f\"Failed to list identity pools: {str(e)}\"\n            logger.error(error_msg)\n            return False, [], error_msg\n\n    def get_cognito_config_for_agent(\n        self, agent_name: str, environment: str | None = \"dev\"\n    ) -&gt; tuple[bool, CognitoConfig | None, str]:\n        \"\"\"Get Cognito configuration for a specific agent.\n\n        This will attempt to find user pools and identity pools that match the agent name\n        and environment naming pattern.\n\n        Args:\n            agent_name: Name of the agent.\n            environment: Environment name (default: dev).\n\n        Returns:\n            Tuple of (success, cognito_config, message).\n        \"\"\"\n        try:\n            # Ensure environment has a valid value\n            if environment is None:\n                environment = \"dev\"\n            # Look for user pools matching the agent name pattern\n            success, user_pools, _ = self.list_user_pools(f\"{agent_name}-{environment}\")\n\n            if not success or not user_pools:\n                return (\n                    False,\n                    None,\n                    f\"No Cognito resources found for agent '{agent_name}' in environment '{environment}'\",\n                )\n\n            # Find the first matching user pool\n            user_pool_id: str | None = None\n            for pool in user_pools:\n                name = pool.get(\"Name\", \"\")\n                if f\"{agent_name}-{environment}\" in name:\n                    user_pool_id = pool.get(\"Id\")\n                    break\n\n            if not user_pool_id:\n                return False, None, f\"No user pool found for agent '{agent_name}' in environment '{environment}'\"\n\n            # Get full user pool details\n            success, user_pool, _ = self.get_user_pool(user_pool_id)\n            if not success or not user_pool:\n                return False, None, f\"Failed to get details for user pool '{user_pool_id}'\"\n\n            # Look for identity pools matching the agent name pattern\n            success, identity_pools, _ = self.list_identity_pools()\n\n            identity_pool: CognitoIdentityPool | None = None\n            for pool in identity_pools:\n                name = pool.get(\"IdentityPoolName\", \"\")\n                if f\"{agent_name}-{environment}\" in name:\n                    identity_pool_id = pool.get(\"IdentityPoolId\")\n                    if identity_pool_id:  # Check if not None\n                        success, identity_pool, _ = self.get_identity_pool(identity_pool_id)\n                    break\n\n            # Create Cognito config\n            cognito_config = CognitoConfig(\n                region=self.region,\n                user_pool=user_pool,\n                identity_pool=identity_pool,\n                created_at=user_pool.created_at or datetime.now(),\n                last_sync=datetime.now(),\n            )\n\n            return True, cognito_config, \"Cognito configuration retrieved successfully\"\n\n        except Exception as e:\n            error_msg = f\"Failed to get Cognito configuration: {str(e)}\"\n            logger.error(error_msg)\n            return False, None, error_msg\n\n    def create_user(\n        self, user_pool_id: str, username: str, password: str, email: str, temp_password: bool = True\n    ) -&gt; tuple[bool, str]:\n        \"\"\"Create a new user in a user pool.\n\n        Args:\n            user_pool_id: ID of the user pool.\n            username: Username for the new user.\n            password: Password for the new user.\n            email: Email address for the new user.\n            temp_password: Whether the password is temporary (default: True).\n\n        Returns:\n            Tuple of (success, message).\n        \"\"\"\n        try:\n            # Create user\n            create_params: dict[str, Any] = {\n                \"UserPoolId\": user_pool_id,\n                \"Username\": username,\n                \"UserAttributes\": [{\"Name\": \"email\", \"Value\": email}, {\"Name\": \"email_verified\", \"Value\": \"true\"}],\n            }\n\n            # Add optional parameters based on conditions\n            if temp_password:\n                create_params[\"TemporaryPassword\"] = password\n                create_params[\"MessageAction\"] = \"SUPPRESS\"\n\n            self.cognito_idp_client.admin_create_user(**create_params)\n\n            # If not temporary password, set the permanent password\n            if not temp_password:\n                self.cognito_idp_client.admin_set_user_password(\n                    UserPoolId=user_pool_id, Username=username, Password=password, Permanent=True\n                )\n\n            return True, f\"User '{username}' created successfully\"\n\n        except Exception as e:\n            error_msg = f\"Failed to create user: {str(e)}\"\n            logger.error(error_msg)\n            return False, error_msg\n\n    def delete_user(self, user_pool_id: str, username: str) -&gt; tuple[bool, str]:\n        \"\"\"Delete a user from a user pool.\n\n        Args:\n            user_pool_id: ID of the user pool.\n            username: Username of the user to delete.\n\n        Returns:\n            Tuple of (success, message).\n        \"\"\"\n        try:\n            # Delete user\n            self.cognito_idp_client.admin_delete_user(UserPoolId=user_pool_id, Username=username)\n            return True, f\"User '{username}' deleted successfully\"\n\n        except Exception as e:\n            error_msg = f\"Failed to delete user: {str(e)}\"\n            logger.error(error_msg)\n            return False, error_msg\n\n    def list_users(self, user_pool_id: str) -&gt; tuple[bool, list[dict[str, Any]], str]:\n        \"\"\"List all users in a user pool.\n\n        Args:\n            user_pool_id: ID of the user pool.\n\n        Returns:\n            Tuple of (success, users, message).\n        \"\"\"\n        try:\n            users = []\n\n            # List users with pagination\n            paginator = self.cognito_idp_client.get_paginator(\"list_users\")\n            for page in paginator.paginate(UserPoolId=user_pool_id):\n                for user in page.get(\"Users\", []):\n                    users.append(dict(user))\n\n            return True, users, f\"Found {len(users)} users in user pool '{user_pool_id}'\"\n\n        except Exception as e:\n            error_msg = f\"Failed to list users: {str(e)}\"\n            logger.error(error_msg)\n            return False, [], error_msg\n\n    def check_user_pool_exists(self, user_pool_id: str) -&gt; bool:\n        \"\"\"Check if a user pool exists.\n\n        Args:\n            user_pool_id: ID of the user pool to check.\n\n        Returns:\n            bool: True if the user pool exists, False otherwise.\n        \"\"\"\n        try:\n            self.cognito_idp_client.describe_user_pool(UserPoolId=user_pool_id)\n            return True\n        except self.cognito_idp_client.exceptions.ResourceNotFoundException:\n            return False\n        except Exception:\n            return False\n\n    def check_identity_pool_exists(self, identity_pool_id: str) -&gt; bool:\n        \"\"\"Check if an identity pool exists.\n\n        Args:\n            identity_pool_id: ID of the identity pool to check.\n\n        Returns:\n            bool: True if the identity pool exists, False otherwise.\n        \"\"\"\n        try:\n            self.cognito_identity_client.describe_identity_pool(IdentityPoolId=identity_pool_id)\n            return True\n        except self.cognito_identity_client.exceptions.ResourceNotFoundException:\n            return False\n        except Exception:\n            return False\n</code></pre>"},{"location":"reference/agentcore_cli/services/cognito/#agentcore_cli.services.cognito.CognitoService.__init__","title":"<code>__init__(region, session=None)</code>","text":"<p>Initialize the Cognito service.</p> <p>Parameters:</p> Name Type Description Default <code>region</code> <code>str</code> <p>AWS region for Cognito operations.</p> required <code>session</code> <code>Session | None</code> <p>Boto3 session to use. If None, creates a new session.</p> <code>None</code> Source code in <code>agentcore_cli/services/cognito.py</code> Python<pre><code>def __init__(self, region: str, session: Session | None = None):\n    \"\"\"Initialize the Cognito service.\n\n    Args:\n        region: AWS region for Cognito operations.\n        session: Boto3 session to use. If None, creates a new session.\n    \"\"\"\n    self.region = region\n    self.session = session or Session(region_name=region)\n    self.cfn_service = CFNService(region)\n    self.cognito_idp_client = self.session.client(\"cognito-idp\", region_name=region)\n    self.cognito_identity_client = self.session.client(\"cognito-identity\", region_name=region)\n</code></pre>"},{"location":"reference/agentcore_cli/services/cognito/#agentcore_cli.services.cognito.CognitoService.check_identity_pool_exists","title":"<code>check_identity_pool_exists(identity_pool_id)</code>","text":"<p>Check if an identity pool exists.</p> <p>Parameters:</p> Name Type Description Default <code>identity_pool_id</code> <code>str</code> <p>ID of the identity pool to check.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the identity pool exists, False otherwise.</p> Source code in <code>agentcore_cli/services/cognito.py</code> Python<pre><code>def check_identity_pool_exists(self, identity_pool_id: str) -&gt; bool:\n    \"\"\"Check if an identity pool exists.\n\n    Args:\n        identity_pool_id: ID of the identity pool to check.\n\n    Returns:\n        bool: True if the identity pool exists, False otherwise.\n    \"\"\"\n    try:\n        self.cognito_identity_client.describe_identity_pool(IdentityPoolId=identity_pool_id)\n        return True\n    except self.cognito_identity_client.exceptions.ResourceNotFoundException:\n        return False\n    except Exception:\n        return False\n</code></pre>"},{"location":"reference/agentcore_cli/services/cognito/#agentcore_cli.services.cognito.CognitoService.check_user_pool_exists","title":"<code>check_user_pool_exists(user_pool_id)</code>","text":"<p>Check if a user pool exists.</p> <p>Parameters:</p> Name Type Description Default <code>user_pool_id</code> <code>str</code> <p>ID of the user pool to check.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the user pool exists, False otherwise.</p> Source code in <code>agentcore_cli/services/cognito.py</code> Python<pre><code>def check_user_pool_exists(self, user_pool_id: str) -&gt; bool:\n    \"\"\"Check if a user pool exists.\n\n    Args:\n        user_pool_id: ID of the user pool to check.\n\n    Returns:\n        bool: True if the user pool exists, False otherwise.\n    \"\"\"\n    try:\n        self.cognito_idp_client.describe_user_pool(UserPoolId=user_pool_id)\n        return True\n    except self.cognito_idp_client.exceptions.ResourceNotFoundException:\n        return False\n    except Exception:\n        return False\n</code></pre>"},{"location":"reference/agentcore_cli/services/cognito/#agentcore_cli.services.cognito.CognitoService.create_cognito_resources","title":"<code>create_cognito_resources(agent_name, environment='dev', resource_name_prefix='agentcore', allow_self_registration=False, email_verification_required=True)</code>","text":"<p>Create Cognito user pool and identity pool using CloudFormation.</p> <p>Parameters:</p> Name Type Description Default <code>agent_name</code> <code>str</code> <p>Name of the agent.</p> required <code>environment</code> <code>str | None</code> <p>Environment name (default: dev).</p> <code>'dev'</code> <code>resource_name_prefix</code> <code>str</code> <p>Prefix for resource names (default: agentcore).</p> <code>'agentcore'</code> <code>allow_self_registration</code> <code>bool</code> <p>Whether to allow users to self-register (default: False).</p> <code>False</code> <code>email_verification_required</code> <code>bool</code> <p>Whether to require email verification (default: True).</p> <code>True</code> <p>Returns:</p> Name Type Description <code>CognitoConfig</code> <code>CognitoConfig</code> <p>Cognito configuration.</p> Source code in <code>agentcore_cli/services/cognito.py</code> Python<pre><code>def create_cognito_resources(\n    self,\n    agent_name: str,\n    environment: str | None = \"dev\",\n    resource_name_prefix: str = \"agentcore\",\n    allow_self_registration: bool = False,\n    email_verification_required: bool = True,\n) -&gt; CognitoConfig:\n    \"\"\"Create Cognito user pool and identity pool using CloudFormation.\n\n    Args:\n        agent_name: Name of the agent.\n        environment: Environment name (default: dev).\n        resource_name_prefix: Prefix for resource names (default: agentcore).\n        allow_self_registration: Whether to allow users to self-register (default: False).\n        email_verification_required: Whether to require email verification (default: True).\n\n    Returns:\n        CognitoConfig: Cognito configuration.\n    \"\"\"\n    try:\n        # Ensure environment has a valid value\n        if environment is None:\n            environment = \"dev\"\n\n        # Get the template file path\n        template_dir = Path(__file__).parent / \"templates\"\n        template_path = template_dir / \"cognito.cloudformation.yaml\"\n\n        if not template_path.exists():\n            error_msg = f\"Template file not found: {template_path}\"\n            logger.error(error_msg)\n            raise Exception(error_msg)\n\n        # Read the template file\n        with open(template_path, encoding=\"utf-8\") as f:\n            template_body = f.read()\n\n        # Create stack name\n        stack_name = f\"agentcore-{agent_name}-{environment}-cognito\"\n\n        # Set up parameters\n        # Using Any type to avoid type errors with CloudFormation parameter types\n        parameters: list[Any] = [\n            {\"ParameterKey\": \"AgentName\", \"ParameterValue\": agent_name},\n            {\"ParameterKey\": \"Environment\", \"ParameterValue\": environment},\n            {\"ParameterKey\": \"ResourceNamePrefix\", \"ParameterValue\": resource_name_prefix},\n            {\"ParameterKey\": \"AllowSelfRegistration\", \"ParameterValue\": str(allow_self_registration).lower()},\n            {\n                \"ParameterKey\": \"EmailVerificationRequired\",\n                \"ParameterValue\": str(email_verification_required).lower(),\n            },\n        ]\n\n        # Create or update the stack\n        logger.info(f\"Creating/updating Cognito resources for agent '{agent_name}'...\")\n        success, message = self.cfn_service.create_update_stack(\n            stack_name, template_body, parameters, wait_for_completion=True, timeout_minutes=20\n        )\n\n        if not success:\n            raise Exception(f\"Failed to create/update Cognito stack: {message}\")\n\n        # Get stack outputs (stack is guaranteed to be complete now)\n        outputs = self.cfn_service.get_stack_outputs(stack_name)\n\n        # Extract resource information from outputs\n        cognito_info = {}\n        for output in outputs:\n            if output.get(\"OutputKey\") == \"UserPoolId\":\n                cognito_info[\"user_pool_id\"] = output.get(\"OutputValue\")\n            elif output.get(\"OutputKey\") == \"UserPoolClientId\":\n                cognito_info[\"client_id\"] = output.get(\"OutputValue\")\n            elif output.get(\"OutputKey\") == \"IdentityPoolId\":\n                cognito_info[\"identity_pool_id\"] = output.get(\"OutputValue\")\n            elif output.get(\"OutputKey\") == \"AuthenticatedUserRoleArn\":\n                cognito_info[\"auth_role_arn\"] = output.get(\"OutputValue\")\n\n        if \"user_pool_id\" in cognito_info and \"identity_pool_id\" in cognito_info:\n            # Get additional user pool info\n            user_pool_id = str(cognito_info[\"user_pool_id\"])  # Ensure string type\n            identity_pool_id = str(cognito_info[\"identity_pool_id\"])  # Ensure string type\n\n            user_pool_details = self.cognito_idp_client.describe_user_pool(UserPoolId=user_pool_id)\n            identity_pool_details = self.cognito_identity_client.describe_identity_pool(\n                IdentityPoolId=identity_pool_id\n            )\n\n            # Create User Pool model\n            user_pool = CognitoUserPool(\n                user_pool_id=user_pool_id,\n                user_pool_name=user_pool_details[\"UserPool\"].get(\n                    \"Name\", f\"{resource_name_prefix}-{agent_name}-{environment}\"\n                ),\n                user_pool_arn=user_pool_details[\"UserPool\"].get(\"Arn\"),\n                client_id=cognito_info.get(\"client_id\", \"\"),  # Provide default value\n                created_at=user_pool_details[\"UserPool\"].get(\"CreationDate\"),\n            )\n\n            # Create Identity Pool model\n            identity_pool = CognitoIdentityPool(\n                identity_pool_id=identity_pool_id,\n                identity_pool_name=identity_pool_details.get(\n                    \"IdentityPoolName\", f\"{resource_name_prefix}-{agent_name}-{environment}-identity\"\n                ),\n                created_at=datetime.now(),  # Identity Pool doesn't provide creation date\n                allow_unauthenticated_identities=identity_pool_details.get(\"AllowUnauthenticatedIdentities\", False),\n            )\n\n            # Create Cognito Config\n            cognito_config = CognitoConfig(\n                region=self.region,\n                user_pool=user_pool,\n                identity_pool=identity_pool,\n                created_at=datetime.now(),\n                last_sync=datetime.now(),\n            )\n\n            logger.success(\n                f\"Cognito resources created: User Pool ID: {user_pool.user_pool_id}, Identity Pool ID: {identity_pool.identity_pool_id}\"\n            )\n            return cognito_config\n        else:\n            logger.error(\"Failed to retrieve Cognito resource information from stack outputs\")\n            raise Exception(\"Failed to retrieve Cognito resource information from stack outputs\")\n\n    except Exception as e:\n        error_msg = f\"Failed to create Cognito resources: {str(e)}\"\n        logger.error(error_msg)\n        raise Exception(error_msg)\n</code></pre>"},{"location":"reference/agentcore_cli/services/cognito/#agentcore_cli.services.cognito.CognitoService.create_user","title":"<code>create_user(user_pool_id, username, password, email, temp_password=True)</code>","text":"<p>Create a new user in a user pool.</p> <p>Parameters:</p> Name Type Description Default <code>user_pool_id</code> <code>str</code> <p>ID of the user pool.</p> required <code>username</code> <code>str</code> <p>Username for the new user.</p> required <code>password</code> <code>str</code> <p>Password for the new user.</p> required <code>email</code> <code>str</code> <p>Email address for the new user.</p> required <code>temp_password</code> <code>bool</code> <p>Whether the password is temporary (default: True).</p> <code>True</code> <p>Returns:</p> Type Description <code>tuple[bool, str]</code> <p>Tuple of (success, message).</p> Source code in <code>agentcore_cli/services/cognito.py</code> Python<pre><code>def create_user(\n    self, user_pool_id: str, username: str, password: str, email: str, temp_password: bool = True\n) -&gt; tuple[bool, str]:\n    \"\"\"Create a new user in a user pool.\n\n    Args:\n        user_pool_id: ID of the user pool.\n        username: Username for the new user.\n        password: Password for the new user.\n        email: Email address for the new user.\n        temp_password: Whether the password is temporary (default: True).\n\n    Returns:\n        Tuple of (success, message).\n    \"\"\"\n    try:\n        # Create user\n        create_params: dict[str, Any] = {\n            \"UserPoolId\": user_pool_id,\n            \"Username\": username,\n            \"UserAttributes\": [{\"Name\": \"email\", \"Value\": email}, {\"Name\": \"email_verified\", \"Value\": \"true\"}],\n        }\n\n        # Add optional parameters based on conditions\n        if temp_password:\n            create_params[\"TemporaryPassword\"] = password\n            create_params[\"MessageAction\"] = \"SUPPRESS\"\n\n        self.cognito_idp_client.admin_create_user(**create_params)\n\n        # If not temporary password, set the permanent password\n        if not temp_password:\n            self.cognito_idp_client.admin_set_user_password(\n                UserPoolId=user_pool_id, Username=username, Password=password, Permanent=True\n            )\n\n        return True, f\"User '{username}' created successfully\"\n\n    except Exception as e:\n        error_msg = f\"Failed to create user: {str(e)}\"\n        logger.error(error_msg)\n        return False, error_msg\n</code></pre>"},{"location":"reference/agentcore_cli/services/cognito/#agentcore_cli.services.cognito.CognitoService.delete_cognito_resources","title":"<code>delete_cognito_resources(agent_name, environment='dev')</code>","text":"<p>Delete Cognito resources by deleting the CloudFormation stack.</p> <p>Parameters:</p> Name Type Description Default <code>agent_name</code> <code>str</code> <p>Name of the agent.</p> required <code>environment</code> <code>str | None</code> <p>Environment name (default: dev).</p> <code>'dev'</code> <p>Returns:</p> Type Description <code>tuple[bool, str]</code> <p>Tuple of (success, message).</p> Source code in <code>agentcore_cli/services/cognito.py</code> Python<pre><code>def delete_cognito_resources(self, agent_name: str, environment: str | None = \"dev\") -&gt; tuple[bool, str]:\n    \"\"\"Delete Cognito resources by deleting the CloudFormation stack.\n\n    Args:\n        agent_name: Name of the agent.\n        environment: Environment name (default: dev).\n\n    Returns:\n        Tuple of (success, message).\n    \"\"\"\n    try:\n        # Ensure environment has a valid value\n        if environment is None:\n            environment = \"dev\"\n\n        # Create stack name\n        stack_name = f\"agentcore-{agent_name}-{environment}-cognito\"\n\n        # Check if stack exists\n        try:\n            self.cfn_service.get_stack_status(stack_name)\n        except Exception:\n            logger.warning(f\"Cognito stack for agent '{agent_name}' not found\")\n            return False, f\"Cognito stack for agent '{agent_name}' not found\"\n\n        # Delete the stack\n        logger.info(f\"Deleting Cognito resources for agent '{agent_name}'...\")\n        self.cfn_service.delete_stack(stack_name)\n\n        logger.success(f\"Cognito resources deletion initiated for agent '{agent_name}'\")\n        return True, f\"Cognito resources deletion initiated for agent '{agent_name}'\"\n\n    except Exception as e:\n        error_msg = f\"Failed to delete Cognito resources: {str(e)}\"\n        logger.error(error_msg)\n        return False, error_msg\n</code></pre>"},{"location":"reference/agentcore_cli/services/cognito/#agentcore_cli.services.cognito.CognitoService.delete_user","title":"<code>delete_user(user_pool_id, username)</code>","text":"<p>Delete a user from a user pool.</p> <p>Parameters:</p> Name Type Description Default <code>user_pool_id</code> <code>str</code> <p>ID of the user pool.</p> required <code>username</code> <code>str</code> <p>Username of the user to delete.</p> required <p>Returns:</p> Type Description <code>tuple[bool, str]</code> <p>Tuple of (success, message).</p> Source code in <code>agentcore_cli/services/cognito.py</code> Python<pre><code>def delete_user(self, user_pool_id: str, username: str) -&gt; tuple[bool, str]:\n    \"\"\"Delete a user from a user pool.\n\n    Args:\n        user_pool_id: ID of the user pool.\n        username: Username of the user to delete.\n\n    Returns:\n        Tuple of (success, message).\n    \"\"\"\n    try:\n        # Delete user\n        self.cognito_idp_client.admin_delete_user(UserPoolId=user_pool_id, Username=username)\n        return True, f\"User '{username}' deleted successfully\"\n\n    except Exception as e:\n        error_msg = f\"Failed to delete user: {str(e)}\"\n        logger.error(error_msg)\n        return False, error_msg\n</code></pre>"},{"location":"reference/agentcore_cli/services/cognito/#agentcore_cli.services.cognito.CognitoService.get_cognito_config_for_agent","title":"<code>get_cognito_config_for_agent(agent_name, environment='dev')</code>","text":"<p>Get Cognito configuration for a specific agent.</p> <p>This will attempt to find user pools and identity pools that match the agent name and environment naming pattern.</p> <p>Parameters:</p> Name Type Description Default <code>agent_name</code> <code>str</code> <p>Name of the agent.</p> required <code>environment</code> <code>str | None</code> <p>Environment name (default: dev).</p> <code>'dev'</code> <p>Returns:</p> Type Description <code>tuple[bool, CognitoConfig | None, str]</code> <p>Tuple of (success, cognito_config, message).</p> Source code in <code>agentcore_cli/services/cognito.py</code> Python<pre><code>def get_cognito_config_for_agent(\n    self, agent_name: str, environment: str | None = \"dev\"\n) -&gt; tuple[bool, CognitoConfig | None, str]:\n    \"\"\"Get Cognito configuration for a specific agent.\n\n    This will attempt to find user pools and identity pools that match the agent name\n    and environment naming pattern.\n\n    Args:\n        agent_name: Name of the agent.\n        environment: Environment name (default: dev).\n\n    Returns:\n        Tuple of (success, cognito_config, message).\n    \"\"\"\n    try:\n        # Ensure environment has a valid value\n        if environment is None:\n            environment = \"dev\"\n        # Look for user pools matching the agent name pattern\n        success, user_pools, _ = self.list_user_pools(f\"{agent_name}-{environment}\")\n\n        if not success or not user_pools:\n            return (\n                False,\n                None,\n                f\"No Cognito resources found for agent '{agent_name}' in environment '{environment}'\",\n            )\n\n        # Find the first matching user pool\n        user_pool_id: str | None = None\n        for pool in user_pools:\n            name = pool.get(\"Name\", \"\")\n            if f\"{agent_name}-{environment}\" in name:\n                user_pool_id = pool.get(\"Id\")\n                break\n\n        if not user_pool_id:\n            return False, None, f\"No user pool found for agent '{agent_name}' in environment '{environment}'\"\n\n        # Get full user pool details\n        success, user_pool, _ = self.get_user_pool(user_pool_id)\n        if not success or not user_pool:\n            return False, None, f\"Failed to get details for user pool '{user_pool_id}'\"\n\n        # Look for identity pools matching the agent name pattern\n        success, identity_pools, _ = self.list_identity_pools()\n\n        identity_pool: CognitoIdentityPool | None = None\n        for pool in identity_pools:\n            name = pool.get(\"IdentityPoolName\", \"\")\n            if f\"{agent_name}-{environment}\" in name:\n                identity_pool_id = pool.get(\"IdentityPoolId\")\n                if identity_pool_id:  # Check if not None\n                    success, identity_pool, _ = self.get_identity_pool(identity_pool_id)\n                break\n\n        # Create Cognito config\n        cognito_config = CognitoConfig(\n            region=self.region,\n            user_pool=user_pool,\n            identity_pool=identity_pool,\n            created_at=user_pool.created_at or datetime.now(),\n            last_sync=datetime.now(),\n        )\n\n        return True, cognito_config, \"Cognito configuration retrieved successfully\"\n\n    except Exception as e:\n        error_msg = f\"Failed to get Cognito configuration: {str(e)}\"\n        logger.error(error_msg)\n        return False, None, error_msg\n</code></pre>"},{"location":"reference/agentcore_cli/services/cognito/#agentcore_cli.services.cognito.CognitoService.get_identity_pool","title":"<code>get_identity_pool(identity_pool_id)</code>","text":"<p>Get details for a specific Cognito identity pool.</p> <p>Parameters:</p> Name Type Description Default <code>identity_pool_id</code> <code>str</code> <p>ID of the identity pool.</p> required <p>Returns:</p> Type Description <code>tuple[bool, CognitoIdentityPool | None, str]</code> <p>Tuple of (success, identity_pool, message).</p> Source code in <code>agentcore_cli/services/cognito.py</code> Python<pre><code>def get_identity_pool(self, identity_pool_id: str) -&gt; tuple[bool, CognitoIdentityPool | None, str]:\n    \"\"\"Get details for a specific Cognito identity pool.\n\n    Args:\n        identity_pool_id: ID of the identity pool.\n\n    Returns:\n        Tuple of (success, identity_pool, message).\n    \"\"\"\n    try:\n        # Get identity pool details\n        response = self.cognito_identity_client.describe_identity_pool(IdentityPoolId=identity_pool_id)\n\n        logger.debug(f\"Identity pool details: {response}\")\n        if not response.get(\"IdentityPoolName\"):\n            return False, None, f\"Identity pool '{identity_pool_id}' not found\"\n\n        # Create identity pool model\n        identity_pool = CognitoIdentityPool(\n            identity_pool_id=identity_pool_id,\n            identity_pool_name=response.get(\"IdentityPoolName\", \"\"),\n            created_at=datetime.now(),  # Identity pool does not provide creation date\n            allow_unauthenticated_identities=response.get(\"AllowUnauthenticatedIdentities\", False),\n        )\n\n        return True, identity_pool, f\"Identity pool '{identity_pool_id}' found\"\n\n    except self.cognito_identity_client.exceptions.ResourceNotFoundException:\n        return False, None, f\"Identity pool '{identity_pool_id}' not found\"\n    except Exception as e:\n        error_msg = f\"Failed to get identity pool: {str(e)}\"\n        logger.error(error_msg)\n        return False, None, error_msg\n</code></pre>"},{"location":"reference/agentcore_cli/services/cognito/#agentcore_cli.services.cognito.CognitoService.get_user_pool","title":"<code>get_user_pool(user_pool_id)</code>","text":"<p>Get details for a specific Cognito user pool.</p> <p>Parameters:</p> Name Type Description Default <code>user_pool_id</code> <code>str</code> <p>ID of the user pool.</p> required <p>Returns:</p> Type Description <code>tuple[bool, CognitoUserPool | None, str]</code> <p>Tuple of (success, user_pool, message).</p> Source code in <code>agentcore_cli/services/cognito.py</code> Python<pre><code>def get_user_pool(self, user_pool_id: str) -&gt; tuple[bool, CognitoUserPool | None, str]:\n    \"\"\"Get details for a specific Cognito user pool.\n\n    Args:\n        user_pool_id: ID of the user pool.\n\n    Returns:\n        Tuple of (success, user_pool, message).\n    \"\"\"\n    try:\n        # Get user pool details\n        response = self.cognito_idp_client.describe_user_pool(UserPoolId=user_pool_id)\n        user_pool_data = response.get(\"UserPool\", {})\n\n        if not user_pool_data:\n            return False, None, f\"User pool '{user_pool_id}' not found\"\n\n        # Get user pool client\n        clients_response = self.cognito_idp_client.list_user_pool_clients(UserPoolId=user_pool_id, MaxResults=60)\n        client_id = None\n        client_secret = None\n\n        # Find the first client (or specific client if needed)\n        if clients_response.get(\"UserPoolClients\"):\n            client = clients_response[\"UserPoolClients\"][0]\n            client_id = client.get(\"ClientId\")\n\n            # If we have a client ID, get the client secret\n            if client_id:\n                client_details = self.cognito_idp_client.describe_user_pool_client(\n                    UserPoolId=user_pool_id, ClientId=client_id\n                )\n                client_secret = client_details.get(\"UserPoolClient\", {}).get(\"ClientSecret\")\n\n        # Create user pool model\n        user_pool = CognitoUserPool(\n            user_pool_id=user_pool_id,\n            user_pool_name=user_pool_data.get(\"Name\", \"\"),\n            user_pool_arn=user_pool_data.get(\"Arn\"),\n            client_id=client_id,\n            client_secret=client_secret,\n            created_at=user_pool_data.get(\"CreationDate\"),\n            domain=user_pool_data.get(\"Domain\"),\n        )\n\n        return True, user_pool, f\"User pool '{user_pool_id}' found\"\n\n    except self.cognito_idp_client.exceptions.ResourceNotFoundException:\n        return False, None, f\"User pool '{user_pool_id}' not found\"\n    except Exception as e:\n        error_msg = f\"Failed to get user pool: {str(e)}\"\n        logger.error(error_msg)\n        return False, None, error_msg\n</code></pre>"},{"location":"reference/agentcore_cli/services/cognito/#agentcore_cli.services.cognito.CognitoService.list_identity_pools","title":"<code>list_identity_pools(max_results=60)</code>","text":"<p>List all identity pools in the account.</p> <p>Parameters:</p> Name Type Description Default <code>max_results</code> <code>int</code> <p>Maximum number of results to return.</p> <code>60</code> <p>Returns:</p> Type Description <code>tuple[bool, list[dict[str, Any]], str]</code> <p>Tuple of (success, identity_pools, message).</p> Source code in <code>agentcore_cli/services/cognito.py</code> Python<pre><code>def list_identity_pools(self, max_results: int = 60) -&gt; tuple[bool, list[dict[str, Any]], str]:\n    \"\"\"List all identity pools in the account.\n\n    Args:\n        max_results: Maximum number of results to return.\n\n    Returns:\n        Tuple of (success, identity_pools, message).\n    \"\"\"\n    try:\n        # List identity pools\n        response = self.cognito_identity_client.list_identity_pools(\n            MaxResults=int(max_results)\n        )  # AWS SDK parameter name\n        identity_pools = response.get(\"IdentityPools\", [])\n\n        # Convert to plain dictionaries for compatibility\n        pools = []\n        for pool in identity_pools:\n            pools.append(dict(pool))\n\n        return True, pools, f\"Found {len(pools)} identity pools\"\n\n    except Exception as e:\n        error_msg = f\"Failed to list identity pools: {str(e)}\"\n        logger.error(error_msg)\n        return False, [], error_msg\n</code></pre>"},{"location":"reference/agentcore_cli/services/cognito/#agentcore_cli.services.cognito.CognitoService.list_user_pools","title":"<code>list_user_pools(name_filter=None)</code>","text":"<p>List all user pools in the account.</p> <p>Parameters:</p> Name Type Description Default <code>name_filter</code> <code>str | None</code> <p>Optional filter for user pool names.</p> <code>None</code> <p>Returns:</p> Type Description <code>tuple[bool, list[dict[str, Any]], str]</code> <p>Tuple of (success, user_pools, message).</p> Source code in <code>agentcore_cli/services/cognito.py</code> Python<pre><code>def list_user_pools(self, name_filter: str | None = None) -&gt; tuple[bool, list[dict[str, Any]], str]:\n    \"\"\"List all user pools in the account.\n\n    Args:\n        name_filter: Optional filter for user pool names.\n\n    Returns:\n        Tuple of (success, user_pools, message).\n    \"\"\"\n    try:\n        user_pools = []\n\n        # List user pools with pagination - using simpler approach\n        paginator = self.cognito_idp_client.get_paginator(\"list_user_pools\")\n        for page in paginator.paginate():\n            for pool in page.get(\"UserPools\", []):\n                # Apply name filter if provided\n                if name_filter and name_filter not in pool.get(\"Name\", \"\"):\n                    continue\n\n                user_pools.append(dict(pool))\n\n        return True, user_pools, f\"Found {len(user_pools)} user pools\"\n\n    except Exception as e:\n        error_msg = f\"Failed to list user pools: {str(e)}\"\n        logger.error(error_msg)\n        return False, [], error_msg\n</code></pre>"},{"location":"reference/agentcore_cli/services/cognito/#agentcore_cli.services.cognito.CognitoService.list_users","title":"<code>list_users(user_pool_id)</code>","text":"<p>List all users in a user pool.</p> <p>Parameters:</p> Name Type Description Default <code>user_pool_id</code> <code>str</code> <p>ID of the user pool.</p> required <p>Returns:</p> Type Description <code>tuple[bool, list[dict[str, Any]], str]</code> <p>Tuple of (success, users, message).</p> Source code in <code>agentcore_cli/services/cognito.py</code> Python<pre><code>def list_users(self, user_pool_id: str) -&gt; tuple[bool, list[dict[str, Any]], str]:\n    \"\"\"List all users in a user pool.\n\n    Args:\n        user_pool_id: ID of the user pool.\n\n    Returns:\n        Tuple of (success, users, message).\n    \"\"\"\n    try:\n        users = []\n\n        # List users with pagination\n        paginator = self.cognito_idp_client.get_paginator(\"list_users\")\n        for page in paginator.paginate(UserPoolId=user_pool_id):\n            for user in page.get(\"Users\", []):\n                users.append(dict(user))\n\n        return True, users, f\"Found {len(users)} users in user pool '{user_pool_id}'\"\n\n    except Exception as e:\n        error_msg = f\"Failed to list users: {str(e)}\"\n        logger.error(error_msg)\n        return False, [], error_msg\n</code></pre>"},{"location":"reference/agentcore_cli/services/config/","title":"agentcore_cli.services.config","text":""},{"location":"reference/agentcore_cli/services/config/#agentcore_cli.services.config","title":"<code>agentcore_cli.services.config</code>","text":"<p>Configuration management for AgentCore Platform CLI.</p> <p>This module provides a centralized configuration management system for the AgentCore Platform CLI, including local file storage and cloud synchronization.</p>"},{"location":"reference/agentcore_cli/services/config/#agentcore_cli.services.config.ConfigManager","title":"<code>ConfigManager</code>","text":"<p>Centralized configuration manager for AgentCore Platform CLI.</p> <p>This class is responsible for loading, saving, and managing the configuration for the AgentCore Platform CLI. It provides a clean interface for accessing and modifying configuration settings.</p> <p>The configuration is stored in a local JSON file and can be synchronized with AWS Parameter Store when cloud sync is enabled.</p> <p>Attributes:</p> Name Type Description <code>config</code> <code>AgentCoreConfig</code> <p>The current configuration.</p> <code>config_dir</code> <code>str</code> <p>Directory where configuration is stored.</p> <code>config_file</code> <code>str</code> <p>Path to the configuration file.</p> Source code in <code>agentcore_cli/services/config.py</code> Python<pre><code>class ConfigManager:\n    \"\"\"Centralized configuration manager for AgentCore Platform CLI.\n\n    This class is responsible for loading, saving, and managing the configuration\n    for the AgentCore Platform CLI. It provides a clean interface for accessing\n    and modifying configuration settings.\n\n    The configuration is stored in a local JSON file and can be synchronized with\n    AWS Parameter Store when cloud sync is enabled.\n\n    Attributes:\n        config (AgentCoreConfig): The current configuration.\n        config_dir (str): Directory where configuration is stored.\n        config_file (str): Path to the configuration file.\n    \"\"\"\n\n    def __init__(self) -&gt; None:\n        \"\"\"Initialize the configuration manager.\"\"\"\n        self.config = AgentCoreConfig()\n        self.config_dir = os.path.join(os.getcwd(), \".agentcore\")\n        self.config_file = os.path.join(self.config_dir, \"config.json\")\n        self._load_config()\n\n    def _load_config(self) -&gt; None:\n        \"\"\"Load configuration from local file.\n\n        If the file doesn't exist or can't be parsed, a default configuration\n        is used.\n        \"\"\"\n        try:\n            # Create config directory if it doesn't exist\n            os.makedirs(self.config_dir, exist_ok=True)\n\n            # Check if config file exists\n            if not os.path.exists(self.config_file):\n                logger.debug(f\"Configuration file not found at {self.config_file}\")\n                self._create_default_config()\n                self.save_config()\n                return\n\n            # Load the config file\n            with open(self.config_file, \"r\") as f:\n                config_data = json.load(f)\n\n            # Parse the config data\n            self.config = AgentCoreConfig.model_validate(config_data)\n            self.config.config_path = self.config_file\n\n            logger.debug(f\"Configuration loaded from {self.config_file}\")\n\n        except json.JSONDecodeError as e:\n            logger.error(f\"Failed to parse configuration file: {str(e)}\")\n            self._create_default_config()\n            self.save_config()\n        except Exception as e:\n            logger.error(f\"Error loading configuration: {str(e)}\")\n            self._create_default_config()\n\n    def _create_default_config(self) -&gt; None:\n        \"\"\"Create a default configuration.\"\"\"\n        # Create default environment\n        default_env = EnvironmentConfig(name=\"dev\", region=\"us-west-2\")\n        # Set creation timestamp manually since it's in the validator\n        default_env.created_at = datetime.now()\n\n        # Create default global resources\n        from agentcore_cli.models.config import GlobalResourceConfig\n\n        global_resources = GlobalResourceConfig()\n\n        # Create default config with minimal parameters\n        self.config = AgentCoreConfig()\n\n        # Set properties after creation\n        self.config.current_environment = \"dev\"\n        self.config.environments = {\"dev\": default_env}\n        self.config.global_resources = global_resources\n        self.config.config_path = self.config_file\n\n        logger.debug(\"Created default configuration\")\n\n    def save_config(self) -&gt; bool:\n        \"\"\"Save current configuration to file.\"\"\"\n        try:\n            # Ensure the config directory exists\n            os.makedirs(self.config_dir, exist_ok=True)\n\n            # Convert to dict and save\n            config_dict = self.config.model_dump(mode=\"json\")\n\n            # Remove config_path to avoid circular references\n            if \"config_path\" in config_dict:\n                del config_dict[\"config_path\"]\n\n            with open(self.config_file, \"w\") as f:\n                json.dump(config_dict, f, indent=2, default=str)\n\n            logger.debug(f\"Configuration saved to {self.config_file}\")\n\n            # Perform auto-sync if enabled\n            if (\n                self.config.global_resources.sync_config\n                and self.config.global_resources.sync_config.cloud_config_enabled\n            ):\n                self.sync_with_cloud(auto=True)\n\n            return True\n        except Exception as e:\n            logger.error(f\"Failed to save configuration: {str(e)}\")\n            return False\n\n    def sync_with_cloud(self, auto: bool = False) -&gt; CloudSyncResult:\n        \"\"\"Sync configuration with AWS Parameter Store.\n\n        Args:\n            auto: Whether this is an automatic sync.\n\n        Returns:\n            CloudSyncResult: Result of the sync operation.\n        \"\"\"\n        from agentcore_cli.services.config_sync import ConfigSyncService\n\n        # Only sync if cloud sync is enabled\n        if not self.config.global_resources.sync_config.cloud_config_enabled:\n            return CloudSyncResult(\n                success=False,\n                message=\"Cloud sync is not enabled\",\n                environment=self.config.current_environment,\n                synced_items={},\n                errors=[\"Cloud sync is not enabled. Enable it first with 'config sync --enable'.\"],\n            )\n\n        # Only auto-sync if auto-sync is enabled\n        if auto and (not self.config.global_resources.sync_config.auto_sync_enabled):\n            return CloudSyncResult(\n                success=True,\n                message=\"Auto-sync is disabled\",\n                environment=self.config.current_environment,\n                synced_items={},\n                errors=[],\n            )\n\n        # Get current environment region\n        region = self.get_region()\n\n        # Create sync service\n        sync_service = ConfigSyncService(region=region, config=self.config)\n\n        # Check if we should auto-sync\n        if auto and not sync_service.should_auto_sync:\n            return CloudSyncResult(\n                success=True,\n                message=\"Automatic sync not needed\",\n                environment=self.config.current_environment,\n                synced_items={},\n                errors=[],\n            )\n\n        # Push config to cloud\n        return sync_service.push_config_to_cloud(self.config)\n\n    def pull_from_cloud(self) -&gt; bool:\n        \"\"\"Pull configuration from AWS Parameter Store.\n\n        Returns:\n            bool: True if successful, False otherwise.\n        \"\"\"\n        from agentcore_cli.services.config_sync import ConfigSyncService\n\n        # Only sync if cloud sync is enabled\n        if (\n            not self.config.global_resources.sync_config\n            or not self.config.global_resources.sync_config.cloud_config_enabled\n        ):\n            logger.error(\"Cloud sync is not enabled\")\n            return False\n\n        # Get current environment region\n        region = self.get_region()\n\n        # Create sync service\n        sync_service = ConfigSyncService(region=region, config=self.config)\n\n        # Pull config from cloud\n        success, config_dict, errors = sync_service.pull_config_from_cloud()\n\n        if not success:\n            logger.error(f\"Failed to pull configuration from cloud: {errors}\")\n            return False\n\n        try:\n            # Update config with cloud data\n            self.config = AgentCoreConfig.model_validate(config_dict)\n            self.config.config_path = self.config_file\n\n            # Save the updated config\n            self.save_config()\n\n            return True\n        except Exception as e:\n            logger.error(f\"Failed to update configuration with cloud data: {str(e)}\")\n            return False\n\n    def get_cloud_sync_status(self, environment: str | None = None) -&gt; SyncStatus:\n        \"\"\"Get the sync status between local and cloud configuration.\n\n        Args:\n            environment: Optional environment to check. If None, checks current environment.\n\n        Returns:\n            SyncStatus: Sync status between local and cloud.\n        \"\"\"\n        from agentcore_cli.services.config_sync import ConfigSyncService\n\n        env = environment or self.config.current_environment\n        region = self.get_environment(env).region\n\n        sync_service = ConfigSyncService(region=region, config=self.config)\n        return sync_service.check_sync_status(self.config, env)\n\n    def enable_cloud_sync(self, enable: bool = True) -&gt; bool:\n        \"\"\"Enable or disable cloud configuration sync.\n\n        Args:\n            enable: Whether to enable or disable cloud sync.\n\n        Returns:\n            bool: True if successful, False otherwise.\n        \"\"\"\n        from agentcore_cli.services.config_sync import ConfigSyncService\n\n        region = self.get_region()\n        sync_service = ConfigSyncService(region=region, config=self.config)\n\n        result = sync_service.enable_cloud_sync(self.config, enable)\n\n        if result:\n            self.save_config()\n\n        return result\n\n    def enable_auto_sync(self, enable: bool = True) -&gt; bool:\n        \"\"\"Enable or disable automatic configuration sync.\n\n        Args:\n            enable: Whether to enable or disable auto-sync.\n\n        Returns:\n            bool: True if successful, False otherwise.\n        \"\"\"\n        from agentcore_cli.services.config_sync import ConfigSyncService\n\n        region = self.get_region()\n        sync_service = ConfigSyncService(region=region, config=self.config)\n\n        result = sync_service.enable_auto_sync(self.config, enable)\n\n        if result:\n            self.save_config()\n\n        return result\n\n    def set_sync_interval(self, minutes: int) -&gt; bool:\n        \"\"\"Set the sync interval for auto-sync.\n\n        Args:\n            minutes: Sync interval in minutes.\n\n        Returns:\n            bool: True if successful, False otherwise.\n        \"\"\"\n        try:\n            if not self.config.global_resources.sync_config:\n                self.config.global_resources.sync_config = SyncConfig()\n\n            self.config.global_resources.sync_config.sync_interval_minutes = minutes\n            self.save_config()\n\n            return True\n        except Exception as e:\n            logger.error(f\"Failed to set sync interval: {str(e)}\")\n            return False\n\n    def get_region(self, environment: str | None = None) -&gt; str:\n        \"\"\"Get the AWS region for an environment.\n\n        Args:\n            environment: Optional environment name. If None, uses current environment.\n\n        Returns:\n            str: AWS region.\n        \"\"\"\n        env_name = environment or self.config.current_environment\n\n        if env_name in self.config.environments:\n            return self.config.environments[env_name].region\n        else:\n            # Default to us-west-2\n            return \"us-west-2\"\n\n    @property\n    def current_environment(self) -&gt; str:\n        \"\"\"Get the current environment name.\n\n        Returns:\n            str: Current environment name.\n        \"\"\"\n        return self.config.current_environment\n\n    def set_current_environment(self, env_name: str) -&gt; bool:\n        \"\"\"Set the current environment.\n\n        Args:\n            env_name: Environment name.\n\n        Returns:\n            bool: True if successful, False otherwise.\n        \"\"\"\n        # Check if environment exists\n        if env_name not in self.config.environments:\n            logger.error(f\"Environment '{env_name}' does not exist\")\n            return False\n\n        # Set current environment\n        self.config.current_environment = env_name\n        self.save_config()\n\n        logger.debug(f\"Current environment set to '{env_name}'\")\n        return True\n\n    def get_environment(self, name: str | None = None) -&gt; EnvironmentConfig:\n        \"\"\"Get an environment configuration.\n\n        Args:\n            name: Optional environment name. If None, uses current environment.\n\n        Returns:\n            EnvironmentConfig: Environment configuration.\n\n        Raises:\n            KeyError: If the environment does not exist.\n        \"\"\"\n        env_name = name or self.config.current_environment\n\n        if env_name not in self.config.environments:\n            raise KeyError(f\"Environment '{env_name}' does not exist\")\n\n        return self.config.environments[env_name]\n\n    def add_environment(self, name: str, region: str) -&gt; bool:\n        \"\"\"Add a new environment.\n\n        Args:\n            name: Environment name.\n            region: AWS region.\n\n        Returns:\n            bool: True if successful, False otherwise.\n        \"\"\"\n        try:\n            # Check if environment already exists\n            if name in self.config.environments:\n                logger.error(f\"Environment '{name}' already exists\")\n                return False\n\n            # Create environment\n            env = EnvironmentConfig(name=name, region=region, created_at=datetime.now())\n\n            # Add to config\n            self.config.environments[name] = env\n\n            # Save config\n            self.save_config()\n\n            logger.info(f\"Environment '{name}' added\")\n            return True\n        except Exception as e:\n            logger.error(f\"Failed to add environment: {str(e)}\")\n            return False\n\n    def update_environment(self, name: str, **kwargs: Any) -&gt; bool:\n        \"\"\"Update an environment.\n\n        Args:\n            name: Environment name.\n            **kwargs: Environment properties to update.\n\n        Returns:\n            bool: True if successful, False otherwise.\n        \"\"\"\n        try:\n            # Check if environment exists\n            if name not in self.config.environments:\n                logger.error(f\"Environment '{name}' does not exist\")\n                return False\n\n            # Get environment\n            env = self.config.environments[name]\n\n            # Update properties\n            for key, value in kwargs.items():\n                if hasattr(env, key):\n                    setattr(env, key, value)\n\n            # Update timestamp\n            env.updated_at = datetime.now()\n\n            # Save config\n            self.save_config()\n\n            logger.info(f\"Environment '{name}' updated\")\n            return True\n        except Exception as e:\n            logger.error(f\"Failed to update environment: {str(e)}\")\n            return False\n\n    def delete_environment(self, name: str) -&gt; bool:\n        \"\"\"Delete an environment.\n\n        Args:\n            name: Environment name.\n\n        Returns:\n            bool: True if successful, False otherwise.\n        \"\"\"\n        try:\n            # Check if environment exists\n            if name not in self.config.environments:\n                logger.error(f\"Environment '{name}' does not exist\")\n                return False\n\n            # Check if it's the current environment\n            if name == self.config.current_environment:\n                logger.error(f\"Cannot delete current environment '{name}'\")\n                return False\n\n            # Delete environment\n            del self.config.environments[name]\n\n            # Save config\n            self.save_config()\n\n            logger.info(f\"Environment '{name}' deleted\")\n            return True\n        except Exception as e:\n            logger.error(f\"Failed to delete environment: {str(e)}\")\n            return False\n\n    def get_agent_runtime(self, name: str, environment: str | None = None) -&gt; AgentRuntime | None:\n        \"\"\"Get an agent runtime by name from the specified or current environment.\n\n        Args:\n            name: Agent runtime name.\n            environment: Environment name. If None, uses current environment.\n\n        Returns:\n            Optional[AgentRuntime]: Agent runtime if found, None otherwise.\n        \"\"\"\n        env_name = environment or self.config.current_environment\n        try:\n            env = self.get_environment(env_name)\n            return env.agent_runtimes.get(name)\n        except KeyError:\n            logger.error(f\"Environment '{env_name}' does not exist\")\n            return None\n\n    def add_agent_runtime(self, name: str, runtime_config: AgentRuntime, environment: str | None = None) -&gt; bool:\n        \"\"\"Add an agent runtime to the specified or current environment.\n\n        Args:\n            name: Agent runtime name.\n            runtime_config: Agent runtime configuration.\n            environment: Environment name. If None, uses current environment.\n\n        Returns:\n            bool: True if successful, False otherwise.\n        \"\"\"\n        try:\n            env_name = environment or self.config.current_environment\n            env = self.get_environment(env_name)\n\n            # Ensure the runtime has the correct region\n            runtime_config.region = env.region\n\n            # Set or update the agent runtime in the environment\n            env.agent_runtimes[name] = runtime_config\n\n            # Update environment timestamp\n            env.updated_at = datetime.now()\n\n            # Save config\n            self.save_config()\n\n            logger.info(f\"Agent runtime '{name}' added to environment '{env_name}'\")\n            return True\n        except KeyError:\n            logger.error(f\"Environment '{env_name}' does not exist\")\n            return False\n        except Exception as e:\n            logger.error(f\"Failed to add agent runtime: {str(e)}\")\n            return False\n\n    def update_agent_runtime(self, name: str, environment: str | None = None, **kwargs: Any) -&gt; bool:\n        \"\"\"Update an agent runtime in the specified or current environment.\n\n        Args:\n            name: Agent runtime name.\n            environment: Environment name. If None, uses current environment.\n            **kwargs: Runtime properties to update.\n\n        Returns:\n            bool: True if successful, False otherwise.\n        \"\"\"\n        try:\n            env_name = environment or self.config.current_environment\n            env = self.get_environment(env_name)\n\n            # Check if agent runtime exists in this environment\n            if name not in env.agent_runtimes:\n                logger.error(f\"Agent runtime '{name}' does not exist in environment '{env_name}'\")\n                return False\n\n            # Get agent runtime\n            runtime = env.agent_runtimes[name]\n\n            # Update properties\n            for key, value in kwargs.items():\n                if hasattr(runtime, key):\n                    setattr(runtime, key, value)\n\n            # Update timestamp\n            runtime.updated_at = datetime.now()\n            env.updated_at = datetime.now()\n\n            # Save config\n            self.save_config()\n\n            logger.info(f\"Agent runtime '{name}' updated in environment '{env_name}'\")\n            return True\n        except KeyError:\n            logger.error(f\"Environment '{env_name}' does not exist\")\n            return False\n        except Exception as e:\n            logger.error(f\"Failed to update agent runtime: {str(e)}\")\n            return False\n\n    def delete_agent_runtime(self, name: str, environment: str | None = None) -&gt; bool:\n        \"\"\"Delete an agent runtime from the specified or current environment.\n\n        Args:\n            name: Agent runtime name.\n            environment: Environment name. If None, uses current environment.\n\n        Returns:\n            bool: True if successful, False otherwise.\n        \"\"\"\n        try:\n            env_name = environment or self.config.current_environment\n            env = self.get_environment(env_name)\n\n            # Check if agent runtime exists in this environment\n            if name not in env.agent_runtimes:\n                logger.error(f\"Agent runtime '{name}' does not exist in environment '{env_name}'\")\n                return False\n\n            # Delete agent runtime\n            del env.agent_runtimes[name]\n\n            # Update environment timestamp\n            env.updated_at = datetime.now()\n\n            # Save config\n            self.save_config()\n\n            logger.info(f\"Agent runtime '{name}' deleted from environment '{env_name}'\")\n            return True\n        except KeyError:\n            logger.error(f\"Environment '{env_name}' does not exist\")\n            return False\n        except Exception as e:\n            logger.error(f\"Failed to delete agent runtime: {str(e)}\")\n            return False\n\n    def add_ecr_repository(self, name: str, repo_config: ECRRepository) -&gt; bool:\n        \"\"\"Add an ECR repository to global resources.\n\n        Args:\n            name: Repository name.\n            repo_config: Repository configuration.\n\n        Returns:\n            bool: True if successful, False otherwise.\n        \"\"\"\n        try:\n            # Set or update the ECR repository in global resources\n            self.config.global_resources.ecr_repositories[name] = repo_config\n\n            # Save config\n            self.save_config()\n\n            logger.info(f\"ECR repository '{name}' added to global resources\")\n            return True\n        except Exception as e:\n            logger.error(f\"Failed to add ECR repository: {str(e)}\")\n            return False\n\n    def add_iam_role(self, name: str, role_config: IAMRoleConfig) -&gt; bool:\n        \"\"\"Add an IAM role to global resources.\n\n        Args:\n            name: Role name.\n            role_config: Role configuration.\n\n        Returns:\n            bool: True if successful, False otherwise.\n        \"\"\"\n        try:\n            # Set or update the IAM role in global resources\n            self.config.global_resources.iam_roles[name] = role_config\n\n            # Save config\n            self.save_config()\n\n            logger.info(f\"IAM role '{name}' added to global resources\")\n            return True\n        except Exception as e:\n            logger.error(f\"Failed to add IAM role: {str(e)}\")\n            return False\n\n    def add_cognito_config(self, env_name: str, cognito_config: CognitoConfig) -&gt; bool:\n        \"\"\"Add a Cognito configuration to an environment.\n\n        Args:\n            env_name: Environment name.\n            cognito_config: Cognito configuration.\n\n        Returns:\n            bool: True if successful, False otherwise.\n        \"\"\"\n        try:\n            # Check if environment exists\n            if env_name not in self.config.environments:\n                logger.error(f\"Environment '{env_name}' does not exist\")\n                return False\n\n            # Get environment\n            env = self.config.environments[env_name]\n\n            # Set Cognito config\n            env.cognito = cognito_config\n\n            # Update timestamp\n            env.updated_at = datetime.now()\n\n            # Save config\n            self.save_config()\n\n            logger.info(f\"Cognito configuration added to environment '{env_name}'\")\n            return True\n        except Exception as e:\n            logger.error(f\"Failed to add Cognito configuration: {str(e)}\")\n            return False\n\n    def set_default_agent_runtime(self, env_name: str, agent_name: str) -&gt; bool:\n        \"\"\"Set the default agent runtime for an environment.\n\n        Args:\n            env_name: Environment name.\n            agent_name: Agent runtime name.\n\n        Returns:\n            bool: True if successful, False otherwise.\n        \"\"\"\n        try:\n            # Check if environment exists\n            if env_name not in self.config.environments:\n                logger.error(f\"Environment '{env_name}' does not exist\")\n                return False\n\n            # Get environment\n            env = self.config.environments[env_name]\n\n            # Check if agent runtime exists in this environment\n            if agent_name not in env.agent_runtimes:\n                logger.error(f\"Agent runtime '{agent_name}' does not exist in environment '{env_name}'\")\n                return False\n\n            # Set default agent runtime\n            env.default_agent_runtime = agent_name\n\n            # Update timestamp\n            env.updated_at = datetime.now()\n\n            # Save config\n            self.save_config()\n\n            logger.info(f\"Default agent runtime set to '{agent_name}' in environment '{env_name}'\")\n            return True\n        except Exception as e:\n            logger.error(f\"Failed to set default agent runtime: {str(e)}\")\n            return False\n\n    def export_config(self, file_path: str) -&gt; bool:\n        \"\"\"Export configuration to a file.\n\n        Args:\n            file_path: Path to export the configuration to.\n\n        Returns:\n            bool: True if successful, False otherwise.\n        \"\"\"\n        try:\n            # Convert to dict\n            config_dict = self.config.model_dump(mode=\"json\")\n\n            # Remove config_path to avoid circular references\n            if \"config_path\" in config_dict:\n                del config_dict[\"config_path\"]\n\n            # Write to file\n            with open(file_path, \"w\") as f:\n                json.dump(config_dict, f, indent=2, default=str)\n\n            logger.info(f\"Configuration exported to {file_path}\")\n            return True\n        except Exception as e:\n            logger.error(f\"Failed to export configuration: {str(e)}\")\n            return False\n\n    def import_config(self, file_path: str) -&gt; bool:\n        \"\"\"Import configuration from a file.\n\n        Args:\n            file_path: Path to import the configuration from.\n\n        Returns:\n            bool: True if successful, False otherwise.\n        \"\"\"\n        try:\n            # Read file\n            with open(file_path, \"r\") as f:\n                config_data = json.load(f)\n\n            # Parse config\n            new_config = AgentCoreConfig.model_validate(config_data)\n\n            # Keep the config path\n            new_config.config_path = self.config_file\n\n            # Update config\n            self.config = new_config\n\n            # Save config\n            self.save_config()\n\n            logger.info(f\"Configuration imported from {file_path}\")\n            return True\n        except Exception as e:\n            logger.error(f\"Failed to import configuration: {str(e)}\")\n            return False\n</code></pre>"},{"location":"reference/agentcore_cli/services/config/#agentcore_cli.services.config.ConfigManager.current_environment","title":"<code>current_environment</code>  <code>property</code>","text":"<p>Get the current environment name.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Current environment name.</p>"},{"location":"reference/agentcore_cli/services/config/#agentcore_cli.services.config.ConfigManager.__init__","title":"<code>__init__()</code>","text":"<p>Initialize the configuration manager.</p> Source code in <code>agentcore_cli/services/config.py</code> Python<pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize the configuration manager.\"\"\"\n    self.config = AgentCoreConfig()\n    self.config_dir = os.path.join(os.getcwd(), \".agentcore\")\n    self.config_file = os.path.join(self.config_dir, \"config.json\")\n    self._load_config()\n</code></pre>"},{"location":"reference/agentcore_cli/services/config/#agentcore_cli.services.config.ConfigManager.add_agent_runtime","title":"<code>add_agent_runtime(name, runtime_config, environment=None)</code>","text":"<p>Add an agent runtime to the specified or current environment.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Agent runtime name.</p> required <code>runtime_config</code> <code>AgentRuntime</code> <p>Agent runtime configuration.</p> required <code>environment</code> <code>str | None</code> <p>Environment name. If None, uses current environment.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>agentcore_cli/services/config.py</code> Python<pre><code>def add_agent_runtime(self, name: str, runtime_config: AgentRuntime, environment: str | None = None) -&gt; bool:\n    \"\"\"Add an agent runtime to the specified or current environment.\n\n    Args:\n        name: Agent runtime name.\n        runtime_config: Agent runtime configuration.\n        environment: Environment name. If None, uses current environment.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    try:\n        env_name = environment or self.config.current_environment\n        env = self.get_environment(env_name)\n\n        # Ensure the runtime has the correct region\n        runtime_config.region = env.region\n\n        # Set or update the agent runtime in the environment\n        env.agent_runtimes[name] = runtime_config\n\n        # Update environment timestamp\n        env.updated_at = datetime.now()\n\n        # Save config\n        self.save_config()\n\n        logger.info(f\"Agent runtime '{name}' added to environment '{env_name}'\")\n        return True\n    except KeyError:\n        logger.error(f\"Environment '{env_name}' does not exist\")\n        return False\n    except Exception as e:\n        logger.error(f\"Failed to add agent runtime: {str(e)}\")\n        return False\n</code></pre>"},{"location":"reference/agentcore_cli/services/config/#agentcore_cli.services.config.ConfigManager.add_cognito_config","title":"<code>add_cognito_config(env_name, cognito_config)</code>","text":"<p>Add a Cognito configuration to an environment.</p> <p>Parameters:</p> Name Type Description Default <code>env_name</code> <code>str</code> <p>Environment name.</p> required <code>cognito_config</code> <code>CognitoConfig</code> <p>Cognito configuration.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>agentcore_cli/services/config.py</code> Python<pre><code>def add_cognito_config(self, env_name: str, cognito_config: CognitoConfig) -&gt; bool:\n    \"\"\"Add a Cognito configuration to an environment.\n\n    Args:\n        env_name: Environment name.\n        cognito_config: Cognito configuration.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    try:\n        # Check if environment exists\n        if env_name not in self.config.environments:\n            logger.error(f\"Environment '{env_name}' does not exist\")\n            return False\n\n        # Get environment\n        env = self.config.environments[env_name]\n\n        # Set Cognito config\n        env.cognito = cognito_config\n\n        # Update timestamp\n        env.updated_at = datetime.now()\n\n        # Save config\n        self.save_config()\n\n        logger.info(f\"Cognito configuration added to environment '{env_name}'\")\n        return True\n    except Exception as e:\n        logger.error(f\"Failed to add Cognito configuration: {str(e)}\")\n        return False\n</code></pre>"},{"location":"reference/agentcore_cli/services/config/#agentcore_cli.services.config.ConfigManager.add_ecr_repository","title":"<code>add_ecr_repository(name, repo_config)</code>","text":"<p>Add an ECR repository to global resources.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Repository name.</p> required <code>repo_config</code> <code>ECRRepository</code> <p>Repository configuration.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>agentcore_cli/services/config.py</code> Python<pre><code>def add_ecr_repository(self, name: str, repo_config: ECRRepository) -&gt; bool:\n    \"\"\"Add an ECR repository to global resources.\n\n    Args:\n        name: Repository name.\n        repo_config: Repository configuration.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    try:\n        # Set or update the ECR repository in global resources\n        self.config.global_resources.ecr_repositories[name] = repo_config\n\n        # Save config\n        self.save_config()\n\n        logger.info(f\"ECR repository '{name}' added to global resources\")\n        return True\n    except Exception as e:\n        logger.error(f\"Failed to add ECR repository: {str(e)}\")\n        return False\n</code></pre>"},{"location":"reference/agentcore_cli/services/config/#agentcore_cli.services.config.ConfigManager.add_environment","title":"<code>add_environment(name, region)</code>","text":"<p>Add a new environment.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Environment name.</p> required <code>region</code> <code>str</code> <p>AWS region.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>agentcore_cli/services/config.py</code> Python<pre><code>def add_environment(self, name: str, region: str) -&gt; bool:\n    \"\"\"Add a new environment.\n\n    Args:\n        name: Environment name.\n        region: AWS region.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    try:\n        # Check if environment already exists\n        if name in self.config.environments:\n            logger.error(f\"Environment '{name}' already exists\")\n            return False\n\n        # Create environment\n        env = EnvironmentConfig(name=name, region=region, created_at=datetime.now())\n\n        # Add to config\n        self.config.environments[name] = env\n\n        # Save config\n        self.save_config()\n\n        logger.info(f\"Environment '{name}' added\")\n        return True\n    except Exception as e:\n        logger.error(f\"Failed to add environment: {str(e)}\")\n        return False\n</code></pre>"},{"location":"reference/agentcore_cli/services/config/#agentcore_cli.services.config.ConfigManager.add_iam_role","title":"<code>add_iam_role(name, role_config)</code>","text":"<p>Add an IAM role to global resources.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Role name.</p> required <code>role_config</code> <code>IAMRoleConfig</code> <p>Role configuration.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>agentcore_cli/services/config.py</code> Python<pre><code>def add_iam_role(self, name: str, role_config: IAMRoleConfig) -&gt; bool:\n    \"\"\"Add an IAM role to global resources.\n\n    Args:\n        name: Role name.\n        role_config: Role configuration.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    try:\n        # Set or update the IAM role in global resources\n        self.config.global_resources.iam_roles[name] = role_config\n\n        # Save config\n        self.save_config()\n\n        logger.info(f\"IAM role '{name}' added to global resources\")\n        return True\n    except Exception as e:\n        logger.error(f\"Failed to add IAM role: {str(e)}\")\n        return False\n</code></pre>"},{"location":"reference/agentcore_cli/services/config/#agentcore_cli.services.config.ConfigManager.delete_agent_runtime","title":"<code>delete_agent_runtime(name, environment=None)</code>","text":"<p>Delete an agent runtime from the specified or current environment.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Agent runtime name.</p> required <code>environment</code> <code>str | None</code> <p>Environment name. If None, uses current environment.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>agentcore_cli/services/config.py</code> Python<pre><code>def delete_agent_runtime(self, name: str, environment: str | None = None) -&gt; bool:\n    \"\"\"Delete an agent runtime from the specified or current environment.\n\n    Args:\n        name: Agent runtime name.\n        environment: Environment name. If None, uses current environment.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    try:\n        env_name = environment or self.config.current_environment\n        env = self.get_environment(env_name)\n\n        # Check if agent runtime exists in this environment\n        if name not in env.agent_runtimes:\n            logger.error(f\"Agent runtime '{name}' does not exist in environment '{env_name}'\")\n            return False\n\n        # Delete agent runtime\n        del env.agent_runtimes[name]\n\n        # Update environment timestamp\n        env.updated_at = datetime.now()\n\n        # Save config\n        self.save_config()\n\n        logger.info(f\"Agent runtime '{name}' deleted from environment '{env_name}'\")\n        return True\n    except KeyError:\n        logger.error(f\"Environment '{env_name}' does not exist\")\n        return False\n    except Exception as e:\n        logger.error(f\"Failed to delete agent runtime: {str(e)}\")\n        return False\n</code></pre>"},{"location":"reference/agentcore_cli/services/config/#agentcore_cli.services.config.ConfigManager.delete_environment","title":"<code>delete_environment(name)</code>","text":"<p>Delete an environment.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Environment name.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>agentcore_cli/services/config.py</code> Python<pre><code>def delete_environment(self, name: str) -&gt; bool:\n    \"\"\"Delete an environment.\n\n    Args:\n        name: Environment name.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    try:\n        # Check if environment exists\n        if name not in self.config.environments:\n            logger.error(f\"Environment '{name}' does not exist\")\n            return False\n\n        # Check if it's the current environment\n        if name == self.config.current_environment:\n            logger.error(f\"Cannot delete current environment '{name}'\")\n            return False\n\n        # Delete environment\n        del self.config.environments[name]\n\n        # Save config\n        self.save_config()\n\n        logger.info(f\"Environment '{name}' deleted\")\n        return True\n    except Exception as e:\n        logger.error(f\"Failed to delete environment: {str(e)}\")\n        return False\n</code></pre>"},{"location":"reference/agentcore_cli/services/config/#agentcore_cli.services.config.ConfigManager.enable_auto_sync","title":"<code>enable_auto_sync(enable=True)</code>","text":"<p>Enable or disable automatic configuration sync.</p> <p>Parameters:</p> Name Type Description Default <code>enable</code> <code>bool</code> <p>Whether to enable or disable auto-sync.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>agentcore_cli/services/config.py</code> Python<pre><code>def enable_auto_sync(self, enable: bool = True) -&gt; bool:\n    \"\"\"Enable or disable automatic configuration sync.\n\n    Args:\n        enable: Whether to enable or disable auto-sync.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    from agentcore_cli.services.config_sync import ConfigSyncService\n\n    region = self.get_region()\n    sync_service = ConfigSyncService(region=region, config=self.config)\n\n    result = sync_service.enable_auto_sync(self.config, enable)\n\n    if result:\n        self.save_config()\n\n    return result\n</code></pre>"},{"location":"reference/agentcore_cli/services/config/#agentcore_cli.services.config.ConfigManager.enable_cloud_sync","title":"<code>enable_cloud_sync(enable=True)</code>","text":"<p>Enable or disable cloud configuration sync.</p> <p>Parameters:</p> Name Type Description Default <code>enable</code> <code>bool</code> <p>Whether to enable or disable cloud sync.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>agentcore_cli/services/config.py</code> Python<pre><code>def enable_cloud_sync(self, enable: bool = True) -&gt; bool:\n    \"\"\"Enable or disable cloud configuration sync.\n\n    Args:\n        enable: Whether to enable or disable cloud sync.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    from agentcore_cli.services.config_sync import ConfigSyncService\n\n    region = self.get_region()\n    sync_service = ConfigSyncService(region=region, config=self.config)\n\n    result = sync_service.enable_cloud_sync(self.config, enable)\n\n    if result:\n        self.save_config()\n\n    return result\n</code></pre>"},{"location":"reference/agentcore_cli/services/config/#agentcore_cli.services.config.ConfigManager.export_config","title":"<code>export_config(file_path)</code>","text":"<p>Export configuration to a file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Path to export the configuration to.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>agentcore_cli/services/config.py</code> Python<pre><code>def export_config(self, file_path: str) -&gt; bool:\n    \"\"\"Export configuration to a file.\n\n    Args:\n        file_path: Path to export the configuration to.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    try:\n        # Convert to dict\n        config_dict = self.config.model_dump(mode=\"json\")\n\n        # Remove config_path to avoid circular references\n        if \"config_path\" in config_dict:\n            del config_dict[\"config_path\"]\n\n        # Write to file\n        with open(file_path, \"w\") as f:\n            json.dump(config_dict, f, indent=2, default=str)\n\n        logger.info(f\"Configuration exported to {file_path}\")\n        return True\n    except Exception as e:\n        logger.error(f\"Failed to export configuration: {str(e)}\")\n        return False\n</code></pre>"},{"location":"reference/agentcore_cli/services/config/#agentcore_cli.services.config.ConfigManager.get_agent_runtime","title":"<code>get_agent_runtime(name, environment=None)</code>","text":"<p>Get an agent runtime by name from the specified or current environment.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Agent runtime name.</p> required <code>environment</code> <code>str | None</code> <p>Environment name. If None, uses current environment.</p> <code>None</code> <p>Returns:</p> Type Description <code>AgentRuntime | None</code> <p>Optional[AgentRuntime]: Agent runtime if found, None otherwise.</p> Source code in <code>agentcore_cli/services/config.py</code> Python<pre><code>def get_agent_runtime(self, name: str, environment: str | None = None) -&gt; AgentRuntime | None:\n    \"\"\"Get an agent runtime by name from the specified or current environment.\n\n    Args:\n        name: Agent runtime name.\n        environment: Environment name. If None, uses current environment.\n\n    Returns:\n        Optional[AgentRuntime]: Agent runtime if found, None otherwise.\n    \"\"\"\n    env_name = environment or self.config.current_environment\n    try:\n        env = self.get_environment(env_name)\n        return env.agent_runtimes.get(name)\n    except KeyError:\n        logger.error(f\"Environment '{env_name}' does not exist\")\n        return None\n</code></pre>"},{"location":"reference/agentcore_cli/services/config/#agentcore_cli.services.config.ConfigManager.get_cloud_sync_status","title":"<code>get_cloud_sync_status(environment=None)</code>","text":"<p>Get the sync status between local and cloud configuration.</p> <p>Parameters:</p> Name Type Description Default <code>environment</code> <code>str | None</code> <p>Optional environment to check. If None, checks current environment.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>SyncStatus</code> <code>SyncStatus</code> <p>Sync status between local and cloud.</p> Source code in <code>agentcore_cli/services/config.py</code> Python<pre><code>def get_cloud_sync_status(self, environment: str | None = None) -&gt; SyncStatus:\n    \"\"\"Get the sync status between local and cloud configuration.\n\n    Args:\n        environment: Optional environment to check. If None, checks current environment.\n\n    Returns:\n        SyncStatus: Sync status between local and cloud.\n    \"\"\"\n    from agentcore_cli.services.config_sync import ConfigSyncService\n\n    env = environment or self.config.current_environment\n    region = self.get_environment(env).region\n\n    sync_service = ConfigSyncService(region=region, config=self.config)\n    return sync_service.check_sync_status(self.config, env)\n</code></pre>"},{"location":"reference/agentcore_cli/services/config/#agentcore_cli.services.config.ConfigManager.get_environment","title":"<code>get_environment(name=None)</code>","text":"<p>Get an environment configuration.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str | None</code> <p>Optional environment name. If None, uses current environment.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>EnvironmentConfig</code> <code>EnvironmentConfig</code> <p>Environment configuration.</p> <p>Raises:</p> Type Description <code>KeyError</code> <p>If the environment does not exist.</p> Source code in <code>agentcore_cli/services/config.py</code> Python<pre><code>def get_environment(self, name: str | None = None) -&gt; EnvironmentConfig:\n    \"\"\"Get an environment configuration.\n\n    Args:\n        name: Optional environment name. If None, uses current environment.\n\n    Returns:\n        EnvironmentConfig: Environment configuration.\n\n    Raises:\n        KeyError: If the environment does not exist.\n    \"\"\"\n    env_name = name or self.config.current_environment\n\n    if env_name not in self.config.environments:\n        raise KeyError(f\"Environment '{env_name}' does not exist\")\n\n    return self.config.environments[env_name]\n</code></pre>"},{"location":"reference/agentcore_cli/services/config/#agentcore_cli.services.config.ConfigManager.get_region","title":"<code>get_region(environment=None)</code>","text":"<p>Get the AWS region for an environment.</p> <p>Parameters:</p> Name Type Description Default <code>environment</code> <code>str | None</code> <p>Optional environment name. If None, uses current environment.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>AWS region.</p> Source code in <code>agentcore_cli/services/config.py</code> Python<pre><code>def get_region(self, environment: str | None = None) -&gt; str:\n    \"\"\"Get the AWS region for an environment.\n\n    Args:\n        environment: Optional environment name. If None, uses current environment.\n\n    Returns:\n        str: AWS region.\n    \"\"\"\n    env_name = environment or self.config.current_environment\n\n    if env_name in self.config.environments:\n        return self.config.environments[env_name].region\n    else:\n        # Default to us-west-2\n        return \"us-west-2\"\n</code></pre>"},{"location":"reference/agentcore_cli/services/config/#agentcore_cli.services.config.ConfigManager.import_config","title":"<code>import_config(file_path)</code>","text":"<p>Import configuration from a file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Path to import the configuration from.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>agentcore_cli/services/config.py</code> Python<pre><code>def import_config(self, file_path: str) -&gt; bool:\n    \"\"\"Import configuration from a file.\n\n    Args:\n        file_path: Path to import the configuration from.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    try:\n        # Read file\n        with open(file_path, \"r\") as f:\n            config_data = json.load(f)\n\n        # Parse config\n        new_config = AgentCoreConfig.model_validate(config_data)\n\n        # Keep the config path\n        new_config.config_path = self.config_file\n\n        # Update config\n        self.config = new_config\n\n        # Save config\n        self.save_config()\n\n        logger.info(f\"Configuration imported from {file_path}\")\n        return True\n    except Exception as e:\n        logger.error(f\"Failed to import configuration: {str(e)}\")\n        return False\n</code></pre>"},{"location":"reference/agentcore_cli/services/config/#agentcore_cli.services.config.ConfigManager.pull_from_cloud","title":"<code>pull_from_cloud()</code>","text":"<p>Pull configuration from AWS Parameter Store.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>agentcore_cli/services/config.py</code> Python<pre><code>def pull_from_cloud(self) -&gt; bool:\n    \"\"\"Pull configuration from AWS Parameter Store.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    from agentcore_cli.services.config_sync import ConfigSyncService\n\n    # Only sync if cloud sync is enabled\n    if (\n        not self.config.global_resources.sync_config\n        or not self.config.global_resources.sync_config.cloud_config_enabled\n    ):\n        logger.error(\"Cloud sync is not enabled\")\n        return False\n\n    # Get current environment region\n    region = self.get_region()\n\n    # Create sync service\n    sync_service = ConfigSyncService(region=region, config=self.config)\n\n    # Pull config from cloud\n    success, config_dict, errors = sync_service.pull_config_from_cloud()\n\n    if not success:\n        logger.error(f\"Failed to pull configuration from cloud: {errors}\")\n        return False\n\n    try:\n        # Update config with cloud data\n        self.config = AgentCoreConfig.model_validate(config_dict)\n        self.config.config_path = self.config_file\n\n        # Save the updated config\n        self.save_config()\n\n        return True\n    except Exception as e:\n        logger.error(f\"Failed to update configuration with cloud data: {str(e)}\")\n        return False\n</code></pre>"},{"location":"reference/agentcore_cli/services/config/#agentcore_cli.services.config.ConfigManager.save_config","title":"<code>save_config()</code>","text":"<p>Save current configuration to file.</p> Source code in <code>agentcore_cli/services/config.py</code> Python<pre><code>def save_config(self) -&gt; bool:\n    \"\"\"Save current configuration to file.\"\"\"\n    try:\n        # Ensure the config directory exists\n        os.makedirs(self.config_dir, exist_ok=True)\n\n        # Convert to dict and save\n        config_dict = self.config.model_dump(mode=\"json\")\n\n        # Remove config_path to avoid circular references\n        if \"config_path\" in config_dict:\n            del config_dict[\"config_path\"]\n\n        with open(self.config_file, \"w\") as f:\n            json.dump(config_dict, f, indent=2, default=str)\n\n        logger.debug(f\"Configuration saved to {self.config_file}\")\n\n        # Perform auto-sync if enabled\n        if (\n            self.config.global_resources.sync_config\n            and self.config.global_resources.sync_config.cloud_config_enabled\n        ):\n            self.sync_with_cloud(auto=True)\n\n        return True\n    except Exception as e:\n        logger.error(f\"Failed to save configuration: {str(e)}\")\n        return False\n</code></pre>"},{"location":"reference/agentcore_cli/services/config/#agentcore_cli.services.config.ConfigManager.set_current_environment","title":"<code>set_current_environment(env_name)</code>","text":"<p>Set the current environment.</p> <p>Parameters:</p> Name Type Description Default <code>env_name</code> <code>str</code> <p>Environment name.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>agentcore_cli/services/config.py</code> Python<pre><code>def set_current_environment(self, env_name: str) -&gt; bool:\n    \"\"\"Set the current environment.\n\n    Args:\n        env_name: Environment name.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    # Check if environment exists\n    if env_name not in self.config.environments:\n        logger.error(f\"Environment '{env_name}' does not exist\")\n        return False\n\n    # Set current environment\n    self.config.current_environment = env_name\n    self.save_config()\n\n    logger.debug(f\"Current environment set to '{env_name}'\")\n    return True\n</code></pre>"},{"location":"reference/agentcore_cli/services/config/#agentcore_cli.services.config.ConfigManager.set_default_agent_runtime","title":"<code>set_default_agent_runtime(env_name, agent_name)</code>","text":"<p>Set the default agent runtime for an environment.</p> <p>Parameters:</p> Name Type Description Default <code>env_name</code> <code>str</code> <p>Environment name.</p> required <code>agent_name</code> <code>str</code> <p>Agent runtime name.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>agentcore_cli/services/config.py</code> Python<pre><code>def set_default_agent_runtime(self, env_name: str, agent_name: str) -&gt; bool:\n    \"\"\"Set the default agent runtime for an environment.\n\n    Args:\n        env_name: Environment name.\n        agent_name: Agent runtime name.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    try:\n        # Check if environment exists\n        if env_name not in self.config.environments:\n            logger.error(f\"Environment '{env_name}' does not exist\")\n            return False\n\n        # Get environment\n        env = self.config.environments[env_name]\n\n        # Check if agent runtime exists in this environment\n        if agent_name not in env.agent_runtimes:\n            logger.error(f\"Agent runtime '{agent_name}' does not exist in environment '{env_name}'\")\n            return False\n\n        # Set default agent runtime\n        env.default_agent_runtime = agent_name\n\n        # Update timestamp\n        env.updated_at = datetime.now()\n\n        # Save config\n        self.save_config()\n\n        logger.info(f\"Default agent runtime set to '{agent_name}' in environment '{env_name}'\")\n        return True\n    except Exception as e:\n        logger.error(f\"Failed to set default agent runtime: {str(e)}\")\n        return False\n</code></pre>"},{"location":"reference/agentcore_cli/services/config/#agentcore_cli.services.config.ConfigManager.set_sync_interval","title":"<code>set_sync_interval(minutes)</code>","text":"<p>Set the sync interval for auto-sync.</p> <p>Parameters:</p> Name Type Description Default <code>minutes</code> <code>int</code> <p>Sync interval in minutes.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>agentcore_cli/services/config.py</code> Python<pre><code>def set_sync_interval(self, minutes: int) -&gt; bool:\n    \"\"\"Set the sync interval for auto-sync.\n\n    Args:\n        minutes: Sync interval in minutes.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    try:\n        if not self.config.global_resources.sync_config:\n            self.config.global_resources.sync_config = SyncConfig()\n\n        self.config.global_resources.sync_config.sync_interval_minutes = minutes\n        self.save_config()\n\n        return True\n    except Exception as e:\n        logger.error(f\"Failed to set sync interval: {str(e)}\")\n        return False\n</code></pre>"},{"location":"reference/agentcore_cli/services/config/#agentcore_cli.services.config.ConfigManager.sync_with_cloud","title":"<code>sync_with_cloud(auto=False)</code>","text":"<p>Sync configuration with AWS Parameter Store.</p> <p>Parameters:</p> Name Type Description Default <code>auto</code> <code>bool</code> <p>Whether this is an automatic sync.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>CloudSyncResult</code> <code>CloudSyncResult</code> <p>Result of the sync operation.</p> Source code in <code>agentcore_cli/services/config.py</code> Python<pre><code>def sync_with_cloud(self, auto: bool = False) -&gt; CloudSyncResult:\n    \"\"\"Sync configuration with AWS Parameter Store.\n\n    Args:\n        auto: Whether this is an automatic sync.\n\n    Returns:\n        CloudSyncResult: Result of the sync operation.\n    \"\"\"\n    from agentcore_cli.services.config_sync import ConfigSyncService\n\n    # Only sync if cloud sync is enabled\n    if not self.config.global_resources.sync_config.cloud_config_enabled:\n        return CloudSyncResult(\n            success=False,\n            message=\"Cloud sync is not enabled\",\n            environment=self.config.current_environment,\n            synced_items={},\n            errors=[\"Cloud sync is not enabled. Enable it first with 'config sync --enable'.\"],\n        )\n\n    # Only auto-sync if auto-sync is enabled\n    if auto and (not self.config.global_resources.sync_config.auto_sync_enabled):\n        return CloudSyncResult(\n            success=True,\n            message=\"Auto-sync is disabled\",\n            environment=self.config.current_environment,\n            synced_items={},\n            errors=[],\n        )\n\n    # Get current environment region\n    region = self.get_region()\n\n    # Create sync service\n    sync_service = ConfigSyncService(region=region, config=self.config)\n\n    # Check if we should auto-sync\n    if auto and not sync_service.should_auto_sync:\n        return CloudSyncResult(\n            success=True,\n            message=\"Automatic sync not needed\",\n            environment=self.config.current_environment,\n            synced_items={},\n            errors=[],\n        )\n\n    # Push config to cloud\n    return sync_service.push_config_to_cloud(self.config)\n</code></pre>"},{"location":"reference/agentcore_cli/services/config/#agentcore_cli.services.config.ConfigManager.update_agent_runtime","title":"<code>update_agent_runtime(name, environment=None, **kwargs)</code>","text":"<p>Update an agent runtime in the specified or current environment.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Agent runtime name.</p> required <code>environment</code> <code>str | None</code> <p>Environment name. If None, uses current environment.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Runtime properties to update.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>agentcore_cli/services/config.py</code> Python<pre><code>def update_agent_runtime(self, name: str, environment: str | None = None, **kwargs: Any) -&gt; bool:\n    \"\"\"Update an agent runtime in the specified or current environment.\n\n    Args:\n        name: Agent runtime name.\n        environment: Environment name. If None, uses current environment.\n        **kwargs: Runtime properties to update.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    try:\n        env_name = environment or self.config.current_environment\n        env = self.get_environment(env_name)\n\n        # Check if agent runtime exists in this environment\n        if name not in env.agent_runtimes:\n            logger.error(f\"Agent runtime '{name}' does not exist in environment '{env_name}'\")\n            return False\n\n        # Get agent runtime\n        runtime = env.agent_runtimes[name]\n\n        # Update properties\n        for key, value in kwargs.items():\n            if hasattr(runtime, key):\n                setattr(runtime, key, value)\n\n        # Update timestamp\n        runtime.updated_at = datetime.now()\n        env.updated_at = datetime.now()\n\n        # Save config\n        self.save_config()\n\n        logger.info(f\"Agent runtime '{name}' updated in environment '{env_name}'\")\n        return True\n    except KeyError:\n        logger.error(f\"Environment '{env_name}' does not exist\")\n        return False\n    except Exception as e:\n        logger.error(f\"Failed to update agent runtime: {str(e)}\")\n        return False\n</code></pre>"},{"location":"reference/agentcore_cli/services/config/#agentcore_cli.services.config.ConfigManager.update_environment","title":"<code>update_environment(name, **kwargs)</code>","text":"<p>Update an environment.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Environment name.</p> required <code>**kwargs</code> <code>Any</code> <p>Environment properties to update.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>agentcore_cli/services/config.py</code> Python<pre><code>def update_environment(self, name: str, **kwargs: Any) -&gt; bool:\n    \"\"\"Update an environment.\n\n    Args:\n        name: Environment name.\n        **kwargs: Environment properties to update.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    try:\n        # Check if environment exists\n        if name not in self.config.environments:\n            logger.error(f\"Environment '{name}' does not exist\")\n            return False\n\n        # Get environment\n        env = self.config.environments[name]\n\n        # Update properties\n        for key, value in kwargs.items():\n            if hasattr(env, key):\n                setattr(env, key, value)\n\n        # Update timestamp\n        env.updated_at = datetime.now()\n\n        # Save config\n        self.save_config()\n\n        logger.info(f\"Environment '{name}' updated\")\n        return True\n    except Exception as e:\n        logger.error(f\"Failed to update environment: {str(e)}\")\n        return False\n</code></pre>"},{"location":"reference/agentcore_cli/services/config_sync/","title":"agentcore_cli.services.config_sync","text":""},{"location":"reference/agentcore_cli/services/config_sync/#agentcore_cli.services.config_sync","title":"<code>agentcore_cli.services.config_sync</code>","text":"<p>Configuration synchronization service for AgentCore Platform CLI.</p> <p>This module handles synchronizing configuration between local files and cloud storage using AWS Parameter Store. It leverages Pydantic's serialization/deserialization for robust data handling aligned with our environment-first model structure.</p>"},{"location":"reference/agentcore_cli/services/config_sync/#agentcore_cli.services.config_sync.ConfigSyncService","title":"<code>ConfigSyncService</code>","text":"<p>Service for synchronizing configuration between local and cloud.</p> <p>Uses Pydantic models for robust serialization/deserialization and supports our environment-first architecture where each environment owns its agent runtimes.</p> Source code in <code>agentcore_cli/services/config_sync.py</code> Python<pre><code>class ConfigSyncService:\n    \"\"\"Service for synchronizing configuration between local and cloud.\n\n    Uses Pydantic models for robust serialization/deserialization and\n    supports our environment-first architecture where each environment\n    owns its agent runtimes.\n    \"\"\"\n\n    def __init__(self, region: str, session: Session | None = None, config: AgentCoreConfig | None = None):\n        \"\"\"Initialize the config sync service.\n\n        Args:\n            region: AWS region for configuration storage.\n            session: Boto3 session to use. If None, creates a new session.\n            config: AgentCoreConfig to use.\n        \"\"\"\n        self.region = region\n        self.session = session or Session(region_name=region)\n        self.config = config\n        self.ssm_client = self.session.client(\"ssm\", region_name=region)\n\n    @property\n    def parameter_store_prefix(self) -&gt; str:\n        \"\"\"Get the parameter store prefix to use for cloud configuration.\"\"\"\n        if self.config and self.config.global_resources.sync_config:\n            return self.config.global_resources.sync_config.parameter_store_prefix\n        return \"/agentcore\"\n\n    @property\n    def sync_enabled(self) -&gt; bool:\n        \"\"\"Check if cloud sync is enabled.\"\"\"\n        if self.config and self.config.global_resources.sync_config:\n            return self.config.global_resources.sync_config.cloud_config_enabled\n        return False\n\n    @property\n    def auto_sync_enabled(self) -&gt; bool:\n        \"\"\"Check if auto-sync is enabled.\"\"\"\n        if self.config and self.config.global_resources.sync_config:\n            return self.config.global_resources.sync_config.auto_sync_enabled\n        return False\n\n    @property\n    def should_auto_sync(self) -&gt; bool:\n        \"\"\"Check if the configuration should be automatically synced.\"\"\"\n        if not self.sync_enabled or not self.auto_sync_enabled:\n            return False\n\n        if not self.config or not self.config.global_resources.sync_config:\n            return False\n\n        last_sync = self.config.global_resources.sync_config.last_full_sync\n        if not last_sync:\n            return True\n\n        now = datetime.now()\n        interval_minutes = self.config.global_resources.sync_config.sync_interval_minutes\n        interval = timedelta(minutes=interval_minutes)\n        return (now - last_sync) &gt; interval\n\n    def _serialize_config_for_cloud(self, config: AgentCoreConfig) -&gt; dict[str, str]:\n        \"\"\"Serialize configuration to flat parameter store format.\n\n        Uses Pydantic's model_dump for robust serialization.\n\n        Args:\n            config: Configuration to serialize.\n\n        Returns:\n            Flat dictionary of parameter paths to JSON string values.\n        \"\"\"\n        params: dict[str, str] = {}\n\n        # Serialize metadata\n        params[f\"{self.parameter_store_prefix}/meta/current_environment\"] = config.current_environment\n        params[f\"{self.parameter_store_prefix}/meta/last_updated\"] = datetime.now().isoformat()\n\n        # Serialize global resources using Pydantic serialization\n        global_data = config.global_resources.model_dump(mode=\"json\")\n\n        # Sync config\n        for key, value in global_data[\"sync_config\"].items():\n            params[f\"{self.parameter_store_prefix}/global/sync/{key}\"] = str(value)\n\n        # ECR repositories\n        for repo_name, repo_data in global_data[\"ecr_repositories\"].items():\n            # Validate repository name before serializing to cloud\n            is_valid, error_msg = validate_repo_name(repo_name)\n            if not is_valid:\n                logger.warning(f\"Skipping invalid ECR repository name for cloud sync: '{repo_name}': {error_msg}\")\n                continue\n\n            for key, value in repo_data.items():\n                if key == \"available_tags\" and isinstance(value, list):\n                    # Handle set serialization\n                    params[f\"{self.parameter_store_prefix}/global/ecr/{repo_name}/{key}\"] = \",\".join(value)\n                else:\n                    params[f\"{self.parameter_store_prefix}/global/ecr/{repo_name}/{key}\"] = str(value)\n\n        # IAM roles\n        for role_name, role_data in global_data[\"iam_roles\"].items():\n            for key, value in role_data.items():\n                params[f\"{self.parameter_store_prefix}/global/iam/{role_name}/{key}\"] = str(value)\n\n        # Serialize environments using Pydantic serialization\n        for env_name, env_config in config.environments.items():\n            env_data = env_config.model_dump(mode=\"json\")\n\n            # Basic environment properties\n            for key in [\"name\", \"region\", \"created_at\", \"updated_at\", \"default_agent_runtime\"]:\n                if key in env_data and env_data[key] is not None:\n                    params[f\"{self.parameter_store_prefix}/{env_name}/{key}\"] = str(env_data[key])\n\n            # Environment variables\n            for key, value in env_data.get(\"environment_variables\", {}).items():\n                params[f\"{self.parameter_store_prefix}/{env_name}/env_vars/{key}\"] = str(value)\n\n            # Agent runtimes in this environment\n            for agent_name, agent_data in env_data.get(\"agent_runtimes\", {}).items():\n                for key, value in agent_data.items():\n                    if value is not None:\n                        params[f\"{self.parameter_store_prefix}/{env_name}/agents/{agent_name}/{key}\"] = str(value)\n\n        return params\n\n    def push_config_to_cloud(self, config: AgentCoreConfig) -&gt; CloudSyncResult:\n        \"\"\"Push the local configuration to the cloud using Pydantic serialization.\"\"\"\n        if not self.sync_enabled:\n            return CloudSyncResult(\n                success=False,\n                message=\"Cloud sync is not enabled\",\n                environment=config.current_environment,\n                synced_items={},\n                errors=[\"Cloud sync is not enabled. Enable it first with 'config sync --enable'.\"],\n            )\n\n        try:\n            # Serialize using Pydantic\n            params = self._serialize_config_for_cloud(config)\n\n            # Track sync stats\n            synced_items: dict[str, int] = {}\n            errors: list[str] = []\n\n            # Push each parameter\n            for param_name, param_value in params.items():\n                try:\n                    self.ssm_client.put_parameter(Name=param_name, Value=param_value, Type=\"String\", Overwrite=True)\n\n                    # Track the type for stats\n                    param_parts = param_name.split(\"/\")\n                    if len(param_parts) &gt;= 3:\n                        param_type = param_parts[2]  # e.g., 'global', 'dev', 'meta'\n                        synced_items[param_type] = synced_items.get(param_type, 0) + 1\n\n                except Exception as e:\n                    errors.append(f\"Failed to push parameter {param_name}: {str(e)}\")\n                    logger.error(f\"Failed to push parameter {param_name}: {str(e)}\")\n\n            # Update the last sync time\n            config.global_resources.sync_config.last_full_sync = datetime.now()\n\n            return CloudSyncResult(\n                success=len(errors) == 0,\n                message=\"Configuration pushed to cloud successfully\"\n                if len(errors) == 0\n                else f\"Configuration push completed with {len(errors)} errors\",\n                environment=config.current_environment,\n                synced_items=synced_items,\n                errors=errors,\n            )\n\n        except Exception as e:\n            logger.error(f\"Failed to push configuration to cloud: {str(e)}\")\n            return CloudSyncResult(\n                success=False,\n                message=f\"Failed to push configuration to cloud: {str(e)}\",\n                environment=config.current_environment,\n                synced_items={},\n                errors=[str(e)],\n            )\n\n    def pull_config_from_cloud(self, environment: str | None = None) -&gt; tuple[bool, AgentCoreConfig | None, list[str]]:\n        \"\"\"Pull configuration from the cloud and reconstruct using Pydantic models.\"\"\"\n        if not self.sync_enabled:\n            return False, None, [\"Cloud sync is not enabled\"]\n\n        try:\n            # Get all parameters under the prefix\n            params = {}\n            errors = []\n            next_token = None\n\n            while True:\n                try:\n                    if next_token:\n                        response = self.ssm_client.get_parameters_by_path(\n                            Path=self.parameter_store_prefix, Recursive=True, NextToken=next_token\n                        )\n                    else:\n                        response = self.ssm_client.get_parameters_by_path(\n                            Path=self.parameter_store_prefix, Recursive=True\n                        )\n\n                    # Collect parameters\n                    for param in response.get(\"Parameters\", []):\n                        name = param.get(\"Name\")\n                        value = param.get(\"Value\")\n                        if name and value:\n                            params[name] = value\n\n                    next_token = response.get(\"NextToken\")\n                    if not next_token:\n                        break\n\n                except Exception as e:\n                    errors.append(f\"Failed to fetch parameters: {str(e)}\")\n                    logger.error(f\"Failed to fetch parameters: {str(e)}\")\n                    break\n\n            # Reconstruct configuration using our new structure\n            config_data = self._reconstruct_config_from_params(params)\n\n            # Use Pydantic to validate and create the config\n            config = AgentCoreConfig.model_validate(config_data)\n\n            return True, config, errors\n\n        except Exception as e:\n            logger.error(f\"Failed to pull configuration from cloud: {str(e)}\")\n            return False, None, [str(e)]\n\n    def _reconstruct_config_from_params(self, params: dict[str, str]) -&gt; dict[str, Any]:\n        \"\"\"Reconstruct configuration structure from flat parameter store format.\"\"\"\n        config_data = {\n            \"current_environment\": \"dev\",  # Default\n            \"environments\": {},\n            \"global_resources\": {\n                \"ecr_repositories\": {},\n                \"iam_roles\": {},\n                \"sync_config\": {\n                    \"cloud_config_enabled\": True,\n                    \"auto_sync_enabled\": True,\n                    \"parameter_store_prefix\": self.parameter_store_prefix,\n                    \"sync_interval_minutes\": 60,\n                },\n            },\n        }\n\n        # Process each parameter\n        for param_name, param_value in params.items():\n            # Remove prefix and split path\n            relative_path = param_name.replace(self.parameter_store_prefix + \"/\", \"\")\n            parts: list[str] = list(relative_path.split(\"/\"))  # type: ignore[assignment]\n\n            if len(parts) &lt; 2:\n                continue\n\n            category: str = parts[0]\n\n            if category == \"meta\":\n                # Handle metadata\n                if parts[1] == \"current_environment\":  # type: ignore[index]\n                    config_data[\"current_environment\"] = param_value\n\n            elif category == \"global\":\n                # Handle global resources\n                if len(parts) &gt;= 3:\n                    resource_type = parts[1]  # type: ignore[index]  # sync, ecr, iam\n\n                    if resource_type == \"sync\" and len(parts) &gt;= 3:\n                        key = parts[2]  # type: ignore[index]\n                        if key in [\"cloud_config_enabled\", \"auto_sync_enabled\"]:\n                            config_data[\"global_resources\"][\"sync_config\"][key] = param_value.lower() == \"true\"\n                        elif key == \"sync_interval_minutes\":\n                            config_data[\"global_resources\"][\"sync_config\"][key] = int(param_value)\n                        else:\n                            config_data[\"global_resources\"][\"sync_config\"][key] = param_value\n\n                    elif resource_type == \"ecr\" and len(parts) &gt;= 4:\n                        repo_name = parts[2]  # type: ignore[index]\n                        key = parts[3]  # type: ignore[index]\n\n                        # Validate repository name from cloud storage\n                        is_valid, error_msg = validate_repo_name(repo_name)\n                        if not is_valid:\n                            logger.warning(\n                                f\"Skipping invalid ECR repository name from cloud: '{repo_name}': {error_msg}\"\n                            )\n                            continue\n\n                        if repo_name not in config_data[\"global_resources\"][\"ecr_repositories\"]:\n                            config_data[\"global_resources\"][\"ecr_repositories\"][repo_name] = {}\n\n                        if key == \"available_tags\":\n                            # Handle comma-separated tags\n                            config_data[\"global_resources\"][\"ecr_repositories\"][repo_name][key] = (\n                                param_value.split(\",\") if param_value else []\n                            )\n                        elif key in [\"image_scanning_config\"]:\n                            config_data[\"global_resources\"][\"ecr_repositories\"][repo_name][key] = (\n                                param_value.lower() == \"true\"\n                            )\n                        else:\n                            config_data[\"global_resources\"][\"ecr_repositories\"][repo_name][key] = param_value\n\n                    elif resource_type == \"iam\" and len(parts) &gt;= 4:\n                        role_name = parts[2]  # type: ignore[index]\n                        key = parts[3]  # type: ignore[index]\n\n                        if role_name not in config_data[\"global_resources\"][\"iam_roles\"]:\n                            config_data[\"global_resources\"][\"iam_roles\"][role_name] = {}\n\n                        config_data[\"global_resources\"][\"iam_roles\"][role_name][key] = param_value\n\n            else:\n                # Handle environment-specific data\n                env_name = category\n\n                if env_name not in config_data[\"environments\"]:\n                    config_data[\"environments\"][env_name] = {\n                        \"name\": env_name,\n                        \"region\": \"us-east-1\",  # Default\n                        \"agent_runtimes\": {},\n                        \"environment_variables\": {},\n                    }\n\n                if len(parts) == 2:\n                    # Direct environment property\n                    key = parts[1]  # type: ignore[index]\n                    config_data[\"environments\"][env_name][key] = param_value\n\n                elif len(parts) &gt;= 3:\n                    subcategory = parts[1]  # type: ignore[index]\n\n                    if subcategory == \"env_vars\" and len(parts) &gt;= 3:\n                        var_name = parts[2]  # type: ignore[index]\n                        config_data[\"environments\"][env_name][\"environment_variables\"][var_name] = param_value\n\n                    elif subcategory == \"agents\" and len(parts) &gt;= 4:\n                        agent_name = parts[2]  # type: ignore[index]\n                        key = parts[3]  # type: ignore[index]\n\n                        if agent_name not in config_data[\"environments\"][env_name][\"agent_runtimes\"]:\n                            config_data[\"environments\"][env_name][\"agent_runtimes\"][agent_name] = {}\n\n                        config_data[\"environments\"][env_name][\"agent_runtimes\"][agent_name][key] = param_value\n\n        return config_data\n\n    def check_sync_status(self, config: AgentCoreConfig, environment: str | None = None) -&gt; SyncStatus:\n        \"\"\"Check the sync status between local and cloud configuration.\"\"\"\n        env = environment or config.current_environment\n\n        if not self.sync_enabled:\n            return SyncStatus(\n                environment=env,\n                cloud_config_enabled=False,\n                auto_sync_enabled=self.auto_sync_enabled,\n                last_sync=config.global_resources.sync_config.last_full_sync,\n                in_sync=False,\n            )\n\n        # Pull cloud configuration for comparison\n        success, cloud_config, errors = self.pull_config_from_cloud(env)\n\n        if not success or cloud_config is None:\n            return SyncStatus(\n                environment=env,\n                cloud_config_enabled=True,\n                auto_sync_enabled=self.auto_sync_enabled,\n                last_sync=config.global_resources.sync_config.last_full_sync,\n                in_sync=False,\n                drift_details={\"errors\": {\"pull\": errors}},\n            )\n\n        # Check for drift using Pydantic comparison\n        drift_details = self._detect_drift_with_pydantic(config, cloud_config, env)\n        in_sync = all(len(category_drifts) == 0 for category_drifts in drift_details.values())\n\n        return SyncStatus(\n            environment=env,\n            cloud_config_enabled=True,\n            auto_sync_enabled=self.auto_sync_enabled,\n            last_sync=config.global_resources.sync_config.last_full_sync,\n            in_sync=in_sync,\n            drift_details=drift_details if not in_sync else None,\n        )\n\n    def _detect_drift_with_pydantic(\n        self, local_config: AgentCoreConfig, cloud_config: AgentCoreConfig, environment: str\n    ) -&gt; dict[str, dict[str, list[str]]]:\n        \"\"\"Detect drift between configurations using DeepDiff for granular analysis.\"\"\"\n        # Get serialized data for comparison\n        local_data = local_config.model_dump(mode=\"json\")\n        cloud_data = cloud_config.model_dump(mode=\"json\")\n\n        # Use DeepDiff for comprehensive comparison\n        diff = DeepDiff(\n            local_data,\n            cloud_data,\n            ignore_order=True,\n            exclude_paths=[\n                # Ignore metadata that changes automatically\n                \"root['global_resources']['sync_config']['last_full_sync']\",\n                \"root['environments']['*']['updated_at']\",\n                \"root['environments']['*']['agent_runtimes']['*']['updated_at']\",\n                \"root['global_resources']['ecr_repositories']['*']['last_sync']\",\n                \"root['global_resources']['ecr_repositories']['*']['last_push']\",\n                \"root['global_resources']['iam_roles']['*']['last_sync']\",\n            ],\n            ignore_numeric_type_changes=True,  # Handle \"60\" vs 60\n            ignore_string_case=True,  # Handle \"true\" vs \"True\"\n        )\n\n        # Convert DeepDiff results to structured drift information\n        return self._format_drift_results(diff, environment)\n\n    def _format_drift_results(self, diff: DeepDiff, environment: str) -&gt; dict[str, dict[str, list[str]]]:\n        \"\"\"Convert DeepDiff results to structured drift information.\"\"\"\n        drift: dict[str, dict[str, list[str]]] = {\n            \"environments\": {\"local_only\": [], \"cloud_only\": [], \"different\": []},\n            \"agent_runtimes\": {\"local_only\": [], \"cloud_only\": [], \"different\": []},\n            \"global_resources\": {\"local_only\": [], \"cloud_only\": [], \"different\": []},\n            \"detailed_changes\": {\"values_changed\": [], \"items_added\": [], \"items_removed\": []},\n        }\n\n        # Process value changes\n        if \"values_changed\" in diff:\n            for path, change in diff[\"values_changed\"].items():\n                formatted_change = self._format_value_change(path, change, environment)\n                if formatted_change:\n                    category, details = formatted_change\n                    drift[category][\"different\"].append(details)\n                    drift[\"detailed_changes\"][\"values_changed\"].append(details)\n\n        # Process additions\n        if \"dictionary_item_added\" in diff:\n            for path in diff[\"dictionary_item_added\"]:\n                path_str = str(path)  # Ensure path is treated as string\n                formatted_addition = self._format_item_addition(path_str, environment)\n                if formatted_addition:\n                    category, details = formatted_addition\n                    drift[category][\"cloud_only\"].append(details)\n                    drift[\"detailed_changes\"][\"items_added\"].append(details)\n\n        # Process removals\n        if \"dictionary_item_removed\" in diff:\n            for path in diff[\"dictionary_item_removed\"]:\n                path_str = str(path)  # Ensure path is treated as string\n                formatted_removal = self._format_item_removal(path_str, environment)\n                if formatted_removal:\n                    category, details = formatted_removal\n                    drift[category][\"local_only\"].append(details)\n                    drift[\"detailed_changes\"][\"items_removed\"].append(details)\n\n        # Remove empty categories for cleaner output\n        return {k: v for k, v in drift.items() if self._has_changes(v)}\n\n    def _format_value_change(self, path: str, change: dict, target_env: str) -&gt; tuple[str, str] | None:\n        \"\"\"Format a value change into readable description.\"\"\"\n        # Parse the path to understand what changed\n        path_clean = path.replace(\"root['\", \"\").replace(\"']\", \"\").replace(\"']['\", \".\")\n\n        old_value = change.get(\"old_value\", \"N/A\")\n        new_value = change.get(\"new_value\", \"N/A\")\n\n        # Categorize by path structure\n        if path_clean.startswith(\"environments.\"):\n            env_parts: list[str] = path_clean.split(\".\")\n            if len(env_parts) &gt;= 2:\n                env_name = env_parts[1]\n                if env_name == target_env or target_env == \"all\":\n                    if \"agent_runtimes\" in path_clean and len(env_parts) &gt;= 4:\n                        agent_name = env_parts[3]\n                        field = \".\".join(env_parts[4:]) if len(env_parts) &gt; 4 else \"config\"\n                        return (\"agent_runtimes\", f\"{env_name}:{agent_name}:{field} ({old_value} \u2192 {new_value})\")\n                    else:\n                        field = \".\".join(env_parts[2:]) if len(env_parts) &gt; 2 else \"config\"\n                        return (\"environments\", f\"{env_name}:{field} ({old_value} \u2192 {new_value})\")\n\n        elif path_clean.startswith(\"global_resources.\"):\n            global_parts: list[str] = path_clean.split(\".\")\n            if len(global_parts) &gt;= 2:\n                resource_type = global_parts[1]\n                if resource_type in [\"ecr_repositories\", \"iam_roles\"] and len(global_parts) &gt;= 3:\n                    resource_name = global_parts[2]\n                    field = \".\".join(global_parts[3:]) if len(global_parts) &gt; 3 else \"config\"\n                    return (\"global_resources\", f\"{resource_type}.{resource_name}:{field} ({old_value} \u2192 {new_value})\")\n                else:\n                    field = \".\".join(global_parts[1:])\n                    return (\"global_resources\", f\"{field} ({old_value} \u2192 {new_value})\")\n\n        return None\n\n    def _format_item_addition(self, path: str, target_env: str) -&gt; tuple[str, str] | None:\n        \"\"\"Format an item addition into readable description.\"\"\"\n        path_clean = path.replace(\"root['\", \"\").replace(\"']\", \"\").replace(\"']['\", \".\")\n\n        if path_clean.startswith(\"environments.\"):\n            env_parts: list[str] = path_clean.split(\".\")\n            if len(env_parts) &gt;= 2:\n                env_name = env_parts[1]\n                if env_name == target_env or target_env == \"all\":\n                    if \"agent_runtimes\" in path_clean and len(env_parts) &gt;= 4:\n                        agent_name = env_parts[3]\n                        return (\"agent_runtimes\", f\"{env_name}:{agent_name} (added in cloud)\")\n                    else:\n                        return (\"environments\", f\"{env_name} (added in cloud)\")\n\n        elif path_clean.startswith(\"global_resources.\"):\n            global_parts: list[str] = path_clean.split(\".\")\n            if len(global_parts) &gt;= 3:\n                resource_type = global_parts[1]\n                resource_name = global_parts[2]\n                return (\"global_resources\", f\"{resource_type}.{resource_name} (added in cloud)\")\n\n        return None\n\n    def _format_item_removal(self, path: str, target_env: str) -&gt; tuple[str, str] | None:\n        \"\"\"Format an item removal into readable description.\"\"\"\n        path_clean = path.replace(\"root['\", \"\").replace(\"']\", \"\").replace(\"']['\", \".\")\n\n        if path_clean.startswith(\"environments.\"):\n            env_parts: list[str] = path_clean.split(\".\")\n            if len(env_parts) &gt;= 2:\n                env_name = env_parts[1]\n                if env_name == target_env or target_env == \"all\":\n                    if \"agent_runtimes\" in path_clean and len(env_parts) &gt;= 4:\n                        agent_name = env_parts[3]\n                        return (\"agent_runtimes\", f\"{env_name}:{agent_name} (removed from cloud)\")\n                    else:\n                        return (\"environments\", f\"{env_name} (removed from cloud)\")\n\n        elif path_clean.startswith(\"global_resources.\"):\n            global_parts: list[str] = path_clean.split(\".\")\n            if len(global_parts) &gt;= 3:\n                resource_type = global_parts[1]\n                resource_name = global_parts[2]\n                return (\"global_resources\", f\"{resource_type}.{resource_name} (removed from cloud)\")\n\n        return None\n\n    def _has_changes(self, category_drift: dict) -&gt; bool:\n        \"\"\"Check if a drift category has any changes.\"\"\"\n        if isinstance(category_drift, dict):\n            return any(len(v) &gt; 0 if isinstance(v, list) else self._has_changes(v) for v in category_drift.values())\n        elif isinstance(category_drift, list):\n            return len(category_drift) &gt; 0\n        return False\n\n    def get_drift_summary(self, drift_details: dict) -&gt; str:\n        \"\"\"Generate a human-readable summary of drift details.\"\"\"\n        if not drift_details or not any(self._has_changes(v) for v in drift_details.values()):\n            return \"\u2705 No drift detected - local and cloud configurations are in sync\"\n\n        summary_lines = [\"\ud83d\udd04 Configuration drift detected:\"]\n\n        # Environment changes\n        env_drift = drift_details.get(\"environments\", {})\n        if self._has_changes(env_drift):\n            summary_lines.append(\"\\n\ud83d\udcc1 Environment Changes:\")\n            for change_type, changes in env_drift.items():\n                if changes:\n                    type_label = {\"local_only\": \"Local only\", \"cloud_only\": \"Cloud only\", \"different\": \"Modified\"}\n                    summary_lines.append(f\"  \u2022 {type_label.get(change_type, change_type)}:\")\n                    for change in changes[:5]:  # Limit to first 5\n                        summary_lines.append(f\"    - {change}\")\n                    if len(changes) &gt; 5:\n                        summary_lines.append(f\"    ... and {len(changes) - 5} more\")\n\n        # Agent runtime changes\n        runtime_drift = drift_details.get(\"agent_runtimes\", {})\n        if self._has_changes(runtime_drift):\n            summary_lines.append(\"\\n\ud83e\udd16 Agent Runtime Changes:\")\n            for change_type, changes in runtime_drift.items():\n                if changes:\n                    type_label = {\"local_only\": \"Local only\", \"cloud_only\": \"Cloud only\", \"different\": \"Modified\"}\n                    summary_lines.append(f\"  \u2022 {type_label.get(change_type, change_type)}:\")\n                    for change in changes[:5]:\n                        summary_lines.append(f\"    - {change}\")\n                    if len(changes) &gt; 5:\n                        summary_lines.append(f\"    ... and {len(changes) - 5} more\")\n\n        # Global resource changes\n        global_drift = drift_details.get(\"global_resources\", {})\n        if self._has_changes(global_drift):\n            summary_lines.append(\"\\n\ud83c\udf0d Global Resource Changes:\")\n            for change_type, changes in global_drift.items():\n                if changes:\n                    type_label = {\"local_only\": \"Local only\", \"cloud_only\": \"Cloud only\", \"different\": \"Modified\"}\n                    summary_lines.append(f\"  \u2022 {type_label.get(change_type, change_type)}:\")\n                    for change in changes[:3]:\n                        summary_lines.append(f\"    - {change}\")\n                    if len(changes) &gt; 3:\n                        summary_lines.append(f\"    ... and {len(changes) - 3} more\")\n\n        return \"\\n\".join(summary_lines)\n\n    def enable_cloud_sync(self, config: AgentCoreConfig, enable: bool = True) -&gt; bool:\n        \"\"\"Enable or disable cloud configuration sync.\"\"\"\n        try:\n            # Update sync config\n            config.global_resources.sync_config.cloud_config_enabled = enable\n\n            # If enabling, push the configuration to the cloud\n            if enable:\n                result = self.push_config_to_cloud(config)\n                return result.success\n\n            return True\n\n        except Exception as e:\n            logger.error(f\"Failed to {'enable' if enable else 'disable'} cloud sync: {str(e)}\")\n            return False\n\n    def enable_auto_sync(self, config: AgentCoreConfig, enable: bool = True) -&gt; bool:\n        \"\"\"Enable or disable automatic configuration sync.\"\"\"\n        try:\n            # Update sync config\n            config.global_resources.sync_config.auto_sync_enabled = enable\n\n            # Push the updated configuration to the cloud if cloud sync is enabled\n            if config.global_resources.sync_config.cloud_config_enabled:\n                param_name = f\"{self.parameter_store_prefix}/global/sync/auto_sync_enabled\"\n                self.ssm_client.put_parameter(Name=param_name, Value=str(enable).lower(), Type=\"String\", Overwrite=True)\n\n            return True\n\n        except Exception as e:\n            logger.error(f\"Failed to {'enable' if enable else 'disable'} auto-sync: {str(e)}\")\n            return False\n\n    def check_and_auto_sync(self, config: AgentCoreConfig) -&gt; bool:\n        \"\"\"Check if auto-sync is enabled and sync if needed.\"\"\"\n        if not self.should_auto_sync:\n            return True\n\n        try:\n            result = self.push_config_to_cloud(config)\n            return result.success\n\n        except Exception as e:\n            logger.error(f\"Failed to auto-sync configuration: {str(e)}\")\n            return False\n</code></pre>"},{"location":"reference/agentcore_cli/services/config_sync/#agentcore_cli.services.config_sync.ConfigSyncService.auto_sync_enabled","title":"<code>auto_sync_enabled</code>  <code>property</code>","text":"<p>Check if auto-sync is enabled.</p>"},{"location":"reference/agentcore_cli/services/config_sync/#agentcore_cli.services.config_sync.ConfigSyncService.parameter_store_prefix","title":"<code>parameter_store_prefix</code>  <code>property</code>","text":"<p>Get the parameter store prefix to use for cloud configuration.</p>"},{"location":"reference/agentcore_cli/services/config_sync/#agentcore_cli.services.config_sync.ConfigSyncService.should_auto_sync","title":"<code>should_auto_sync</code>  <code>property</code>","text":"<p>Check if the configuration should be automatically synced.</p>"},{"location":"reference/agentcore_cli/services/config_sync/#agentcore_cli.services.config_sync.ConfigSyncService.sync_enabled","title":"<code>sync_enabled</code>  <code>property</code>","text":"<p>Check if cloud sync is enabled.</p>"},{"location":"reference/agentcore_cli/services/config_sync/#agentcore_cli.services.config_sync.ConfigSyncService.__init__","title":"<code>__init__(region, session=None, config=None)</code>","text":"<p>Initialize the config sync service.</p> <p>Parameters:</p> Name Type Description Default <code>region</code> <code>str</code> <p>AWS region for configuration storage.</p> required <code>session</code> <code>Session | None</code> <p>Boto3 session to use. If None, creates a new session.</p> <code>None</code> <code>config</code> <code>AgentCoreConfig | None</code> <p>AgentCoreConfig to use.</p> <code>None</code> Source code in <code>agentcore_cli/services/config_sync.py</code> Python<pre><code>def __init__(self, region: str, session: Session | None = None, config: AgentCoreConfig | None = None):\n    \"\"\"Initialize the config sync service.\n\n    Args:\n        region: AWS region for configuration storage.\n        session: Boto3 session to use. If None, creates a new session.\n        config: AgentCoreConfig to use.\n    \"\"\"\n    self.region = region\n    self.session = session or Session(region_name=region)\n    self.config = config\n    self.ssm_client = self.session.client(\"ssm\", region_name=region)\n</code></pre>"},{"location":"reference/agentcore_cli/services/config_sync/#agentcore_cli.services.config_sync.ConfigSyncService.check_and_auto_sync","title":"<code>check_and_auto_sync(config)</code>","text":"<p>Check if auto-sync is enabled and sync if needed.</p> Source code in <code>agentcore_cli/services/config_sync.py</code> Python<pre><code>def check_and_auto_sync(self, config: AgentCoreConfig) -&gt; bool:\n    \"\"\"Check if auto-sync is enabled and sync if needed.\"\"\"\n    if not self.should_auto_sync:\n        return True\n\n    try:\n        result = self.push_config_to_cloud(config)\n        return result.success\n\n    except Exception as e:\n        logger.error(f\"Failed to auto-sync configuration: {str(e)}\")\n        return False\n</code></pre>"},{"location":"reference/agentcore_cli/services/config_sync/#agentcore_cli.services.config_sync.ConfigSyncService.check_sync_status","title":"<code>check_sync_status(config, environment=None)</code>","text":"<p>Check the sync status between local and cloud configuration.</p> Source code in <code>agentcore_cli/services/config_sync.py</code> Python<pre><code>def check_sync_status(self, config: AgentCoreConfig, environment: str | None = None) -&gt; SyncStatus:\n    \"\"\"Check the sync status between local and cloud configuration.\"\"\"\n    env = environment or config.current_environment\n\n    if not self.sync_enabled:\n        return SyncStatus(\n            environment=env,\n            cloud_config_enabled=False,\n            auto_sync_enabled=self.auto_sync_enabled,\n            last_sync=config.global_resources.sync_config.last_full_sync,\n            in_sync=False,\n        )\n\n    # Pull cloud configuration for comparison\n    success, cloud_config, errors = self.pull_config_from_cloud(env)\n\n    if not success or cloud_config is None:\n        return SyncStatus(\n            environment=env,\n            cloud_config_enabled=True,\n            auto_sync_enabled=self.auto_sync_enabled,\n            last_sync=config.global_resources.sync_config.last_full_sync,\n            in_sync=False,\n            drift_details={\"errors\": {\"pull\": errors}},\n        )\n\n    # Check for drift using Pydantic comparison\n    drift_details = self._detect_drift_with_pydantic(config, cloud_config, env)\n    in_sync = all(len(category_drifts) == 0 for category_drifts in drift_details.values())\n\n    return SyncStatus(\n        environment=env,\n        cloud_config_enabled=True,\n        auto_sync_enabled=self.auto_sync_enabled,\n        last_sync=config.global_resources.sync_config.last_full_sync,\n        in_sync=in_sync,\n        drift_details=drift_details if not in_sync else None,\n    )\n</code></pre>"},{"location":"reference/agentcore_cli/services/config_sync/#agentcore_cli.services.config_sync.ConfigSyncService.enable_auto_sync","title":"<code>enable_auto_sync(config, enable=True)</code>","text":"<p>Enable or disable automatic configuration sync.</p> Source code in <code>agentcore_cli/services/config_sync.py</code> Python<pre><code>def enable_auto_sync(self, config: AgentCoreConfig, enable: bool = True) -&gt; bool:\n    \"\"\"Enable or disable automatic configuration sync.\"\"\"\n    try:\n        # Update sync config\n        config.global_resources.sync_config.auto_sync_enabled = enable\n\n        # Push the updated configuration to the cloud if cloud sync is enabled\n        if config.global_resources.sync_config.cloud_config_enabled:\n            param_name = f\"{self.parameter_store_prefix}/global/sync/auto_sync_enabled\"\n            self.ssm_client.put_parameter(Name=param_name, Value=str(enable).lower(), Type=\"String\", Overwrite=True)\n\n        return True\n\n    except Exception as e:\n        logger.error(f\"Failed to {'enable' if enable else 'disable'} auto-sync: {str(e)}\")\n        return False\n</code></pre>"},{"location":"reference/agentcore_cli/services/config_sync/#agentcore_cli.services.config_sync.ConfigSyncService.enable_cloud_sync","title":"<code>enable_cloud_sync(config, enable=True)</code>","text":"<p>Enable or disable cloud configuration sync.</p> Source code in <code>agentcore_cli/services/config_sync.py</code> Python<pre><code>def enable_cloud_sync(self, config: AgentCoreConfig, enable: bool = True) -&gt; bool:\n    \"\"\"Enable or disable cloud configuration sync.\"\"\"\n    try:\n        # Update sync config\n        config.global_resources.sync_config.cloud_config_enabled = enable\n\n        # If enabling, push the configuration to the cloud\n        if enable:\n            result = self.push_config_to_cloud(config)\n            return result.success\n\n        return True\n\n    except Exception as e:\n        logger.error(f\"Failed to {'enable' if enable else 'disable'} cloud sync: {str(e)}\")\n        return False\n</code></pre>"},{"location":"reference/agentcore_cli/services/config_sync/#agentcore_cli.services.config_sync.ConfigSyncService.get_drift_summary","title":"<code>get_drift_summary(drift_details)</code>","text":"<p>Generate a human-readable summary of drift details.</p> Source code in <code>agentcore_cli/services/config_sync.py</code> Python<pre><code>def get_drift_summary(self, drift_details: dict) -&gt; str:\n    \"\"\"Generate a human-readable summary of drift details.\"\"\"\n    if not drift_details or not any(self._has_changes(v) for v in drift_details.values()):\n        return \"\u2705 No drift detected - local and cloud configurations are in sync\"\n\n    summary_lines = [\"\ud83d\udd04 Configuration drift detected:\"]\n\n    # Environment changes\n    env_drift = drift_details.get(\"environments\", {})\n    if self._has_changes(env_drift):\n        summary_lines.append(\"\\n\ud83d\udcc1 Environment Changes:\")\n        for change_type, changes in env_drift.items():\n            if changes:\n                type_label = {\"local_only\": \"Local only\", \"cloud_only\": \"Cloud only\", \"different\": \"Modified\"}\n                summary_lines.append(f\"  \u2022 {type_label.get(change_type, change_type)}:\")\n                for change in changes[:5]:  # Limit to first 5\n                    summary_lines.append(f\"    - {change}\")\n                if len(changes) &gt; 5:\n                    summary_lines.append(f\"    ... and {len(changes) - 5} more\")\n\n    # Agent runtime changes\n    runtime_drift = drift_details.get(\"agent_runtimes\", {})\n    if self._has_changes(runtime_drift):\n        summary_lines.append(\"\\n\ud83e\udd16 Agent Runtime Changes:\")\n        for change_type, changes in runtime_drift.items():\n            if changes:\n                type_label = {\"local_only\": \"Local only\", \"cloud_only\": \"Cloud only\", \"different\": \"Modified\"}\n                summary_lines.append(f\"  \u2022 {type_label.get(change_type, change_type)}:\")\n                for change in changes[:5]:\n                    summary_lines.append(f\"    - {change}\")\n                if len(changes) &gt; 5:\n                    summary_lines.append(f\"    ... and {len(changes) - 5} more\")\n\n    # Global resource changes\n    global_drift = drift_details.get(\"global_resources\", {})\n    if self._has_changes(global_drift):\n        summary_lines.append(\"\\n\ud83c\udf0d Global Resource Changes:\")\n        for change_type, changes in global_drift.items():\n            if changes:\n                type_label = {\"local_only\": \"Local only\", \"cloud_only\": \"Cloud only\", \"different\": \"Modified\"}\n                summary_lines.append(f\"  \u2022 {type_label.get(change_type, change_type)}:\")\n                for change in changes[:3]:\n                    summary_lines.append(f\"    - {change}\")\n                if len(changes) &gt; 3:\n                    summary_lines.append(f\"    ... and {len(changes) - 3} more\")\n\n    return \"\\n\".join(summary_lines)\n</code></pre>"},{"location":"reference/agentcore_cli/services/config_sync/#agentcore_cli.services.config_sync.ConfigSyncService.pull_config_from_cloud","title":"<code>pull_config_from_cloud(environment=None)</code>","text":"<p>Pull configuration from the cloud and reconstruct using Pydantic models.</p> Source code in <code>agentcore_cli/services/config_sync.py</code> Python<pre><code>def pull_config_from_cloud(self, environment: str | None = None) -&gt; tuple[bool, AgentCoreConfig | None, list[str]]:\n    \"\"\"Pull configuration from the cloud and reconstruct using Pydantic models.\"\"\"\n    if not self.sync_enabled:\n        return False, None, [\"Cloud sync is not enabled\"]\n\n    try:\n        # Get all parameters under the prefix\n        params = {}\n        errors = []\n        next_token = None\n\n        while True:\n            try:\n                if next_token:\n                    response = self.ssm_client.get_parameters_by_path(\n                        Path=self.parameter_store_prefix, Recursive=True, NextToken=next_token\n                    )\n                else:\n                    response = self.ssm_client.get_parameters_by_path(\n                        Path=self.parameter_store_prefix, Recursive=True\n                    )\n\n                # Collect parameters\n                for param in response.get(\"Parameters\", []):\n                    name = param.get(\"Name\")\n                    value = param.get(\"Value\")\n                    if name and value:\n                        params[name] = value\n\n                next_token = response.get(\"NextToken\")\n                if not next_token:\n                    break\n\n            except Exception as e:\n                errors.append(f\"Failed to fetch parameters: {str(e)}\")\n                logger.error(f\"Failed to fetch parameters: {str(e)}\")\n                break\n\n        # Reconstruct configuration using our new structure\n        config_data = self._reconstruct_config_from_params(params)\n\n        # Use Pydantic to validate and create the config\n        config = AgentCoreConfig.model_validate(config_data)\n\n        return True, config, errors\n\n    except Exception as e:\n        logger.error(f\"Failed to pull configuration from cloud: {str(e)}\")\n        return False, None, [str(e)]\n</code></pre>"},{"location":"reference/agentcore_cli/services/config_sync/#agentcore_cli.services.config_sync.ConfigSyncService.push_config_to_cloud","title":"<code>push_config_to_cloud(config)</code>","text":"<p>Push the local configuration to the cloud using Pydantic serialization.</p> Source code in <code>agentcore_cli/services/config_sync.py</code> Python<pre><code>def push_config_to_cloud(self, config: AgentCoreConfig) -&gt; CloudSyncResult:\n    \"\"\"Push the local configuration to the cloud using Pydantic serialization.\"\"\"\n    if not self.sync_enabled:\n        return CloudSyncResult(\n            success=False,\n            message=\"Cloud sync is not enabled\",\n            environment=config.current_environment,\n            synced_items={},\n            errors=[\"Cloud sync is not enabled. Enable it first with 'config sync --enable'.\"],\n        )\n\n    try:\n        # Serialize using Pydantic\n        params = self._serialize_config_for_cloud(config)\n\n        # Track sync stats\n        synced_items: dict[str, int] = {}\n        errors: list[str] = []\n\n        # Push each parameter\n        for param_name, param_value in params.items():\n            try:\n                self.ssm_client.put_parameter(Name=param_name, Value=param_value, Type=\"String\", Overwrite=True)\n\n                # Track the type for stats\n                param_parts = param_name.split(\"/\")\n                if len(param_parts) &gt;= 3:\n                    param_type = param_parts[2]  # e.g., 'global', 'dev', 'meta'\n                    synced_items[param_type] = synced_items.get(param_type, 0) + 1\n\n            except Exception as e:\n                errors.append(f\"Failed to push parameter {param_name}: {str(e)}\")\n                logger.error(f\"Failed to push parameter {param_name}: {str(e)}\")\n\n        # Update the last sync time\n        config.global_resources.sync_config.last_full_sync = datetime.now()\n\n        return CloudSyncResult(\n            success=len(errors) == 0,\n            message=\"Configuration pushed to cloud successfully\"\n            if len(errors) == 0\n            else f\"Configuration push completed with {len(errors)} errors\",\n            environment=config.current_environment,\n            synced_items=synced_items,\n            errors=errors,\n        )\n\n    except Exception as e:\n        logger.error(f\"Failed to push configuration to cloud: {str(e)}\")\n        return CloudSyncResult(\n            success=False,\n            message=f\"Failed to push configuration to cloud: {str(e)}\",\n            environment=config.current_environment,\n            synced_items={},\n            errors=[str(e)],\n        )\n</code></pre>"},{"location":"reference/agentcore_cli/services/containers/","title":"agentcore_cli.services.containers","text":""},{"location":"reference/agentcore_cli/services/containers/#agentcore_cli.services.containers","title":"<code>agentcore_cli.services.containers</code>","text":"<p>Container service operations for AgentCore CLI.</p> <p>This module provides a service layer for container operations that were previously duplicated across multiple command files.</p>"},{"location":"reference/agentcore_cli/services/containers/#agentcore_cli.services.containers.ContainerService","title":"<code>ContainerService</code>","text":"<p>Service for Docker image and container operations.</p> Source code in <code>agentcore_cli/services/containers.py</code> Python<pre><code>class ContainerService:\n    \"\"\"Service for Docker image and container operations.\"\"\"\n\n    def __init__(self, region: str, session: Session | None = None):\n        \"\"\"Initialize the Container service.\n\n        Args:\n            region: AWS region for container operations.\n            session: Boto3 session to use. If None, creates a new session.\n        \"\"\"\n        self.region = region\n        self.session = session\n\n    def _build_docker_command(self, command: str, args: list[str], capture_output: bool = True) -&gt; tuple[bool, str]:\n        \"\"\"Build and execute a Docker command with provided arguments.\n\n        Args:\n            command: The Docker command to execute (e.g., 'build', 'push').\n            args: List of arguments for the Docker command.\n            capture_output: Whether to capture command output.\n\n        Returns:\n            Tuple[bool, str]: Success status and command output or error message.\n        \"\"\"\n        cmd = [\"docker\", command] + args\n        try:\n            # Always capture output with our utility but respect the log_output parameter\n            returncode, stdout, stderr = execute_command(cmd, log_cmd=True, log_output=capture_output)\n\n            if returncode == 0:\n                return True, stdout\n            else:\n                return False, f\"Command failed with error: {stderr}\"\n        except Exception as e:\n            return False, f\"Error executing Docker command: {str(e)}\"\n\n    def _tag_docker_image(self, source_tag: str, target_tag: str) -&gt; tuple[bool, str]:\n        \"\"\"Tag a Docker image with a new tag.\n\n        Args:\n            source_tag: Source image tag.\n            target_tag: Target image tag.\n\n        Returns:\n            Tuple[bool, str]: Success status and command output or error message.\n        \"\"\"\n        return self._build_docker_command(\"tag\", [source_tag, target_tag])\n\n    def _push_docker_image(self, tag: str) -&gt; tuple[bool, str]:\n        \"\"\"Push a Docker image to a registry.\n\n        Args:\n            tag: Image tag to push.\n\n        Returns:\n            Tuple[bool, str]: Success status and command output or error message.\n        \"\"\"\n        return self._build_docker_command(\"push\", [tag], capture_output=True)\n\n    def _build_docker_image(\n        self,\n        tag: str,\n        context: str = \".\",\n        platform: str = \"linux/arm64\",\n        build_args: list[str] | None = None,\n        no_cache: bool = False,\n        quiet: bool = False,\n    ) -&gt; tuple[bool, str]:\n        \"\"\"Build a Docker image.\n\n        Args:\n            tag: Image tag (e.g., 'my-image:latest').\n            context: Build context path.\n            platform: Target platform (default: linux/arm64 for AgentCore).\n            build_args: List of build args in the format [\"KEY=VALUE\", ...].\n            no_cache: Whether to use cache or not.\n            quiet: Whether to suppress output.\n\n        Returns:\n            Tuple[bool, str]: Success status and command output or error message.\n        \"\"\"\n        # Start with buildx build command\n        args = [\"build\", \"--platform\", platform, \"-t\", tag, \"--load\"]\n\n        # Add build args\n        if build_args:\n            for arg in build_args:\n                args.extend([\"--build-arg\", arg])\n\n        # Add options\n        if no_cache:\n            args.append(\"--no-cache\")\n\n        if quiet:\n            args.append(\"--quiet\")\n\n        # Add context at the end\n        args.append(context)\n\n        # Use buildx as the command\n        return self._build_docker_command(\"buildx\", args, capture_output=True)\n\n    def _authenticate_ecr(self) -&gt; bool:\n        \"\"\"Authenticate with ECR using AWS credentials.\n\n        Returns:\n            bool: True if authentication successful, False otherwise.\n        \"\"\"\n        try:\n            # Get account ID\n            if self.session:\n                sts_client = self.session.client(\"sts\")\n            else:\n                import boto3\n\n                sts_client = boto3.client(\"sts\", region_name=self.region)\n\n            account_id = sts_client.get_caller_identity()[\"Account\"]\n\n            # ECR Authentication\n            auth_cmd = f\"aws ecr get-login-password --region {self.region} | docker login --username AWS --password-stdin {account_id}.dkr.ecr.{self.region}.amazonaws.com\"\n            returncode, stdout, stderr = execute_command(auth_cmd, check=True)\n\n            if returncode != 0:\n                logger.error(f\"ECR authentication failed: {stderr}\")\n                return False\n\n            logger.success(\"ECR authentication successful\")\n            return True\n\n        except Exception as e:\n            logger.error(f\"Failed to authenticate with ECR: {e}\")\n            return False\n\n    def build_image(\n        self,\n        repo_name: str,\n        tag: str = \"latest\",\n        dockerfile: str = \"Dockerfile\",\n        build_args: list[str] | None = None,\n        platform: str = \"linux/arm64\",\n        use_cache: bool = True,\n    ) -&gt; bool:\n        \"\"\"Build a Docker image for the agent.\n\n        Args:\n            repo_name: Name of the ECR repository (used for local image tagging).\n            tag: Image tag.\n            dockerfile: Path to Dockerfile.\n            build_args: List of build arguments as key=value strings.\n            platform: Target platform for the image (default: linux/arm64).\n            use_cache: Whether to use Docker build cache.\n\n        Returns:\n            bool: True if successful, False otherwise.\n        \"\"\"\n        try:\n            # Create a display tag for logging\n            image_tag = f\"{repo_name}:{tag}\"\n\n            logger.info(f\"Building {platform} Docker image: '{image_tag}'\")\n            logger.info(f\"Dockerfile: {dockerfile}\")\n\n            # Build Docker command directly\n            cmd = [\"docker\", \"buildx\", \"build\", \"--platform\", platform, \"-t\", image_tag, \"--load\"]\n\n            # Add build args\n            if build_args:\n                for arg in build_args:\n                    cmd.extend([\"--build-arg\", arg])\n\n            # Add cache option\n            if not use_cache:\n                cmd.append(\"--no-cache\")\n\n            # Add dockerfile if not default\n            if dockerfile != \"Dockerfile\":\n                cmd.extend([\"-f\", dockerfile])\n\n            # Add context\n            cmd.append(\".\")\n\n            # Execute the build command using our utility function\n            returncode, stdout, stderr = execute_command(cmd, check=False)\n\n            if returncode == 0:\n                logger.success(f\"Docker image built successfully: {image_tag}\")\n                return True\n            else:\n                logger.error(f\"Docker build failed with exit code: {returncode}\")\n                if stderr:\n                    logger.error(f\"Error details: {stderr}\")\n                return False\n\n        except Exception as e:\n            logger.error(f\"Failed to build Docker image: {e}\")\n            return False\n\n    def tag_image(self, source_tag: str, target_tag: str) -&gt; bool:\n        \"\"\"Tag a Docker image with a new tag.\n\n        Args:\n            source_tag: Source image tag.\n            target_tag: Target image tag.\n\n        Returns:\n            bool: True if successful, False otherwise.\n        \"\"\"\n        try:\n            success, message = self._tag_docker_image(source_tag, target_tag)\n\n            if success:\n                logger.success(f\"Docker image tagged as {target_tag}\")\n                return True\n            else:\n                logger.error(f\"Failed to tag Docker image: {message}\")\n                return False\n        except Exception as e:\n            logger.error(\"Failed to tag Docker image\", exception=e)\n            return False\n\n    def push_image(self, repo_name: str, tag: str, repo_uri: str, save_config: bool = True) -&gt; str | None:\n        \"\"\"Push Docker image to ECR.\n\n        Args:\n            repo_name: Name of the ECR repository.\n            tag: Image tag.\n            repo_uri: Repository URI.\n            save_config: Whether to save repository details to config.\n\n        Returns:\n            str: Full remote image URI or None on failure.\n        \"\"\"\n        try:\n            # Authenticate with ECR first\n            if not self._authenticate_ecr():\n                return None\n\n            # Tag image with ECR URI\n            local_image = f\"{repo_name}:{tag}\"\n\n            # Debug logging to see what we're getting\n            logger.info(f\"DEBUG: repo_uri = '{repo_uri}'\")\n            logger.info(f\"DEBUG: tag = '{tag}'\")\n\n            # Ensure repo_uri doesn't already contain a tag\n            if \":\" in repo_uri and not repo_uri.endswith(\".amazonaws.com\"):\n                # If there's a colon and it's not just the domain part, strip the tag\n                repo_uri_clean = repo_uri.rsplit(\":\", 1)[0]\n                logger.info(f\"DEBUG: Stripped existing tag from repo_uri: '{repo_uri}' -&gt; '{repo_uri_clean}'\")\n                repo_uri = repo_uri_clean\n\n            remote_image = f\"{repo_uri}:{tag}\"\n            logger.info(f\"DEBUG: final remote_image = '{remote_image}'\")\n\n            logger.info(f\"Tagging image as {remote_image}...\")\n            if not self.tag_image(local_image, remote_image):\n                return None\n\n            # Push to ECR\n            logger.info(\"Pushing image to ECR...\")\n            success, message = self._push_docker_image(remote_image)\n\n            if not success:\n                logger.error(f\"Failed to push image to ECR: {message}\")\n                return None\n\n            logger.success(f\"Image pushed to ECR: {remote_image}\")\n\n            # Save to config\n            if save_config:\n                from ..models import ECRRepository\n                from datetime import datetime\n\n                # Extract registry_id and repository_uri from the remote image\n                # remote_image format: registry_id.dkr.ecr.region.amazonaws.com/repo_name:tag\n                registry_id = remote_image.split(\".\")[0]  # Extract account ID\n                repo_uri_without_tag = remote_image.rsplit(\":\", 1)[0]  # Remove tag\n\n                # Create ECR repository config with proper parameters\n                ecr_config = ECRRepository(\n                    name=repo_name,\n                    registry_id=registry_id,\n                    repository_uri=repo_uri_without_tag,\n                    region=self.region,\n                    image_scanning_config=True,  # Default to enabled\n                    image_tag_mutability=\"MUTABLE\",  # Default\n                    available_tags={tag},  # Add the current tag\n                    created_at=datetime.now(),\n                    last_sync=datetime.now(),\n                    last_push=datetime.now(),\n                )\n\n                # Add to global resources\n                config_manager.add_ecr_repository(repo_name, ecr_config)\n\n            return remote_image\n        except Exception as e:\n            logger.error(\"Failed to push image to ECR\", exception=e)\n            return None\n\n    def validate_image(self, image_name: str) -&gt; tuple[bool, str]:\n        \"\"\"Validate that a Docker image exists locally.\n\n        Args:\n            image_name: Name of the image to check.\n\n        Returns:\n            tuple: (exists, message)\n        \"\"\"\n        try:\n            # Execute the docker images command\n            cmd = [\"docker\", \"images\", \"--format\", \"{{.Repository}}:{{.Tag}}\", image_name]\n            returncode, stdout, stderr = execute_command(cmd, check=False)\n            output = stdout.strip()\n\n            # Check if the image exists\n            if returncode == 0 and output:\n                return True, f\"Image {image_name} exists\"\n            else:\n                return False, f\"Image {image_name} does not exist locally\"\n        except Exception as e:\n            return False, f\"Error checking image: {str(e)}\"\n\n    def get_image_details(self, image_name: str) -&gt; dict[str, Any] | None:\n        \"\"\"Get metadata about a local Docker image.\n\n        Args:\n            image_name: Name of the image to inspect.\n\n        Returns:\n            dict: Image metadata or None if not found.\n        \"\"\"\n        try:\n            # Execute the docker inspect command\n            cmd = [\"docker\", \"inspect\", image_name]\n            returncode, stdout, stderr = execute_command(cmd, check=False)\n\n            if returncode != 0:\n                # Image likely doesn't exist\n                return None\n\n            import json\n\n            # Parse the JSON output - result is a list of one object\n            image_data = json.loads(stdout)\n            if image_data and len(image_data) &gt; 0:\n                return dict(image_data[0])\n            return None\n        except Exception as e:\n            logger.error(f\"Error getting image details: {e}\")\n            return None\n</code></pre>"},{"location":"reference/agentcore_cli/services/containers/#agentcore_cli.services.containers.ContainerService.__init__","title":"<code>__init__(region, session=None)</code>","text":"<p>Initialize the Container service.</p> <p>Parameters:</p> Name Type Description Default <code>region</code> <code>str</code> <p>AWS region for container operations.</p> required <code>session</code> <code>Session | None</code> <p>Boto3 session to use. If None, creates a new session.</p> <code>None</code> Source code in <code>agentcore_cli/services/containers.py</code> Python<pre><code>def __init__(self, region: str, session: Session | None = None):\n    \"\"\"Initialize the Container service.\n\n    Args:\n        region: AWS region for container operations.\n        session: Boto3 session to use. If None, creates a new session.\n    \"\"\"\n    self.region = region\n    self.session = session\n</code></pre>"},{"location":"reference/agentcore_cli/services/containers/#agentcore_cli.services.containers.ContainerService.build_image","title":"<code>build_image(repo_name, tag='latest', dockerfile='Dockerfile', build_args=None, platform='linux/arm64', use_cache=True)</code>","text":"<p>Build a Docker image for the agent.</p> <p>Parameters:</p> Name Type Description Default <code>repo_name</code> <code>str</code> <p>Name of the ECR repository (used for local image tagging).</p> required <code>tag</code> <code>str</code> <p>Image tag.</p> <code>'latest'</code> <code>dockerfile</code> <code>str</code> <p>Path to Dockerfile.</p> <code>'Dockerfile'</code> <code>build_args</code> <code>list[str] | None</code> <p>List of build arguments as key=value strings.</p> <code>None</code> <code>platform</code> <code>str</code> <p>Target platform for the image (default: linux/arm64).</p> <code>'linux/arm64'</code> <code>use_cache</code> <code>bool</code> <p>Whether to use Docker build cache.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>agentcore_cli/services/containers.py</code> Python<pre><code>def build_image(\n    self,\n    repo_name: str,\n    tag: str = \"latest\",\n    dockerfile: str = \"Dockerfile\",\n    build_args: list[str] | None = None,\n    platform: str = \"linux/arm64\",\n    use_cache: bool = True,\n) -&gt; bool:\n    \"\"\"Build a Docker image for the agent.\n\n    Args:\n        repo_name: Name of the ECR repository (used for local image tagging).\n        tag: Image tag.\n        dockerfile: Path to Dockerfile.\n        build_args: List of build arguments as key=value strings.\n        platform: Target platform for the image (default: linux/arm64).\n        use_cache: Whether to use Docker build cache.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    try:\n        # Create a display tag for logging\n        image_tag = f\"{repo_name}:{tag}\"\n\n        logger.info(f\"Building {platform} Docker image: '{image_tag}'\")\n        logger.info(f\"Dockerfile: {dockerfile}\")\n\n        # Build Docker command directly\n        cmd = [\"docker\", \"buildx\", \"build\", \"--platform\", platform, \"-t\", image_tag, \"--load\"]\n\n        # Add build args\n        if build_args:\n            for arg in build_args:\n                cmd.extend([\"--build-arg\", arg])\n\n        # Add cache option\n        if not use_cache:\n            cmd.append(\"--no-cache\")\n\n        # Add dockerfile if not default\n        if dockerfile != \"Dockerfile\":\n            cmd.extend([\"-f\", dockerfile])\n\n        # Add context\n        cmd.append(\".\")\n\n        # Execute the build command using our utility function\n        returncode, stdout, stderr = execute_command(cmd, check=False)\n\n        if returncode == 0:\n            logger.success(f\"Docker image built successfully: {image_tag}\")\n            return True\n        else:\n            logger.error(f\"Docker build failed with exit code: {returncode}\")\n            if stderr:\n                logger.error(f\"Error details: {stderr}\")\n            return False\n\n    except Exception as e:\n        logger.error(f\"Failed to build Docker image: {e}\")\n        return False\n</code></pre>"},{"location":"reference/agentcore_cli/services/containers/#agentcore_cli.services.containers.ContainerService.get_image_details","title":"<code>get_image_details(image_name)</code>","text":"<p>Get metadata about a local Docker image.</p> <p>Parameters:</p> Name Type Description Default <code>image_name</code> <code>str</code> <p>Name of the image to inspect.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict[str, Any] | None</code> <p>Image metadata or None if not found.</p> Source code in <code>agentcore_cli/services/containers.py</code> Python<pre><code>def get_image_details(self, image_name: str) -&gt; dict[str, Any] | None:\n    \"\"\"Get metadata about a local Docker image.\n\n    Args:\n        image_name: Name of the image to inspect.\n\n    Returns:\n        dict: Image metadata or None if not found.\n    \"\"\"\n    try:\n        # Execute the docker inspect command\n        cmd = [\"docker\", \"inspect\", image_name]\n        returncode, stdout, stderr = execute_command(cmd, check=False)\n\n        if returncode != 0:\n            # Image likely doesn't exist\n            return None\n\n        import json\n\n        # Parse the JSON output - result is a list of one object\n        image_data = json.loads(stdout)\n        if image_data and len(image_data) &gt; 0:\n            return dict(image_data[0])\n        return None\n    except Exception as e:\n        logger.error(f\"Error getting image details: {e}\")\n        return None\n</code></pre>"},{"location":"reference/agentcore_cli/services/containers/#agentcore_cli.services.containers.ContainerService.push_image","title":"<code>push_image(repo_name, tag, repo_uri, save_config=True)</code>","text":"<p>Push Docker image to ECR.</p> <p>Parameters:</p> Name Type Description Default <code>repo_name</code> <code>str</code> <p>Name of the ECR repository.</p> required <code>tag</code> <code>str</code> <p>Image tag.</p> required <code>repo_uri</code> <code>str</code> <p>Repository URI.</p> required <code>save_config</code> <code>bool</code> <p>Whether to save repository details to config.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str | None</code> <p>Full remote image URI or None on failure.</p> Source code in <code>agentcore_cli/services/containers.py</code> Python<pre><code>def push_image(self, repo_name: str, tag: str, repo_uri: str, save_config: bool = True) -&gt; str | None:\n    \"\"\"Push Docker image to ECR.\n\n    Args:\n        repo_name: Name of the ECR repository.\n        tag: Image tag.\n        repo_uri: Repository URI.\n        save_config: Whether to save repository details to config.\n\n    Returns:\n        str: Full remote image URI or None on failure.\n    \"\"\"\n    try:\n        # Authenticate with ECR first\n        if not self._authenticate_ecr():\n            return None\n\n        # Tag image with ECR URI\n        local_image = f\"{repo_name}:{tag}\"\n\n        # Debug logging to see what we're getting\n        logger.info(f\"DEBUG: repo_uri = '{repo_uri}'\")\n        logger.info(f\"DEBUG: tag = '{tag}'\")\n\n        # Ensure repo_uri doesn't already contain a tag\n        if \":\" in repo_uri and not repo_uri.endswith(\".amazonaws.com\"):\n            # If there's a colon and it's not just the domain part, strip the tag\n            repo_uri_clean = repo_uri.rsplit(\":\", 1)[0]\n            logger.info(f\"DEBUG: Stripped existing tag from repo_uri: '{repo_uri}' -&gt; '{repo_uri_clean}'\")\n            repo_uri = repo_uri_clean\n\n        remote_image = f\"{repo_uri}:{tag}\"\n        logger.info(f\"DEBUG: final remote_image = '{remote_image}'\")\n\n        logger.info(f\"Tagging image as {remote_image}...\")\n        if not self.tag_image(local_image, remote_image):\n            return None\n\n        # Push to ECR\n        logger.info(\"Pushing image to ECR...\")\n        success, message = self._push_docker_image(remote_image)\n\n        if not success:\n            logger.error(f\"Failed to push image to ECR: {message}\")\n            return None\n\n        logger.success(f\"Image pushed to ECR: {remote_image}\")\n\n        # Save to config\n        if save_config:\n            from ..models import ECRRepository\n            from datetime import datetime\n\n            # Extract registry_id and repository_uri from the remote image\n            # remote_image format: registry_id.dkr.ecr.region.amazonaws.com/repo_name:tag\n            registry_id = remote_image.split(\".\")[0]  # Extract account ID\n            repo_uri_without_tag = remote_image.rsplit(\":\", 1)[0]  # Remove tag\n\n            # Create ECR repository config with proper parameters\n            ecr_config = ECRRepository(\n                name=repo_name,\n                registry_id=registry_id,\n                repository_uri=repo_uri_without_tag,\n                region=self.region,\n                image_scanning_config=True,  # Default to enabled\n                image_tag_mutability=\"MUTABLE\",  # Default\n                available_tags={tag},  # Add the current tag\n                created_at=datetime.now(),\n                last_sync=datetime.now(),\n                last_push=datetime.now(),\n            )\n\n            # Add to global resources\n            config_manager.add_ecr_repository(repo_name, ecr_config)\n\n        return remote_image\n    except Exception as e:\n        logger.error(\"Failed to push image to ECR\", exception=e)\n        return None\n</code></pre>"},{"location":"reference/agentcore_cli/services/containers/#agentcore_cli.services.containers.ContainerService.tag_image","title":"<code>tag_image(source_tag, target_tag)</code>","text":"<p>Tag a Docker image with a new tag.</p> <p>Parameters:</p> Name Type Description Default <code>source_tag</code> <code>str</code> <p>Source image tag.</p> required <code>target_tag</code> <code>str</code> <p>Target image tag.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if successful, False otherwise.</p> Source code in <code>agentcore_cli/services/containers.py</code> Python<pre><code>def tag_image(self, source_tag: str, target_tag: str) -&gt; bool:\n    \"\"\"Tag a Docker image with a new tag.\n\n    Args:\n        source_tag: Source image tag.\n        target_tag: Target image tag.\n\n    Returns:\n        bool: True if successful, False otherwise.\n    \"\"\"\n    try:\n        success, message = self._tag_docker_image(source_tag, target_tag)\n\n        if success:\n            logger.success(f\"Docker image tagged as {target_tag}\")\n            return True\n        else:\n            logger.error(f\"Failed to tag Docker image: {message}\")\n            return False\n    except Exception as e:\n        logger.error(\"Failed to tag Docker image\", exception=e)\n        return False\n</code></pre>"},{"location":"reference/agentcore_cli/services/containers/#agentcore_cli.services.containers.ContainerService.validate_image","title":"<code>validate_image(image_name)</code>","text":"<p>Validate that a Docker image exists locally.</p> <p>Parameters:</p> Name Type Description Default <code>image_name</code> <code>str</code> <p>Name of the image to check.</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <code>tuple[bool, str]</code> <p>(exists, message)</p> Source code in <code>agentcore_cli/services/containers.py</code> Python<pre><code>def validate_image(self, image_name: str) -&gt; tuple[bool, str]:\n    \"\"\"Validate that a Docker image exists locally.\n\n    Args:\n        image_name: Name of the image to check.\n\n    Returns:\n        tuple: (exists, message)\n    \"\"\"\n    try:\n        # Execute the docker images command\n        cmd = [\"docker\", \"images\", \"--format\", \"{{.Repository}}:{{.Tag}}\", image_name]\n        returncode, stdout, stderr = execute_command(cmd, check=False)\n        output = stdout.strip()\n\n        # Check if the image exists\n        if returncode == 0 and output:\n            return True, f\"Image {image_name} exists\"\n        else:\n            return False, f\"Image {image_name} does not exist locally\"\n    except Exception as e:\n        return False, f\"Error checking image: {str(e)}\"\n</code></pre>"},{"location":"reference/agentcore_cli/services/ecr/","title":"agentcore_cli.services.ecr","text":""},{"location":"reference/agentcore_cli/services/ecr/#agentcore_cli.services.ecr","title":"<code>agentcore_cli.services.ecr</code>","text":"<p>ECR service operations for AgentCore Platform CLI.</p> <p>This module provides a service layer for AWS ECR operations using CloudFormation to create and manage repositories for agent containers.</p>"},{"location":"reference/agentcore_cli/services/ecr/#agentcore_cli.services.ecr.ECRService","title":"<code>ECRService</code>","text":"<p>Service for AWS ECR operations.</p> Source code in <code>agentcore_cli/services/ecr.py</code> Python<pre><code>class ECRService:\n    \"\"\"Service for AWS ECR operations.\"\"\"\n\n    def __init__(self, region: str, session: Session | None = None):\n        \"\"\"Initialize the ECR service.\n\n        Args:\n            region: AWS region for ECR operations.\n            session: Boto3 session to use. If None, creates a new session.\n        \"\"\"\n        self.region = region\n        self.session = session or Session(region_name=region)\n        self.cfn_service = CFNService(region)\n        self.ecr_client = self.session.client(\"ecr\", region_name=region)\n\n    def create_repository(\n        self,\n        repository_name: str,\n        environment: str | None = \"dev\",\n        image_scanning: bool = True,\n        lifecycle_policy_days: int = 30,\n        tags: dict[str, str] | None = None,\n    ) -&gt; tuple[bool, ECRRepository | None, str]:\n        \"\"\"Create an ECR repository using CloudFormation.\n\n        Args:\n            repository_name: Name of the repository to create.\n            environment: Environment name (default: dev).\n            image_scanning: Whether to enable image scanning (default: True).\n            lifecycle_policy_days: Number of days before untagged images are expired (default: 30).\n            tags: Optional tags to apply to the repository.\n\n        Returns:\n            Tuple of (success, repository, message).\n        \"\"\"\n        try:\n            # Validate repository name\n            is_valid, error_msg = validate_repo_name(repository_name)\n            if not is_valid:\n                return False, None, error_msg\n\n            # Ensure environment has a valid value\n            if environment is None:\n                environment = \"dev\"\n\n            # Get the template file path\n            template_dir = Path(__file__).parent / \"templates\"\n            template_path = template_dir / \"ecr.cloudformation.yaml\"\n\n            if not template_path.exists():\n                error_msg = f\"Template file not found: {template_path}\"\n                logger.error(error_msg)\n                return False, None, error_msg\n\n            # Read the template file\n            with open(template_path, encoding=\"utf-8\") as f:\n                template_body = f.read()\n\n            # Create stack name\n            stack_name = f\"agentcore-{repository_name}-{environment}-ecr\"\n\n            # Set up parameters\n            # Using Any type to avoid type errors with CloudFormation parameter types\n            parameters: list[Any] = [\n                {\"ParameterKey\": \"RepositoryName\", \"ParameterValue\": repository_name},\n                {\"ParameterKey\": \"Environment\", \"ParameterValue\": environment},\n                {\"ParameterKey\": \"ImageScanningEnabled\", \"ParameterValue\": str(image_scanning).lower()},\n                {\"ParameterKey\": \"LifecyclePolicyDays\", \"ParameterValue\": str(lifecycle_policy_days)},\n            ]\n\n            # Create or update the stack\n            logger.info(f\"Creating/updating ECR repository '{repository_name}'...\")\n            success, message = self.cfn_service.create_update_stack(\n                stack_name, template_body, parameters, wait_for_completion=True, timeout_minutes=15\n            )\n\n            if not success:\n                error_msg = f\"Failed to create/update ECR stack: {message}\"\n                logger.error(error_msg)\n                return False, None, error_msg\n\n            # Get stack outputs (stack is guaranteed to be complete now)\n            outputs = self.cfn_service.get_stack_outputs(stack_name)\n\n            # Extract repository URI and ARN from outputs\n            repo_info = {}\n            for output in outputs:\n                if output.get(\"OutputKey\") == \"RepositoryUri\":\n                    repo_info[\"uri\"] = output.get(\"OutputValue\")\n                elif output.get(\"OutputKey\") == \"RepositoryArn\":\n                    repo_info[\"arn\"] = output.get(\"OutputValue\")\n\n            if \"uri\" in repo_info:\n                # Extract registry_id from the repository URI\n                # Format: registry_id.dkr.ecr.region.amazonaws.com/repo_name\n                repo_uri = str(repo_info[\"uri\"])\n                registry_id = repo_uri.split(\".\")[0]  # Extract account ID\n\n                # Create ECR repository model\n                repository = ECRRepository(\n                    name=repository_name,\n                    registry_id=registry_id,\n                    repository_uri=repo_uri,\n                    region=self.region,\n                    image_scanning_config=image_scanning,\n                    image_tag_mutability=\"MUTABLE\",  # Default\n                    created_at=datetime.now(),\n                    last_sync=datetime.now(),\n                )\n\n                logger.success(f\"ECR repository created: {repository_name} ({repo_info['uri']})\")\n                return True, repository, f\"Repository {repository_name} created successfully\"\n            else:\n                logger.error(\"Failed to retrieve repository URI from stack outputs\")\n                return False, None, \"Failed to retrieve repository URI from stack outputs\"\n\n        except Exception as e:\n            error_msg = f\"Failed to create ECR repository: {str(e)}\"\n            logger.error(error_msg)\n            return False, None, error_msg\n\n    def delete_repository(\n        self, repository_name: str, environment: str | None = \"dev\", force: bool = False\n    ) -&gt; tuple[bool, str]:\n        \"\"\"Delete an ECR repository by deleting the CloudFormation stack.\n\n        Args:\n            repository_name: Name of the repository to delete.\n            environment: Environment name (default: dev).\n            force: Whether to force deletion of the repository even if it contains images.\n\n        Returns:\n            Tuple of (success, message).\n        \"\"\"\n        try:\n            # Validate repository name\n            is_valid, error_msg = validate_repo_name(repository_name)\n            if not is_valid:\n                return False, error_msg\n\n            # Ensure environment has a valid value\n            if environment is None:\n                environment = \"dev\"\n            # Check if repository exists\n            try:\n                self.ecr_client.describe_repositories(repositoryNames=[repository_name])\n\n                # If force is True, delete all images first\n                if force:\n                    logger.info(f\"Force delete requested, deleting all images in '{repository_name}'...\")\n                    try:\n                        # Get image IDs\n                        images = self.ecr_client.list_images(repositoryName=repository_name)\n                        image_ids = images.get(\"imageIds\", [])\n\n                        if image_ids:\n                            # Delete images\n                            self.ecr_client.batch_delete_image(repositoryName=repository_name, imageIds=image_ids)\n                            logger.info(f\"Deleted {len(image_ids)} images from '{repository_name}'\")\n                    except Exception as img_err:\n                        logger.warning(f\"Error deleting images: {str(img_err)}\")\n\n            except self.ecr_client.exceptions.RepositoryNotFoundException:\n                logger.warning(f\"Repository '{repository_name}' not found\")\n            except Exception as e:\n                logger.warning(f\"Error checking repository existence: {str(e)}\")\n\n            # Create stack name\n            stack_name = f\"agentcore-{repository_name}-{environment}-ecr\"\n\n            # Check if stack exists\n            try:\n                self.cfn_service.get_stack_status(stack_name)\n            except Exception:\n                logger.warning(f\"ECR stack for repository '{repository_name}' not found\")\n                return False, f\"ECR stack for repository '{repository_name}' not found\"\n\n            # Delete the stack\n            logger.info(f\"Deleting ECR repository '{repository_name}'...\")\n            success, message = self.cfn_service.delete_stack(stack_name, wait_for_completion=True, timeout_minutes=10)\n\n            if success:\n                logger.success(f\"ECR repository '{repository_name}' deleted successfully\")\n                return True, message\n            else:\n                logger.error(f\"ECR repository deletion failed: {message}\")\n                return False, message\n\n        except Exception as e:\n            error_msg = f\"Failed to delete ECR repository: {str(e)}\"\n            logger.error(error_msg)\n            return False, error_msg\n\n    def get_repository(self, repository_name: str) -&gt; tuple[bool, ECRRepository | None, str]:\n        \"\"\"Get details about an ECR repository.\n\n        Args:\n            repository_name: Name of the repository.\n\n        Returns:\n            Tuple of (success, repository, message).\n        \"\"\"\n        try:\n            # Validate repository name\n            is_valid, error_msg = validate_repo_name(repository_name)\n            if not is_valid:\n                return False, None, error_msg\n\n            # Get repository details\n            response = self.ecr_client.describe_repositories(repositoryNames=[repository_name])\n            repositories = response.get(\"repositories\", [])\n\n            if not repositories:\n                return False, None, f\"Repository '{repository_name}' not found\"\n\n            repo_data = repositories[0]\n\n            # Create ECR repository model\n            repo_uri = str(repo_data.get(\"repositoryUri\", \"\"))\n            registry_id = repo_uri.split(\".\")[0] if repo_uri else \"\"  # Extract account ID\n\n            repository = ECRRepository(\n                name=repository_name,\n                registry_id=registry_id,\n                repository_uri=repo_uri,\n                region=self.region,\n                image_scanning_config=repo_data.get(\"imageScanningConfiguration\", {}).get(\"scanOnPush\", False),\n                image_tag_mutability=repo_data.get(\"imageTagMutability\", \"MUTABLE\"),\n                created_at=repo_data.get(\"createdAt\"),\n                last_sync=datetime.now(),\n            )\n\n            return True, repository, f\"Repository '{repository_name}' found\"\n\n        except self.ecr_client.exceptions.RepositoryNotFoundException:\n            return False, None, f\"Repository '{repository_name}' not found\"\n        except Exception as e:\n            error_msg = f\"Failed to get ECR repository: {str(e)}\"\n            logger.error(error_msg)\n            return False, None, error_msg\n\n    def list_repositories(self) -&gt; tuple[bool, list[dict[str, Any]], str]:\n        \"\"\"List all ECR repositories in the account.\n\n        Returns:\n            Tuple of (success, repositories, message).\n        \"\"\"\n        try:\n            # List repositories\n            response = self.ecr_client.describe_repositories()\n            repos = response.get(\"repositories\", [])\n\n            # Convert to plain dictionaries for compatibility\n            repositories = []\n            for repo in repos:\n                repositories.append(dict(repo))\n\n            return True, repositories, f\"Found {len(repositories)} repositories\"\n\n        except Exception as e:\n            error_msg = f\"Failed to list ECR repositories: {str(e)}\"\n            logger.error(error_msg)\n            return False, [], error_msg\n\n    def get_auth_token(self) -&gt; tuple[bool, dict[str, Any] | None, str]:\n        \"\"\"Get an ECR authentication token.\n\n        Returns:\n            Tuple of (success, auth_data, message).\n        \"\"\"\n        try:\n            # Get auth token\n            response = self.ecr_client.get_authorization_token()\n            auth_data = response.get(\"authorizationData\", [])\n\n            if not auth_data:\n                return False, None, \"No authorization data returned\"\n\n            # Convert to plain dictionary for compatibility\n            auth_dict = dict(auth_data[0])\n\n            return True, auth_dict, \"Authorization token retrieved\"\n\n        except Exception as e:\n            error_msg = f\"Failed to get ECR authorization token: {str(e)}\"\n            logger.error(error_msg)\n            return False, None, error_msg\n\n    def set_lifecycle_policy(self, repository_name: str, max_days: int = 30) -&gt; tuple[bool, str]:\n        \"\"\"Set a lifecycle policy on an ECR repository.\n\n        Args:\n            repository_name: Name of the repository.\n            max_days: Maximum number of days to keep untagged images.\n\n        Returns:\n            Tuple of (success, message).\n        \"\"\"\n        try:\n            # Validate repository name\n            is_valid, error_msg = validate_repo_name(repository_name)\n            if not is_valid:\n                return False, error_msg\n\n            # Define a lifecycle policy to expire untagged images after max_days\n            policy_text = f\"\"\"{{\n                \"rules\": [\n                    {{\n                        \"rulePriority\": 1,\n                        \"description\": \"Expire untagged images older than {max_days} days\",\n                        \"selection\": {{\n                            \"tagStatus\": \"untagged\",\n                            \"countType\": \"sinceImagePushed\",\n                            \"countUnit\": \"days\",\n                            \"countNumber\": {max_days}\n                        }},\n                        \"action\": {{\n                            \"type\": \"expire\"\n                        }}\n                    }}\n                ]\n            }}\"\"\"\n\n            # Apply the policy\n            self.ecr_client.put_lifecycle_policy(repositoryName=repository_name, lifecyclePolicyText=policy_text)\n\n            return True, f\"Lifecycle policy set on repository '{repository_name}'\"\n\n        except self.ecr_client.exceptions.RepositoryNotFoundException:\n            return False, f\"Repository '{repository_name}' not found\"\n        except Exception as e:\n            error_msg = f\"Failed to set lifecycle policy: {str(e)}\"\n            logger.error(error_msg)\n            return False, error_msg\n</code></pre>"},{"location":"reference/agentcore_cli/services/ecr/#agentcore_cli.services.ecr.ECRService.__init__","title":"<code>__init__(region, session=None)</code>","text":"<p>Initialize the ECR service.</p> <p>Parameters:</p> Name Type Description Default <code>region</code> <code>str</code> <p>AWS region for ECR operations.</p> required <code>session</code> <code>Session | None</code> <p>Boto3 session to use. If None, creates a new session.</p> <code>None</code> Source code in <code>agentcore_cli/services/ecr.py</code> Python<pre><code>def __init__(self, region: str, session: Session | None = None):\n    \"\"\"Initialize the ECR service.\n\n    Args:\n        region: AWS region for ECR operations.\n        session: Boto3 session to use. If None, creates a new session.\n    \"\"\"\n    self.region = region\n    self.session = session or Session(region_name=region)\n    self.cfn_service = CFNService(region)\n    self.ecr_client = self.session.client(\"ecr\", region_name=region)\n</code></pre>"},{"location":"reference/agentcore_cli/services/ecr/#agentcore_cli.services.ecr.ECRService.create_repository","title":"<code>create_repository(repository_name, environment='dev', image_scanning=True, lifecycle_policy_days=30, tags=None)</code>","text":"<p>Create an ECR repository using CloudFormation.</p> <p>Parameters:</p> Name Type Description Default <code>repository_name</code> <code>str</code> <p>Name of the repository to create.</p> required <code>environment</code> <code>str | None</code> <p>Environment name (default: dev).</p> <code>'dev'</code> <code>image_scanning</code> <code>bool</code> <p>Whether to enable image scanning (default: True).</p> <code>True</code> <code>lifecycle_policy_days</code> <code>int</code> <p>Number of days before untagged images are expired (default: 30).</p> <code>30</code> <code>tags</code> <code>dict[str, str] | None</code> <p>Optional tags to apply to the repository.</p> <code>None</code> <p>Returns:</p> Type Description <code>tuple[bool, ECRRepository | None, str]</code> <p>Tuple of (success, repository, message).</p> Source code in <code>agentcore_cli/services/ecr.py</code> Python<pre><code>def create_repository(\n    self,\n    repository_name: str,\n    environment: str | None = \"dev\",\n    image_scanning: bool = True,\n    lifecycle_policy_days: int = 30,\n    tags: dict[str, str] | None = None,\n) -&gt; tuple[bool, ECRRepository | None, str]:\n    \"\"\"Create an ECR repository using CloudFormation.\n\n    Args:\n        repository_name: Name of the repository to create.\n        environment: Environment name (default: dev).\n        image_scanning: Whether to enable image scanning (default: True).\n        lifecycle_policy_days: Number of days before untagged images are expired (default: 30).\n        tags: Optional tags to apply to the repository.\n\n    Returns:\n        Tuple of (success, repository, message).\n    \"\"\"\n    try:\n        # Validate repository name\n        is_valid, error_msg = validate_repo_name(repository_name)\n        if not is_valid:\n            return False, None, error_msg\n\n        # Ensure environment has a valid value\n        if environment is None:\n            environment = \"dev\"\n\n        # Get the template file path\n        template_dir = Path(__file__).parent / \"templates\"\n        template_path = template_dir / \"ecr.cloudformation.yaml\"\n\n        if not template_path.exists():\n            error_msg = f\"Template file not found: {template_path}\"\n            logger.error(error_msg)\n            return False, None, error_msg\n\n        # Read the template file\n        with open(template_path, encoding=\"utf-8\") as f:\n            template_body = f.read()\n\n        # Create stack name\n        stack_name = f\"agentcore-{repository_name}-{environment}-ecr\"\n\n        # Set up parameters\n        # Using Any type to avoid type errors with CloudFormation parameter types\n        parameters: list[Any] = [\n            {\"ParameterKey\": \"RepositoryName\", \"ParameterValue\": repository_name},\n            {\"ParameterKey\": \"Environment\", \"ParameterValue\": environment},\n            {\"ParameterKey\": \"ImageScanningEnabled\", \"ParameterValue\": str(image_scanning).lower()},\n            {\"ParameterKey\": \"LifecyclePolicyDays\", \"ParameterValue\": str(lifecycle_policy_days)},\n        ]\n\n        # Create or update the stack\n        logger.info(f\"Creating/updating ECR repository '{repository_name}'...\")\n        success, message = self.cfn_service.create_update_stack(\n            stack_name, template_body, parameters, wait_for_completion=True, timeout_minutes=15\n        )\n\n        if not success:\n            error_msg = f\"Failed to create/update ECR stack: {message}\"\n            logger.error(error_msg)\n            return False, None, error_msg\n\n        # Get stack outputs (stack is guaranteed to be complete now)\n        outputs = self.cfn_service.get_stack_outputs(stack_name)\n\n        # Extract repository URI and ARN from outputs\n        repo_info = {}\n        for output in outputs:\n            if output.get(\"OutputKey\") == \"RepositoryUri\":\n                repo_info[\"uri\"] = output.get(\"OutputValue\")\n            elif output.get(\"OutputKey\") == \"RepositoryArn\":\n                repo_info[\"arn\"] = output.get(\"OutputValue\")\n\n        if \"uri\" in repo_info:\n            # Extract registry_id from the repository URI\n            # Format: registry_id.dkr.ecr.region.amazonaws.com/repo_name\n            repo_uri = str(repo_info[\"uri\"])\n            registry_id = repo_uri.split(\".\")[0]  # Extract account ID\n\n            # Create ECR repository model\n            repository = ECRRepository(\n                name=repository_name,\n                registry_id=registry_id,\n                repository_uri=repo_uri,\n                region=self.region,\n                image_scanning_config=image_scanning,\n                image_tag_mutability=\"MUTABLE\",  # Default\n                created_at=datetime.now(),\n                last_sync=datetime.now(),\n            )\n\n            logger.success(f\"ECR repository created: {repository_name} ({repo_info['uri']})\")\n            return True, repository, f\"Repository {repository_name} created successfully\"\n        else:\n            logger.error(\"Failed to retrieve repository URI from stack outputs\")\n            return False, None, \"Failed to retrieve repository URI from stack outputs\"\n\n    except Exception as e:\n        error_msg = f\"Failed to create ECR repository: {str(e)}\"\n        logger.error(error_msg)\n        return False, None, error_msg\n</code></pre>"},{"location":"reference/agentcore_cli/services/ecr/#agentcore_cli.services.ecr.ECRService.delete_repository","title":"<code>delete_repository(repository_name, environment='dev', force=False)</code>","text":"<p>Delete an ECR repository by deleting the CloudFormation stack.</p> <p>Parameters:</p> Name Type Description Default <code>repository_name</code> <code>str</code> <p>Name of the repository to delete.</p> required <code>environment</code> <code>str | None</code> <p>Environment name (default: dev).</p> <code>'dev'</code> <code>force</code> <code>bool</code> <p>Whether to force deletion of the repository even if it contains images.</p> <code>False</code> <p>Returns:</p> Type Description <code>tuple[bool, str]</code> <p>Tuple of (success, message).</p> Source code in <code>agentcore_cli/services/ecr.py</code> Python<pre><code>def delete_repository(\n    self, repository_name: str, environment: str | None = \"dev\", force: bool = False\n) -&gt; tuple[bool, str]:\n    \"\"\"Delete an ECR repository by deleting the CloudFormation stack.\n\n    Args:\n        repository_name: Name of the repository to delete.\n        environment: Environment name (default: dev).\n        force: Whether to force deletion of the repository even if it contains images.\n\n    Returns:\n        Tuple of (success, message).\n    \"\"\"\n    try:\n        # Validate repository name\n        is_valid, error_msg = validate_repo_name(repository_name)\n        if not is_valid:\n            return False, error_msg\n\n        # Ensure environment has a valid value\n        if environment is None:\n            environment = \"dev\"\n        # Check if repository exists\n        try:\n            self.ecr_client.describe_repositories(repositoryNames=[repository_name])\n\n            # If force is True, delete all images first\n            if force:\n                logger.info(f\"Force delete requested, deleting all images in '{repository_name}'...\")\n                try:\n                    # Get image IDs\n                    images = self.ecr_client.list_images(repositoryName=repository_name)\n                    image_ids = images.get(\"imageIds\", [])\n\n                    if image_ids:\n                        # Delete images\n                        self.ecr_client.batch_delete_image(repositoryName=repository_name, imageIds=image_ids)\n                        logger.info(f\"Deleted {len(image_ids)} images from '{repository_name}'\")\n                except Exception as img_err:\n                    logger.warning(f\"Error deleting images: {str(img_err)}\")\n\n        except self.ecr_client.exceptions.RepositoryNotFoundException:\n            logger.warning(f\"Repository '{repository_name}' not found\")\n        except Exception as e:\n            logger.warning(f\"Error checking repository existence: {str(e)}\")\n\n        # Create stack name\n        stack_name = f\"agentcore-{repository_name}-{environment}-ecr\"\n\n        # Check if stack exists\n        try:\n            self.cfn_service.get_stack_status(stack_name)\n        except Exception:\n            logger.warning(f\"ECR stack for repository '{repository_name}' not found\")\n            return False, f\"ECR stack for repository '{repository_name}' not found\"\n\n        # Delete the stack\n        logger.info(f\"Deleting ECR repository '{repository_name}'...\")\n        success, message = self.cfn_service.delete_stack(stack_name, wait_for_completion=True, timeout_minutes=10)\n\n        if success:\n            logger.success(f\"ECR repository '{repository_name}' deleted successfully\")\n            return True, message\n        else:\n            logger.error(f\"ECR repository deletion failed: {message}\")\n            return False, message\n\n    except Exception as e:\n        error_msg = f\"Failed to delete ECR repository: {str(e)}\"\n        logger.error(error_msg)\n        return False, error_msg\n</code></pre>"},{"location":"reference/agentcore_cli/services/ecr/#agentcore_cli.services.ecr.ECRService.get_auth_token","title":"<code>get_auth_token()</code>","text":"<p>Get an ECR authentication token.</p> <p>Returns:</p> Type Description <code>tuple[bool, dict[str, Any] | None, str]</code> <p>Tuple of (success, auth_data, message).</p> Source code in <code>agentcore_cli/services/ecr.py</code> Python<pre><code>def get_auth_token(self) -&gt; tuple[bool, dict[str, Any] | None, str]:\n    \"\"\"Get an ECR authentication token.\n\n    Returns:\n        Tuple of (success, auth_data, message).\n    \"\"\"\n    try:\n        # Get auth token\n        response = self.ecr_client.get_authorization_token()\n        auth_data = response.get(\"authorizationData\", [])\n\n        if not auth_data:\n            return False, None, \"No authorization data returned\"\n\n        # Convert to plain dictionary for compatibility\n        auth_dict = dict(auth_data[0])\n\n        return True, auth_dict, \"Authorization token retrieved\"\n\n    except Exception as e:\n        error_msg = f\"Failed to get ECR authorization token: {str(e)}\"\n        logger.error(error_msg)\n        return False, None, error_msg\n</code></pre>"},{"location":"reference/agentcore_cli/services/ecr/#agentcore_cli.services.ecr.ECRService.get_repository","title":"<code>get_repository(repository_name)</code>","text":"<p>Get details about an ECR repository.</p> <p>Parameters:</p> Name Type Description Default <code>repository_name</code> <code>str</code> <p>Name of the repository.</p> required <p>Returns:</p> Type Description <code>tuple[bool, ECRRepository | None, str]</code> <p>Tuple of (success, repository, message).</p> Source code in <code>agentcore_cli/services/ecr.py</code> Python<pre><code>def get_repository(self, repository_name: str) -&gt; tuple[bool, ECRRepository | None, str]:\n    \"\"\"Get details about an ECR repository.\n\n    Args:\n        repository_name: Name of the repository.\n\n    Returns:\n        Tuple of (success, repository, message).\n    \"\"\"\n    try:\n        # Validate repository name\n        is_valid, error_msg = validate_repo_name(repository_name)\n        if not is_valid:\n            return False, None, error_msg\n\n        # Get repository details\n        response = self.ecr_client.describe_repositories(repositoryNames=[repository_name])\n        repositories = response.get(\"repositories\", [])\n\n        if not repositories:\n            return False, None, f\"Repository '{repository_name}' not found\"\n\n        repo_data = repositories[0]\n\n        # Create ECR repository model\n        repo_uri = str(repo_data.get(\"repositoryUri\", \"\"))\n        registry_id = repo_uri.split(\".\")[0] if repo_uri else \"\"  # Extract account ID\n\n        repository = ECRRepository(\n            name=repository_name,\n            registry_id=registry_id,\n            repository_uri=repo_uri,\n            region=self.region,\n            image_scanning_config=repo_data.get(\"imageScanningConfiguration\", {}).get(\"scanOnPush\", False),\n            image_tag_mutability=repo_data.get(\"imageTagMutability\", \"MUTABLE\"),\n            created_at=repo_data.get(\"createdAt\"),\n            last_sync=datetime.now(),\n        )\n\n        return True, repository, f\"Repository '{repository_name}' found\"\n\n    except self.ecr_client.exceptions.RepositoryNotFoundException:\n        return False, None, f\"Repository '{repository_name}' not found\"\n    except Exception as e:\n        error_msg = f\"Failed to get ECR repository: {str(e)}\"\n        logger.error(error_msg)\n        return False, None, error_msg\n</code></pre>"},{"location":"reference/agentcore_cli/services/ecr/#agentcore_cli.services.ecr.ECRService.list_repositories","title":"<code>list_repositories()</code>","text":"<p>List all ECR repositories in the account.</p> <p>Returns:</p> Type Description <code>tuple[bool, list[dict[str, Any]], str]</code> <p>Tuple of (success, repositories, message).</p> Source code in <code>agentcore_cli/services/ecr.py</code> Python<pre><code>def list_repositories(self) -&gt; tuple[bool, list[dict[str, Any]], str]:\n    \"\"\"List all ECR repositories in the account.\n\n    Returns:\n        Tuple of (success, repositories, message).\n    \"\"\"\n    try:\n        # List repositories\n        response = self.ecr_client.describe_repositories()\n        repos = response.get(\"repositories\", [])\n\n        # Convert to plain dictionaries for compatibility\n        repositories = []\n        for repo in repos:\n            repositories.append(dict(repo))\n\n        return True, repositories, f\"Found {len(repositories)} repositories\"\n\n    except Exception as e:\n        error_msg = f\"Failed to list ECR repositories: {str(e)}\"\n        logger.error(error_msg)\n        return False, [], error_msg\n</code></pre>"},{"location":"reference/agentcore_cli/services/ecr/#agentcore_cli.services.ecr.ECRService.set_lifecycle_policy","title":"<code>set_lifecycle_policy(repository_name, max_days=30)</code>","text":"<p>Set a lifecycle policy on an ECR repository.</p> <p>Parameters:</p> Name Type Description Default <code>repository_name</code> <code>str</code> <p>Name of the repository.</p> required <code>max_days</code> <code>int</code> <p>Maximum number of days to keep untagged images.</p> <code>30</code> <p>Returns:</p> Type Description <code>tuple[bool, str]</code> <p>Tuple of (success, message).</p> Source code in <code>agentcore_cli/services/ecr.py</code> Python<pre><code>def set_lifecycle_policy(self, repository_name: str, max_days: int = 30) -&gt; tuple[bool, str]:\n    \"\"\"Set a lifecycle policy on an ECR repository.\n\n    Args:\n        repository_name: Name of the repository.\n        max_days: Maximum number of days to keep untagged images.\n\n    Returns:\n        Tuple of (success, message).\n    \"\"\"\n    try:\n        # Validate repository name\n        is_valid, error_msg = validate_repo_name(repository_name)\n        if not is_valid:\n            return False, error_msg\n\n        # Define a lifecycle policy to expire untagged images after max_days\n        policy_text = f\"\"\"{{\n            \"rules\": [\n                {{\n                    \"rulePriority\": 1,\n                    \"description\": \"Expire untagged images older than {max_days} days\",\n                    \"selection\": {{\n                        \"tagStatus\": \"untagged\",\n                        \"countType\": \"sinceImagePushed\",\n                        \"countUnit\": \"days\",\n                        \"countNumber\": {max_days}\n                    }},\n                    \"action\": {{\n                        \"type\": \"expire\"\n                    }}\n                }}\n            ]\n        }}\"\"\"\n\n        # Apply the policy\n        self.ecr_client.put_lifecycle_policy(repositoryName=repository_name, lifecyclePolicyText=policy_text)\n\n        return True, f\"Lifecycle policy set on repository '{repository_name}'\"\n\n    except self.ecr_client.exceptions.RepositoryNotFoundException:\n        return False, f\"Repository '{repository_name}' not found\"\n    except Exception as e:\n        error_msg = f\"Failed to set lifecycle policy: {str(e)}\"\n        logger.error(error_msg)\n        return False, error_msg\n</code></pre>"},{"location":"reference/agentcore_cli/services/iam/","title":"agentcore_cli.services.iam","text":""},{"location":"reference/agentcore_cli/services/iam/#agentcore_cli.services.iam","title":"<code>agentcore_cli.services.iam</code>","text":"<p>IAM service operations for AgentCore Platform CLI.</p> <p>This module provides a service layer for AWS IAM operations using CloudFormation to create and manage IAM roles for AgentCore agents.</p>"},{"location":"reference/agentcore_cli/services/iam/#agentcore_cli.services.iam.IAMService","title":"<code>IAMService</code>","text":"<p>Service for AWS IAM operations.</p> Source code in <code>agentcore_cli/services/iam.py</code> Python<pre><code>class IAMService:\n    \"\"\"Service for AWS IAM operations.\"\"\"\n\n    def __init__(self, region: str, session: Session | None = None):\n        \"\"\"Initialize the IAM service.\n\n        Args:\n            region: AWS region for IAM operations.\n            session: Boto3 session to use. If None, creates a new session.\n        \"\"\"\n        self.region = region\n        self.session = session or Session(region_name=region)\n        self.cfn_service = CFNService(region)\n        self.iam_client = self.session.client(\"iam\", region_name=region)\n\n    def create_agent_role(\n        self, agent_name: str, environment: str | None = \"dev\", role_name_prefix: str = \"agentcore\"\n    ) -&gt; IAMRoleConfig | None:\n        \"\"\"Create an IAM role for an AgentCore agent using CloudFormation.\n\n        Args:\n            agent_name: Name of the agent.\n            environment: Environment name (default: dev).\n            role_name_prefix: Prefix for the IAM role name (default: agentcore).\n\n        Returns:\n            Tuple of (success, role_config, message).\n        \"\"\"\n        try:\n            # Ensure environment has a valid value\n            if environment is None:\n                environment = \"dev\"\n\n            # Get the template file path\n            template_dir = Path(__file__).parent / \"templates\"\n            template_path = template_dir / \"iam.cloudformation.yaml\"\n\n            if not template_path.exists():\n                error_msg = f\"Template file not found: {template_path}\"\n                logger.error(error_msg)\n                return None\n\n            # Read the template file\n            with open(template_path, encoding=\"utf-8\") as f:\n                template_body = f.read()\n\n            # Create stack name\n            stack_name = f\"agentcore-{agent_name}-{environment}-iam\"\n\n            # Set up parameters\n            # Using Any type to avoid type errors with CloudFormation parameter types\n            parameters: list[Any] = [\n                {\"ParameterKey\": \"AgentName\", \"ParameterValue\": agent_name},\n                {\"ParameterKey\": \"Environment\", \"ParameterValue\": environment},\n                {\"ParameterKey\": \"RoleNamePrefix\", \"ParameterValue\": role_name_prefix},\n            ]\n\n            # Create or update the stack\n            logger.info(f\"Creating/updating IAM role for agent '{agent_name}'...\")\n            self.cfn_service.create_update_stack(stack_name, template_body, parameters)\n\n            # Wait for stack creation/update to complete\n            logger.info(\"Waiting for IAM role creation to complete...\")\n\n            # Get stack outputs\n            stack_status = self.cfn_service.get_stack_status(stack_name)\n            while stack_status not in [\"CREATE_COMPLETE\", \"UPDATE_COMPLETE\"]:\n                logger.info(f\"Waiting for IAM role creation to complete... {stack_status}\")\n                time.sleep(1)\n                stack_status = self.cfn_service.get_stack_status(stack_name)\n            outputs = self.cfn_service.get_stack_outputs(stack_name)\n\n            # Extract role name and ARN from outputs\n            role_info: dict[str, Any] = {}\n            for output in outputs:\n                if output.get(\"OutputKey\") == \"RoleName\":\n                    role_info[\"role_name\"] = output.get(\"OutputValue\")\n                elif output.get(\"OutputKey\") == \"RoleArn\":\n                    role_info[\"role_arn\"] = output.get(\"OutputValue\")\n\n            if \"role_name\" in role_info and \"role_arn\" in role_info:\n                # Create IAM role config\n                role_config = IAMRoleConfig(\n                    name=str(role_info[\"role_name\"]),\n                    arn=str(role_info[\"role_arn\"]),\n                    region=self.region,\n                    path=\"/service-role/\",\n                    description=f\"Execution role for {agent_name} agent in {environment} environment\",\n                    created_at=datetime.now(),  # Use current time since CloudFormation doesn't provide creation time\n                )\n\n                logger.success(f\"IAM role created: {role_info['role_name']} ({role_info['role_arn']})\")\n                return role_config\n            else:\n                logger.error(\"Failed to retrieve role information from stack outputs\")\n                return None\n\n        except Exception as e:\n            error_msg = f\"Failed to create IAM role: {str(e)}\"\n            logger.error(error_msg)\n            return None\n\n    def delete_agent_role(self, agent_name: str, environment: str | None = \"dev\") -&gt; tuple[bool, str]:\n        \"\"\"Delete an IAM role for an AgentCore agent by deleting the CloudFormation stack.\n\n        Args:\n            agent_name: Name of the agent.\n            environment: Environment name (default: dev).\n\n        Returns:\n            Tuple of (success, message).\n        \"\"\"\n        try:\n            # Ensure environment has a valid value\n            if environment is None:\n                environment = \"dev\"\n\n            # Create stack name\n            stack_name = f\"agentcore-{agent_name}-{environment}-iam\"\n\n            # Check if stack exists\n            try:\n                self.cfn_service.get_stack_status(stack_name)\n            except Exception:\n                logger.warning(f\"IAM role stack for agent '{agent_name}' not found\")\n                return False, f\"IAM role stack for agent '{agent_name}' not found\"\n\n            # Delete the stack\n            logger.info(f\"Deleting IAM role for agent '{agent_name}'...\")\n            self.cfn_service.delete_stack(stack_name)\n\n            logger.success(f\"IAM role deletion initiated for agent '{agent_name}'\")\n            return True, f\"IAM role deletion initiated for agent '{agent_name}'\"\n\n        except Exception as e:\n            error_msg = f\"Failed to delete IAM role: {str(e)}\"\n            logger.error(error_msg)\n            return False, error_msg\n\n    def get_role(self, role_name: str) -&gt; tuple[bool, IAMRoleConfig | None, str]:\n        \"\"\"Get details for a specific IAM role.\n\n        Args:\n            role_name: Name of the IAM role.\n\n        Returns:\n            Tuple of (success, role_config, message).\n        \"\"\"\n        try:\n            # Get role details\n            response = self.iam_client.get_role(RoleName=role_name)\n            role_data = response.get(\"Role\", {})\n\n            if not role_data:\n                return False, None, f\"Role '{role_name}' not found\"\n\n            # Create IAM role config\n            role_config = IAMRoleConfig(\n                name=role_name,\n                arn=str(role_data.get(\"Arn\", \"\")),\n                region=self.region,\n                path=str(role_data.get(\"Path\", \"/\")),\n                description=str(role_data.get(\"Description\", \"\")),\n                created_at=role_data.get(\"CreateDate\"),  # AWS API returns datetime objects directly\n                # Cast to datetime | None to satisfy type checker\n                updated_at=datetime.now() if role_data.get(\"LastModifiedDate\") else None,\n            )\n\n            return True, role_config, f\"Role '{role_name}' found\"\n\n        except self.iam_client.exceptions.NoSuchEntityException:\n            return False, None, f\"Role '{role_name}' not found\"\n        except Exception as e:\n            error_msg = f\"Failed to get IAM role: {str(e)}\"\n            logger.error(error_msg)\n            return False, None, error_msg\n\n    def list_agent_roles(self, prefix: str = \"agentcore\") -&gt; tuple[bool, list[dict[str, Any]], str]:\n        \"\"\"List all IAM roles for AgentCore agents.\n\n        Args:\n            prefix: Prefix for the IAM role name (default: agentcore).\n\n        Returns:\n            Tuple of (success, roles, message).\n        \"\"\"\n        try:\n            path_prefix = \"/service-role/\"\n            roles: list[dict[str, Any]] = []\n\n            # List roles with pagination\n            paginator = self.iam_client.get_paginator(\"list_roles\")\n            for page in paginator.paginate(PathPrefix=path_prefix):\n                for role in page.get(\"Roles\", []):\n                    role_name = role.get(\"RoleName\", \"\")\n                    if role_name.startswith(prefix):\n                        roles.append(dict(role))\n\n            return True, roles, f\"Found {len(roles)} agent roles\"\n\n        except Exception as e:\n            error_msg = f\"Failed to list agent roles: {str(e)}\"\n            logger.error(error_msg)\n            return False, [], error_msg\n\n    def get_role_policy(self, role_name: str, policy_name: str) -&gt; tuple[bool, dict[str, Any], str]:\n        \"\"\"Get a specific policy attached to an IAM role.\n\n        Args:\n            role_name: Name of the IAM role.\n            policy_name: Name of the policy.\n\n        Returns:\n            Tuple of (success, policy_document, message).\n        \"\"\"\n        try:\n            # Get role policy\n            response = self.iam_client.get_role_policy(RoleName=role_name, PolicyName=policy_name)\n\n            # Convert policy document to dict if needed\n            raw_policy: Any = response.get(\"PolicyDocument\", {})\n\n            # Convert to dict[str, Any] using a deep copy approach\n            if isinstance(raw_policy, dict):\n                # Create a new dict with explicit string keys and Any values\n                result_dict: dict[str, Any] = {}\n                for key, value in raw_policy.items():\n                    result_dict[str(key)] = value\n            else:\n                # Parse JSON string to dict\n                import json\n\n                result_dict = json.loads(raw_policy) if raw_policy else {}\n\n            return True, result_dict, f\"Policy '{policy_name}' retrieved\"\n\n        except self.iam_client.exceptions.NoSuchEntityException:\n            return False, {}, f\"Policy '{policy_name}' not found for role '{role_name}'\"\n        except Exception as e:\n            error_msg = f\"Failed to get role policy: {str(e)}\"\n            logger.error(error_msg)\n            return False, {}, error_msg\n\n    def check_role_exists(self, role_name: str) -&gt; bool:\n        \"\"\"Check if an IAM role exists.\n\n        Args:\n            role_name: Name of the IAM role to check.\n\n        Returns:\n            bool: True if the role exists, False otherwise.\n        \"\"\"\n        try:\n            self.iam_client.get_role(RoleName=role_name)\n            return True\n        except self.iam_client.exceptions.NoSuchEntityException:\n            return False\n        except Exception:\n            return False\n</code></pre>"},{"location":"reference/agentcore_cli/services/iam/#agentcore_cli.services.iam.IAMService.__init__","title":"<code>__init__(region, session=None)</code>","text":"<p>Initialize the IAM service.</p> <p>Parameters:</p> Name Type Description Default <code>region</code> <code>str</code> <p>AWS region for IAM operations.</p> required <code>session</code> <code>Session | None</code> <p>Boto3 session to use. If None, creates a new session.</p> <code>None</code> Source code in <code>agentcore_cli/services/iam.py</code> Python<pre><code>def __init__(self, region: str, session: Session | None = None):\n    \"\"\"Initialize the IAM service.\n\n    Args:\n        region: AWS region for IAM operations.\n        session: Boto3 session to use. If None, creates a new session.\n    \"\"\"\n    self.region = region\n    self.session = session or Session(region_name=region)\n    self.cfn_service = CFNService(region)\n    self.iam_client = self.session.client(\"iam\", region_name=region)\n</code></pre>"},{"location":"reference/agentcore_cli/services/iam/#agentcore_cli.services.iam.IAMService.check_role_exists","title":"<code>check_role_exists(role_name)</code>","text":"<p>Check if an IAM role exists.</p> <p>Parameters:</p> Name Type Description Default <code>role_name</code> <code>str</code> <p>Name of the IAM role to check.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the role exists, False otherwise.</p> Source code in <code>agentcore_cli/services/iam.py</code> Python<pre><code>def check_role_exists(self, role_name: str) -&gt; bool:\n    \"\"\"Check if an IAM role exists.\n\n    Args:\n        role_name: Name of the IAM role to check.\n\n    Returns:\n        bool: True if the role exists, False otherwise.\n    \"\"\"\n    try:\n        self.iam_client.get_role(RoleName=role_name)\n        return True\n    except self.iam_client.exceptions.NoSuchEntityException:\n        return False\n    except Exception:\n        return False\n</code></pre>"},{"location":"reference/agentcore_cli/services/iam/#agentcore_cli.services.iam.IAMService.create_agent_role","title":"<code>create_agent_role(agent_name, environment='dev', role_name_prefix='agentcore')</code>","text":"<p>Create an IAM role for an AgentCore agent using CloudFormation.</p> <p>Parameters:</p> Name Type Description Default <code>agent_name</code> <code>str</code> <p>Name of the agent.</p> required <code>environment</code> <code>str | None</code> <p>Environment name (default: dev).</p> <code>'dev'</code> <code>role_name_prefix</code> <code>str</code> <p>Prefix for the IAM role name (default: agentcore).</p> <code>'agentcore'</code> <p>Returns:</p> Type Description <code>IAMRoleConfig | None</code> <p>Tuple of (success, role_config, message).</p> Source code in <code>agentcore_cli/services/iam.py</code> Python<pre><code>def create_agent_role(\n    self, agent_name: str, environment: str | None = \"dev\", role_name_prefix: str = \"agentcore\"\n) -&gt; IAMRoleConfig | None:\n    \"\"\"Create an IAM role for an AgentCore agent using CloudFormation.\n\n    Args:\n        agent_name: Name of the agent.\n        environment: Environment name (default: dev).\n        role_name_prefix: Prefix for the IAM role name (default: agentcore).\n\n    Returns:\n        Tuple of (success, role_config, message).\n    \"\"\"\n    try:\n        # Ensure environment has a valid value\n        if environment is None:\n            environment = \"dev\"\n\n        # Get the template file path\n        template_dir = Path(__file__).parent / \"templates\"\n        template_path = template_dir / \"iam.cloudformation.yaml\"\n\n        if not template_path.exists():\n            error_msg = f\"Template file not found: {template_path}\"\n            logger.error(error_msg)\n            return None\n\n        # Read the template file\n        with open(template_path, encoding=\"utf-8\") as f:\n            template_body = f.read()\n\n        # Create stack name\n        stack_name = f\"agentcore-{agent_name}-{environment}-iam\"\n\n        # Set up parameters\n        # Using Any type to avoid type errors with CloudFormation parameter types\n        parameters: list[Any] = [\n            {\"ParameterKey\": \"AgentName\", \"ParameterValue\": agent_name},\n            {\"ParameterKey\": \"Environment\", \"ParameterValue\": environment},\n            {\"ParameterKey\": \"RoleNamePrefix\", \"ParameterValue\": role_name_prefix},\n        ]\n\n        # Create or update the stack\n        logger.info(f\"Creating/updating IAM role for agent '{agent_name}'...\")\n        self.cfn_service.create_update_stack(stack_name, template_body, parameters)\n\n        # Wait for stack creation/update to complete\n        logger.info(\"Waiting for IAM role creation to complete...\")\n\n        # Get stack outputs\n        stack_status = self.cfn_service.get_stack_status(stack_name)\n        while stack_status not in [\"CREATE_COMPLETE\", \"UPDATE_COMPLETE\"]:\n            logger.info(f\"Waiting for IAM role creation to complete... {stack_status}\")\n            time.sleep(1)\n            stack_status = self.cfn_service.get_stack_status(stack_name)\n        outputs = self.cfn_service.get_stack_outputs(stack_name)\n\n        # Extract role name and ARN from outputs\n        role_info: dict[str, Any] = {}\n        for output in outputs:\n            if output.get(\"OutputKey\") == \"RoleName\":\n                role_info[\"role_name\"] = output.get(\"OutputValue\")\n            elif output.get(\"OutputKey\") == \"RoleArn\":\n                role_info[\"role_arn\"] = output.get(\"OutputValue\")\n\n        if \"role_name\" in role_info and \"role_arn\" in role_info:\n            # Create IAM role config\n            role_config = IAMRoleConfig(\n                name=str(role_info[\"role_name\"]),\n                arn=str(role_info[\"role_arn\"]),\n                region=self.region,\n                path=\"/service-role/\",\n                description=f\"Execution role for {agent_name} agent in {environment} environment\",\n                created_at=datetime.now(),  # Use current time since CloudFormation doesn't provide creation time\n            )\n\n            logger.success(f\"IAM role created: {role_info['role_name']} ({role_info['role_arn']})\")\n            return role_config\n        else:\n            logger.error(\"Failed to retrieve role information from stack outputs\")\n            return None\n\n    except Exception as e:\n        error_msg = f\"Failed to create IAM role: {str(e)}\"\n        logger.error(error_msg)\n        return None\n</code></pre>"},{"location":"reference/agentcore_cli/services/iam/#agentcore_cli.services.iam.IAMService.delete_agent_role","title":"<code>delete_agent_role(agent_name, environment='dev')</code>","text":"<p>Delete an IAM role for an AgentCore agent by deleting the CloudFormation stack.</p> <p>Parameters:</p> Name Type Description Default <code>agent_name</code> <code>str</code> <p>Name of the agent.</p> required <code>environment</code> <code>str | None</code> <p>Environment name (default: dev).</p> <code>'dev'</code> <p>Returns:</p> Type Description <code>tuple[bool, str]</code> <p>Tuple of (success, message).</p> Source code in <code>agentcore_cli/services/iam.py</code> Python<pre><code>def delete_agent_role(self, agent_name: str, environment: str | None = \"dev\") -&gt; tuple[bool, str]:\n    \"\"\"Delete an IAM role for an AgentCore agent by deleting the CloudFormation stack.\n\n    Args:\n        agent_name: Name of the agent.\n        environment: Environment name (default: dev).\n\n    Returns:\n        Tuple of (success, message).\n    \"\"\"\n    try:\n        # Ensure environment has a valid value\n        if environment is None:\n            environment = \"dev\"\n\n        # Create stack name\n        stack_name = f\"agentcore-{agent_name}-{environment}-iam\"\n\n        # Check if stack exists\n        try:\n            self.cfn_service.get_stack_status(stack_name)\n        except Exception:\n            logger.warning(f\"IAM role stack for agent '{agent_name}' not found\")\n            return False, f\"IAM role stack for agent '{agent_name}' not found\"\n\n        # Delete the stack\n        logger.info(f\"Deleting IAM role for agent '{agent_name}'...\")\n        self.cfn_service.delete_stack(stack_name)\n\n        logger.success(f\"IAM role deletion initiated for agent '{agent_name}'\")\n        return True, f\"IAM role deletion initiated for agent '{agent_name}'\"\n\n    except Exception as e:\n        error_msg = f\"Failed to delete IAM role: {str(e)}\"\n        logger.error(error_msg)\n        return False, error_msg\n</code></pre>"},{"location":"reference/agentcore_cli/services/iam/#agentcore_cli.services.iam.IAMService.get_role","title":"<code>get_role(role_name)</code>","text":"<p>Get details for a specific IAM role.</p> <p>Parameters:</p> Name Type Description Default <code>role_name</code> <code>str</code> <p>Name of the IAM role.</p> required <p>Returns:</p> Type Description <code>tuple[bool, IAMRoleConfig | None, str]</code> <p>Tuple of (success, role_config, message).</p> Source code in <code>agentcore_cli/services/iam.py</code> Python<pre><code>def get_role(self, role_name: str) -&gt; tuple[bool, IAMRoleConfig | None, str]:\n    \"\"\"Get details for a specific IAM role.\n\n    Args:\n        role_name: Name of the IAM role.\n\n    Returns:\n        Tuple of (success, role_config, message).\n    \"\"\"\n    try:\n        # Get role details\n        response = self.iam_client.get_role(RoleName=role_name)\n        role_data = response.get(\"Role\", {})\n\n        if not role_data:\n            return False, None, f\"Role '{role_name}' not found\"\n\n        # Create IAM role config\n        role_config = IAMRoleConfig(\n            name=role_name,\n            arn=str(role_data.get(\"Arn\", \"\")),\n            region=self.region,\n            path=str(role_data.get(\"Path\", \"/\")),\n            description=str(role_data.get(\"Description\", \"\")),\n            created_at=role_data.get(\"CreateDate\"),  # AWS API returns datetime objects directly\n            # Cast to datetime | None to satisfy type checker\n            updated_at=datetime.now() if role_data.get(\"LastModifiedDate\") else None,\n        )\n\n        return True, role_config, f\"Role '{role_name}' found\"\n\n    except self.iam_client.exceptions.NoSuchEntityException:\n        return False, None, f\"Role '{role_name}' not found\"\n    except Exception as e:\n        error_msg = f\"Failed to get IAM role: {str(e)}\"\n        logger.error(error_msg)\n        return False, None, error_msg\n</code></pre>"},{"location":"reference/agentcore_cli/services/iam/#agentcore_cli.services.iam.IAMService.get_role_policy","title":"<code>get_role_policy(role_name, policy_name)</code>","text":"<p>Get a specific policy attached to an IAM role.</p> <p>Parameters:</p> Name Type Description Default <code>role_name</code> <code>str</code> <p>Name of the IAM role.</p> required <code>policy_name</code> <code>str</code> <p>Name of the policy.</p> required <p>Returns:</p> Type Description <code>tuple[bool, dict[str, Any], str]</code> <p>Tuple of (success, policy_document, message).</p> Source code in <code>agentcore_cli/services/iam.py</code> Python<pre><code>def get_role_policy(self, role_name: str, policy_name: str) -&gt; tuple[bool, dict[str, Any], str]:\n    \"\"\"Get a specific policy attached to an IAM role.\n\n    Args:\n        role_name: Name of the IAM role.\n        policy_name: Name of the policy.\n\n    Returns:\n        Tuple of (success, policy_document, message).\n    \"\"\"\n    try:\n        # Get role policy\n        response = self.iam_client.get_role_policy(RoleName=role_name, PolicyName=policy_name)\n\n        # Convert policy document to dict if needed\n        raw_policy: Any = response.get(\"PolicyDocument\", {})\n\n        # Convert to dict[str, Any] using a deep copy approach\n        if isinstance(raw_policy, dict):\n            # Create a new dict with explicit string keys and Any values\n            result_dict: dict[str, Any] = {}\n            for key, value in raw_policy.items():\n                result_dict[str(key)] = value\n        else:\n            # Parse JSON string to dict\n            import json\n\n            result_dict = json.loads(raw_policy) if raw_policy else {}\n\n        return True, result_dict, f\"Policy '{policy_name}' retrieved\"\n\n    except self.iam_client.exceptions.NoSuchEntityException:\n        return False, {}, f\"Policy '{policy_name}' not found for role '{role_name}'\"\n    except Exception as e:\n        error_msg = f\"Failed to get role policy: {str(e)}\"\n        logger.error(error_msg)\n        return False, {}, error_msg\n</code></pre>"},{"location":"reference/agentcore_cli/services/iam/#agentcore_cli.services.iam.IAMService.list_agent_roles","title":"<code>list_agent_roles(prefix='agentcore')</code>","text":"<p>List all IAM roles for AgentCore agents.</p> <p>Parameters:</p> Name Type Description Default <code>prefix</code> <code>str</code> <p>Prefix for the IAM role name (default: agentcore).</p> <code>'agentcore'</code> <p>Returns:</p> Type Description <code>tuple[bool, list[dict[str, Any]], str]</code> <p>Tuple of (success, roles, message).</p> Source code in <code>agentcore_cli/services/iam.py</code> Python<pre><code>def list_agent_roles(self, prefix: str = \"agentcore\") -&gt; tuple[bool, list[dict[str, Any]], str]:\n    \"\"\"List all IAM roles for AgentCore agents.\n\n    Args:\n        prefix: Prefix for the IAM role name (default: agentcore).\n\n    Returns:\n        Tuple of (success, roles, message).\n    \"\"\"\n    try:\n        path_prefix = \"/service-role/\"\n        roles: list[dict[str, Any]] = []\n\n        # List roles with pagination\n        paginator = self.iam_client.get_paginator(\"list_roles\")\n        for page in paginator.paginate(PathPrefix=path_prefix):\n            for role in page.get(\"Roles\", []):\n                role_name = role.get(\"RoleName\", \"\")\n                if role_name.startswith(prefix):\n                    roles.append(dict(role))\n\n        return True, roles, f\"Found {len(roles)} agent roles\"\n\n    except Exception as e:\n        error_msg = f\"Failed to list agent roles: {str(e)}\"\n        logger.error(error_msg)\n        return False, [], error_msg\n</code></pre>"},{"location":"reference/agentcore_cli/static/","title":"agentcore_cli.static","text":""},{"location":"reference/agentcore_cli/static/#agentcore_cli.static","title":"<code>agentcore_cli.static</code>","text":""},{"location":"reference/agentcore_cli/static/banner/","title":"agentcore_cli.static.banner","text":""},{"location":"reference/agentcore_cli/static/banner/#agentcore_cli.static.banner","title":"<code>agentcore_cli.static.banner</code>","text":""},{"location":"reference/agentcore_cli/utils/","title":"agentcore_cli.utils","text":""},{"location":"reference/agentcore_cli/utils/#agentcore_cli.utils","title":"<code>agentcore_cli.utils</code>","text":"<p>Utility modules for AgentCore CLI.</p>"},{"location":"reference/agentcore_cli/utils/aws_utils/","title":"agentcore_cli.utils.aws_utils","text":""},{"location":"reference/agentcore_cli/utils/aws_utils/#agentcore_cli.utils.aws_utils","title":"<code>agentcore_cli.utils.aws_utils</code>","text":"<p>AWS utility functions for AgentCore CLI.</p>"},{"location":"reference/agentcore_cli/utils/aws_utils/#agentcore_cli.utils.aws_utils.authenticate_with_ecr","title":"<code>authenticate_with_ecr(region=None)</code>","text":"<p>Get ECR authentication command for Docker login.</p> <p>Parameters:</p> Name Type Description Default <code>region</code> <code>str | None</code> <p>Optional region name. If not provided, uses the default region.</p> <code>None</code> <p>Returns:</p> Type Description <code>tuple[bool, str]</code> <p>Tuple[bool, str]: A tuple containing success status and either the auth command               or an error message.</p> Source code in <code>agentcore_cli/utils/aws_utils.py</code> Python<pre><code>def authenticate_with_ecr(region: str | None = None) -&gt; tuple[bool, str]:\n    \"\"\"Get ECR authentication command for Docker login.\n\n    Args:\n        region: Optional region name. If not provided, uses the default region.\n\n    Returns:\n        Tuple[bool, str]: A tuple containing success status and either the auth command\n                          or an error message.\n    \"\"\"\n    try:\n        if not region:\n            region = get_aws_region()\n\n        account_id = get_aws_account_id()\n        if not account_id:\n            return False, \"Failed to get AWS account ID\"\n\n        auth_cmd = f\"aws ecr get-login-password --region {region} | docker login --username AWS --password-stdin {account_id}.dkr.ecr.{region}.amazonaws.com\"\n        return True, auth_cmd\n    except Exception as e:\n        return False, f\"Error creating ECR auth command: {str(e)}\"\n</code></pre>"},{"location":"reference/agentcore_cli/utils/aws_utils/#agentcore_cli.utils.aws_utils.get_aws_account_id","title":"<code>get_aws_account_id()</code>","text":"<p>Get the AWS account ID for the current credentials.</p> <p>Returns:</p> Type Description <code>str | None</code> <p>Optional[str]: The AWS account ID or None if credentials are invalid.</p> Source code in <code>agentcore_cli/utils/aws_utils.py</code> Python<pre><code>def get_aws_account_id() -&gt; str | None:\n    \"\"\"Get the AWS account ID for the current credentials.\n\n    Returns:\n        Optional[str]: The AWS account ID or None if credentials are invalid.\n    \"\"\"\n    try:\n        sts_client = boto3.client(\"sts\")\n        return sts_client.get_caller_identity()[\"Account\"]\n    except Exception:\n        return None\n</code></pre>"},{"location":"reference/agentcore_cli/utils/aws_utils/#agentcore_cli.utils.aws_utils.get_aws_region","title":"<code>get_aws_region()</code>","text":"<p>Get the configured AWS region from the current session.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The current AWS region name.</p> Source code in <code>agentcore_cli/utils/aws_utils.py</code> Python<pre><code>def get_aws_region() -&gt; str:\n    \"\"\"Get the configured AWS region from the current session.\n\n    Returns:\n        str: The current AWS region name.\n    \"\"\"\n    return boto3.session.Session().region_name\n</code></pre>"},{"location":"reference/agentcore_cli/utils/aws_utils/#agentcore_cli.utils.aws_utils.get_aws_session","title":"<code>get_aws_session(region=None, profile=None)</code>","text":"<p>Get a boto3 session with optional region configuration.</p> <p>Parameters:</p> Name Type Description Default <code>region</code> <code>str | None</code> <p>Optional AWS region name. If not provided, uses the default region.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Session</code> <code>Session</code> <p>A boto3 session object.</p> Source code in <code>agentcore_cli/utils/aws_utils.py</code> Python<pre><code>def get_aws_session(region: str | None = None, profile: str | None = None) -&gt; Session:\n    \"\"\"Get a boto3 session with optional region configuration.\n\n    Args:\n        region: Optional AWS region name. If not provided, uses the default region.\n\n    Returns:\n        Session: A boto3 session object.\n    \"\"\"\n    return boto3.Session(region_name=region, profile_name=profile)\n</code></pre>"},{"location":"reference/agentcore_cli/utils/aws_utils/#agentcore_cli.utils.aws_utils.get_ecr_repository_uri","title":"<code>get_ecr_repository_uri(repo_name, region=None)</code>","text":"<p>Get the URI for an ECR repository.</p> <p>Parameters:</p> Name Type Description Default <code>repo_name</code> <code>str</code> <p>The name of the ECR repository.</p> required <code>region</code> <code>str | None</code> <p>Optional region name. If not provided, uses the default region.</p> <code>None</code> <p>Returns:</p> Type Description <code>str | None</code> <p>Optional[str]: The repository URI or None if repository does not exist.</p> Source code in <code>agentcore_cli/utils/aws_utils.py</code> Python<pre><code>def get_ecr_repository_uri(repo_name: str, region: str | None = None) -&gt; str | None:\n    \"\"\"Get the URI for an ECR repository.\n\n    Args:\n        repo_name: The name of the ECR repository.\n        region: Optional region name. If not provided, uses the default region.\n\n    Returns:\n        Optional[str]: The repository URI or None if repository does not exist.\n    \"\"\"\n    try:\n        ecr_client = boto3.client(\"ecr\", region_name=region)\n        response = ecr_client.describe_repositories(repositoryNames=[repo_name])\n        repositories = response.get(\"repositories\", [])\n        if repositories:\n            return repositories[0].get(\"repositoryUri\")\n        return None\n    except Exception:\n        return None\n</code></pre>"},{"location":"reference/agentcore_cli/utils/aws_utils/#agentcore_cli.utils.aws_utils.validate_aws_credentials","title":"<code>validate_aws_credentials()</code>","text":"<p>Check if AWS credentials are configured.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if valid credentials are found, False otherwise.</p> Source code in <code>agentcore_cli/utils/aws_utils.py</code> Python<pre><code>def validate_aws_credentials() -&gt; bool:\n    \"\"\"Check if AWS credentials are configured.\n\n    Returns:\n        bool: True if valid credentials are found, False otherwise.\n    \"\"\"\n    try:\n        session = boto3.Session()\n        identity = session.client(\"sts\").get_caller_identity()\n        return \"Account\" in identity\n    except Exception:\n        return False\n</code></pre>"},{"location":"reference/agentcore_cli/utils/cfn_utils/","title":"agentcore_cli.utils.cfn_utils","text":""},{"location":"reference/agentcore_cli/utils/cfn_utils/#agentcore_cli.utils.cfn_utils","title":"<code>agentcore_cli.utils.cfn_utils</code>","text":""},{"location":"reference/agentcore_cli/utils/cfn_utils/#agentcore_cli.utils.cfn_utils.CFNService","title":"<code>CFNService</code>","text":"<p>CloudFormation service with robust stack management and polling capabilities.</p> Source code in <code>agentcore_cli/utils/cfn_utils.py</code> Python<pre><code>class CFNService:\n    \"\"\"CloudFormation service with robust stack management and polling capabilities.\"\"\"\n\n    # CloudFormation stack states\n    CREATE_IN_PROGRESS = \"CREATE_IN_PROGRESS\"\n    CREATE_COMPLETE = \"CREATE_COMPLETE\"\n    CREATE_FAILED = \"CREATE_FAILED\"\n    UPDATE_IN_PROGRESS = \"UPDATE_IN_PROGRESS\"\n    UPDATE_COMPLETE = \"UPDATE_COMPLETE\"\n    UPDATE_FAILED = \"UPDATE_FAILED\"\n    DELETE_IN_PROGRESS = \"DELETE_IN_PROGRESS\"\n    DELETE_COMPLETE = \"DELETE_COMPLETE\"\n    DELETE_FAILED = \"DELETE_FAILED\"\n    ROLLBACK_IN_PROGRESS = \"ROLLBACK_IN_PROGRESS\"\n    ROLLBACK_COMPLETE = \"ROLLBACK_COMPLETE\"\n    ROLLBACK_FAILED = \"ROLLBACK_FAILED\"\n\n    # Success states\n    SUCCESS_STATES = {CREATE_COMPLETE, UPDATE_COMPLETE, DELETE_COMPLETE}\n\n    # Failure states\n    FAILURE_STATES = {CREATE_FAILED, UPDATE_FAILED, DELETE_FAILED, ROLLBACK_FAILED}\n\n    # In-progress states\n    IN_PROGRESS_STATES = {CREATE_IN_PROGRESS, UPDATE_IN_PROGRESS, DELETE_IN_PROGRESS, ROLLBACK_IN_PROGRESS}\n\n    def __init__(self, region: str):\n        self.session = Session(region_name=region)\n        self.cfn_client: Any = self.session.client(\"cloudformation\")\n\n    def _stack_exists(self, stack_name: str) -&gt; bool:\n        \"\"\"Check if a CloudFormation stack exists.\"\"\"\n        try:\n            self.cfn_client.describe_stacks(StackName=stack_name)\n            return True\n        except Exception:\n            logger.info(f\"Stack {stack_name} does not exist, creating it...\")\n            return False\n\n    def wait_for_stack_completion(\n        self, stack_name: str, timeout_minutes: int = 30, poll_interval: int = 10\n    ) -&gt; tuple[bool, str, str]:\n        \"\"\"Wait for CloudFormation stack operation to complete.\n\n        Args:\n            stack_name: Name of the CloudFormation stack\n            timeout_minutes: Maximum time to wait in minutes (default: 30)\n            poll_interval: Polling interval in seconds (default: 10)\n\n        Returns:\n            Tuple of (success, final_status, reason)\n        \"\"\"\n        start_time = datetime.now()\n        timeout = timedelta(minutes=timeout_minutes)\n\n        logger.info(f\"Waiting for stack '{stack_name}' to complete (timeout: {timeout_minutes}m)...\")\n\n        while datetime.now() - start_time &lt; timeout:\n            try:\n                status = self.get_stack_status(stack_name)\n                logger.debug(f\"Stack '{stack_name}' status: {status}\")\n\n                # Check for completion states\n                if status in self.SUCCESS_STATES:\n                    logger.success(f\"Stack '{stack_name}' completed successfully with status: {status}\")\n                    return True, status, \"Stack operation completed successfully\"\n\n                # Check for failure states\n                if status in self.FAILURE_STATES:\n                    # Get more detailed error information\n                    reason = self._get_stack_failure_reason(stack_name)\n                    logger.error(f\"Stack '{stack_name}' failed with status: {status}. Reason: {reason}\")\n                    return False, status, reason\n\n                # Still in progress - continue waiting\n                if status in self.IN_PROGRESS_STATES:\n                    elapsed = datetime.now() - start_time\n                    elapsed_str = f\"{int(elapsed.total_seconds())}s\"\n                    logger.info(\n                        f\"Stack '{stack_name}' still {status.lower().replace('_', ' ')} ({elapsed_str} elapsed)...\"\n                    )\n                    time.sleep(poll_interval)\n                    continue\n\n                # Unexpected status\n                logger.warning(f\"Stack '{stack_name}' has unexpected status: {status}\")\n                time.sleep(poll_interval)\n\n            except Exception as e:\n                if \"does not exist\" in str(e):\n                    # Stack was deleted\n                    return True, self.DELETE_COMPLETE, \"Stack was deleted\"\n\n                logger.error(f\"Error checking stack status: {str(e)}\")\n                time.sleep(poll_interval)\n\n        # Timeout reached\n        try:\n            final_status = self.get_stack_status(stack_name)\n        except Exception:\n            final_status = \"UNKNOWN\"\n\n        timeout_msg = f\"Timeout after {timeout_minutes} minutes waiting for stack completion\"\n        logger.error(f\"Stack '{stack_name}' operation timed out. Final status: {final_status}\")\n        return False, final_status, timeout_msg\n\n    def _get_stack_failure_reason(self, stack_name: str) -&gt; str:\n        \"\"\"Get detailed failure reason for a failed stack.\"\"\"\n        try:\n            # Get stack events to find the failure reason\n            response = self.cfn_client.describe_stack_events(StackName=stack_name)\n            events = response.get(\"StackEvents\", [])\n\n            # Look for failure events\n            for event in events:\n                status = event.get(\"ResourceStatus\", \"\")\n                if \"FAILED\" in status:\n                    reason = event.get(\"ResourceStatusReason\", \"Unknown failure\")\n                    resource_type = event.get(\"ResourceType\", \"Unknown\")\n                    logical_id = event.get(\"LogicalResourceId\", \"Unknown\")\n                    return f\"{resource_type} '{logical_id}': {reason}\"\n\n            return \"Unknown failure reason\"\n\n        except Exception as e:\n            return f\"Could not retrieve failure reason: {str(e)}\"\n\n    def create_update_stack(\n        self,\n        stack_name: str,\n        template_body: str,\n        parameters: Sequence[ParameterTypeDef],\n        wait_for_completion: bool = True,\n        timeout_minutes: int = 30,\n    ) -&gt; tuple[bool, str]:\n        \"\"\"Create or update a CloudFormation stack with optional completion waiting.\n\n        Args:\n            stack_name: Name of the CloudFormation stack\n            template_body: CloudFormation template content\n            parameters: Stack parameters\n            wait_for_completion: Whether to wait for operation completion (default: True)\n            timeout_minutes: Timeout for waiting (default: 30)\n\n        Returns:\n            Tuple of (success, message)\n        \"\"\"\n        operation_type = \"update\" if self._stack_exists(stack_name) else \"create\"\n\n        try:\n            if operation_type == \"update\":\n                logger.info(f\"Updating stack {stack_name}\")\n                try:\n                    self.cfn_client.update_stack(\n                        StackName=stack_name,\n                        TemplateBody=template_body,\n                        Parameters=parameters,\n                        Capabilities=[\"CAPABILITY_NAMED_IAM\"],\n                    )\n                except botocore.exceptions.ClientError as e:\n                    if \"No updates are to be performed\" in str(e):\n                        logger.info(f\"No updates needed for stack {stack_name}\")\n                        return True, \"No updates needed\"\n                    else:\n                        logger.error(f\"Failed to update stack {stack_name}: {e}\")\n                        return False, f\"Update failed: {str(e)}\"\n            else:\n                logger.info(f\"Creating stack {stack_name}\")\n                self.cfn_client.create_stack(\n                    StackName=stack_name,\n                    TemplateBody=template_body,\n                    Parameters=parameters,\n                    Capabilities=[\"CAPABILITY_NAMED_IAM\"],\n                )\n\n            # Wait for completion if requested\n            if wait_for_completion:\n                success, status, reason = self.wait_for_stack_completion(stack_name, timeout_minutes)\n                if success:\n                    return True, f\"Stack {operation_type} completed successfully\"\n                else:\n                    return False, f\"Stack {operation_type} failed: {reason}\"\n            else:\n                return True, f\"Stack {operation_type} initiated\"\n\n        except Exception as e:\n            error_msg = f\"Failed to {operation_type} stack {stack_name}: {str(e)}\"\n            logger.error(error_msg)\n            return False, error_msg\n\n    def delete_stack(\n        self, stack_name: str, wait_for_completion: bool = True, timeout_minutes: int = 20\n    ) -&gt; tuple[bool, str]:\n        \"\"\"Delete a CloudFormation stack with optional completion waiting.\n\n        Args:\n            stack_name: Name of the CloudFormation stack\n            wait_for_completion: Whether to wait for deletion completion (default: True)\n            timeout_minutes: Timeout for waiting (default: 20)\n\n        Returns:\n            Tuple of (success, message)\n        \"\"\"\n        try:\n            logger.info(f\"Deleting stack {stack_name}\")\n            self.cfn_client.delete_stack(StackName=stack_name)\n\n            if wait_for_completion:\n                success, status, reason = self.wait_for_stack_completion(stack_name, timeout_minutes)\n                if success:\n                    return True, f\"Stack deletion completed successfully\"\n                else:\n                    return False, f\"Stack deletion failed: {reason}\"\n            else:\n                return True, f\"Stack deletion initiated\"\n\n        except Exception as e:\n            error_msg = f\"Failed to delete stack {stack_name}: {str(e)}\"\n            logger.error(error_msg)\n            return False, error_msg\n\n    def get_stack_status(self, stack_name: str) -&gt; str:\n        \"\"\"Get the current status of a CloudFormation stack.\"\"\"\n        response = self.cfn_client.describe_stacks(StackName=stack_name)\n        return str(response[\"Stacks\"][0][\"StackStatus\"])\n\n    def get_stack_outputs(self, stack_name: str) -&gt; list[dict]:\n        \"\"\"Get the outputs of a CloudFormation stack.\n\n        Args:\n            stack_name: Name of the CloudFormation stack\n\n        Returns:\n            List of stack outputs\n\n        Raises:\n            Exception: If stack is not in a completed state\n        \"\"\"\n        try:\n            status = self.get_stack_status(stack_name)\n            if status not in self.SUCCESS_STATES:\n                raise Exception(f\"Cannot get outputs for stack in status: {status}\")\n\n            response = self.cfn_client.describe_stacks(StackName=stack_name)\n            outputs = response[\"Stacks\"][0].get(\"Outputs\", [])\n            return list(outputs) if outputs else []\n\n        except Exception as e:\n            logger.error(f\"Failed to get stack outputs for {stack_name}: {str(e)}\")\n            raise\n\n    def stack_exists_and_complete(self, stack_name: str) -&gt; bool:\n        \"\"\"Check if stack exists and is in a completed/stable state.\"\"\"\n        try:\n            status = self.get_stack_status(stack_name)\n            return status in self.SUCCESS_STATES\n        except Exception:\n            return False\n</code></pre>"},{"location":"reference/agentcore_cli/utils/cfn_utils/#agentcore_cli.utils.cfn_utils.CFNService.create_update_stack","title":"<code>create_update_stack(stack_name, template_body, parameters, wait_for_completion=True, timeout_minutes=30)</code>","text":"<p>Create or update a CloudFormation stack with optional completion waiting.</p> <p>Parameters:</p> Name Type Description Default <code>stack_name</code> <code>str</code> <p>Name of the CloudFormation stack</p> required <code>template_body</code> <code>str</code> <p>CloudFormation template content</p> required <code>parameters</code> <code>Sequence[ParameterTypeDef]</code> <p>Stack parameters</p> required <code>wait_for_completion</code> <code>bool</code> <p>Whether to wait for operation completion (default: True)</p> <code>True</code> <code>timeout_minutes</code> <code>int</code> <p>Timeout for waiting (default: 30)</p> <code>30</code> <p>Returns:</p> Type Description <code>tuple[bool, str]</code> <p>Tuple of (success, message)</p> Source code in <code>agentcore_cli/utils/cfn_utils.py</code> Python<pre><code>def create_update_stack(\n    self,\n    stack_name: str,\n    template_body: str,\n    parameters: Sequence[ParameterTypeDef],\n    wait_for_completion: bool = True,\n    timeout_minutes: int = 30,\n) -&gt; tuple[bool, str]:\n    \"\"\"Create or update a CloudFormation stack with optional completion waiting.\n\n    Args:\n        stack_name: Name of the CloudFormation stack\n        template_body: CloudFormation template content\n        parameters: Stack parameters\n        wait_for_completion: Whether to wait for operation completion (default: True)\n        timeout_minutes: Timeout for waiting (default: 30)\n\n    Returns:\n        Tuple of (success, message)\n    \"\"\"\n    operation_type = \"update\" if self._stack_exists(stack_name) else \"create\"\n\n    try:\n        if operation_type == \"update\":\n            logger.info(f\"Updating stack {stack_name}\")\n            try:\n                self.cfn_client.update_stack(\n                    StackName=stack_name,\n                    TemplateBody=template_body,\n                    Parameters=parameters,\n                    Capabilities=[\"CAPABILITY_NAMED_IAM\"],\n                )\n            except botocore.exceptions.ClientError as e:\n                if \"No updates are to be performed\" in str(e):\n                    logger.info(f\"No updates needed for stack {stack_name}\")\n                    return True, \"No updates needed\"\n                else:\n                    logger.error(f\"Failed to update stack {stack_name}: {e}\")\n                    return False, f\"Update failed: {str(e)}\"\n        else:\n            logger.info(f\"Creating stack {stack_name}\")\n            self.cfn_client.create_stack(\n                StackName=stack_name,\n                TemplateBody=template_body,\n                Parameters=parameters,\n                Capabilities=[\"CAPABILITY_NAMED_IAM\"],\n            )\n\n        # Wait for completion if requested\n        if wait_for_completion:\n            success, status, reason = self.wait_for_stack_completion(stack_name, timeout_minutes)\n            if success:\n                return True, f\"Stack {operation_type} completed successfully\"\n            else:\n                return False, f\"Stack {operation_type} failed: {reason}\"\n        else:\n            return True, f\"Stack {operation_type} initiated\"\n\n    except Exception as e:\n        error_msg = f\"Failed to {operation_type} stack {stack_name}: {str(e)}\"\n        logger.error(error_msg)\n        return False, error_msg\n</code></pre>"},{"location":"reference/agentcore_cli/utils/cfn_utils/#agentcore_cli.utils.cfn_utils.CFNService.delete_stack","title":"<code>delete_stack(stack_name, wait_for_completion=True, timeout_minutes=20)</code>","text":"<p>Delete a CloudFormation stack with optional completion waiting.</p> <p>Parameters:</p> Name Type Description Default <code>stack_name</code> <code>str</code> <p>Name of the CloudFormation stack</p> required <code>wait_for_completion</code> <code>bool</code> <p>Whether to wait for deletion completion (default: True)</p> <code>True</code> <code>timeout_minutes</code> <code>int</code> <p>Timeout for waiting (default: 20)</p> <code>20</code> <p>Returns:</p> Type Description <code>tuple[bool, str]</code> <p>Tuple of (success, message)</p> Source code in <code>agentcore_cli/utils/cfn_utils.py</code> Python<pre><code>def delete_stack(\n    self, stack_name: str, wait_for_completion: bool = True, timeout_minutes: int = 20\n) -&gt; tuple[bool, str]:\n    \"\"\"Delete a CloudFormation stack with optional completion waiting.\n\n    Args:\n        stack_name: Name of the CloudFormation stack\n        wait_for_completion: Whether to wait for deletion completion (default: True)\n        timeout_minutes: Timeout for waiting (default: 20)\n\n    Returns:\n        Tuple of (success, message)\n    \"\"\"\n    try:\n        logger.info(f\"Deleting stack {stack_name}\")\n        self.cfn_client.delete_stack(StackName=stack_name)\n\n        if wait_for_completion:\n            success, status, reason = self.wait_for_stack_completion(stack_name, timeout_minutes)\n            if success:\n                return True, f\"Stack deletion completed successfully\"\n            else:\n                return False, f\"Stack deletion failed: {reason}\"\n        else:\n            return True, f\"Stack deletion initiated\"\n\n    except Exception as e:\n        error_msg = f\"Failed to delete stack {stack_name}: {str(e)}\"\n        logger.error(error_msg)\n        return False, error_msg\n</code></pre>"},{"location":"reference/agentcore_cli/utils/cfn_utils/#agentcore_cli.utils.cfn_utils.CFNService.get_stack_outputs","title":"<code>get_stack_outputs(stack_name)</code>","text":"<p>Get the outputs of a CloudFormation stack.</p> <p>Parameters:</p> Name Type Description Default <code>stack_name</code> <code>str</code> <p>Name of the CloudFormation stack</p> required <p>Returns:</p> Type Description <code>list[dict]</code> <p>List of stack outputs</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If stack is not in a completed state</p> Source code in <code>agentcore_cli/utils/cfn_utils.py</code> Python<pre><code>def get_stack_outputs(self, stack_name: str) -&gt; list[dict]:\n    \"\"\"Get the outputs of a CloudFormation stack.\n\n    Args:\n        stack_name: Name of the CloudFormation stack\n\n    Returns:\n        List of stack outputs\n\n    Raises:\n        Exception: If stack is not in a completed state\n    \"\"\"\n    try:\n        status = self.get_stack_status(stack_name)\n        if status not in self.SUCCESS_STATES:\n            raise Exception(f\"Cannot get outputs for stack in status: {status}\")\n\n        response = self.cfn_client.describe_stacks(StackName=stack_name)\n        outputs = response[\"Stacks\"][0].get(\"Outputs\", [])\n        return list(outputs) if outputs else []\n\n    except Exception as e:\n        logger.error(f\"Failed to get stack outputs for {stack_name}: {str(e)}\")\n        raise\n</code></pre>"},{"location":"reference/agentcore_cli/utils/cfn_utils/#agentcore_cli.utils.cfn_utils.CFNService.get_stack_status","title":"<code>get_stack_status(stack_name)</code>","text":"<p>Get the current status of a CloudFormation stack.</p> Source code in <code>agentcore_cli/utils/cfn_utils.py</code> Python<pre><code>def get_stack_status(self, stack_name: str) -&gt; str:\n    \"\"\"Get the current status of a CloudFormation stack.\"\"\"\n    response = self.cfn_client.describe_stacks(StackName=stack_name)\n    return str(response[\"Stacks\"][0][\"StackStatus\"])\n</code></pre>"},{"location":"reference/agentcore_cli/utils/cfn_utils/#agentcore_cli.utils.cfn_utils.CFNService.stack_exists_and_complete","title":"<code>stack_exists_and_complete(stack_name)</code>","text":"<p>Check if stack exists and is in a completed/stable state.</p> Source code in <code>agentcore_cli/utils/cfn_utils.py</code> Python<pre><code>def stack_exists_and_complete(self, stack_name: str) -&gt; bool:\n    \"\"\"Check if stack exists and is in a completed/stable state.\"\"\"\n    try:\n        status = self.get_stack_status(stack_name)\n        return status in self.SUCCESS_STATES\n    except Exception:\n        return False\n</code></pre>"},{"location":"reference/agentcore_cli/utils/cfn_utils/#agentcore_cli.utils.cfn_utils.CFNService.wait_for_stack_completion","title":"<code>wait_for_stack_completion(stack_name, timeout_minutes=30, poll_interval=10)</code>","text":"<p>Wait for CloudFormation stack operation to complete.</p> <p>Parameters:</p> Name Type Description Default <code>stack_name</code> <code>str</code> <p>Name of the CloudFormation stack</p> required <code>timeout_minutes</code> <code>int</code> <p>Maximum time to wait in minutes (default: 30)</p> <code>30</code> <code>poll_interval</code> <code>int</code> <p>Polling interval in seconds (default: 10)</p> <code>10</code> <p>Returns:</p> Type Description <code>tuple[bool, str, str]</code> <p>Tuple of (success, final_status, reason)</p> Source code in <code>agentcore_cli/utils/cfn_utils.py</code> Python<pre><code>def wait_for_stack_completion(\n    self, stack_name: str, timeout_minutes: int = 30, poll_interval: int = 10\n) -&gt; tuple[bool, str, str]:\n    \"\"\"Wait for CloudFormation stack operation to complete.\n\n    Args:\n        stack_name: Name of the CloudFormation stack\n        timeout_minutes: Maximum time to wait in minutes (default: 30)\n        poll_interval: Polling interval in seconds (default: 10)\n\n    Returns:\n        Tuple of (success, final_status, reason)\n    \"\"\"\n    start_time = datetime.now()\n    timeout = timedelta(minutes=timeout_minutes)\n\n    logger.info(f\"Waiting for stack '{stack_name}' to complete (timeout: {timeout_minutes}m)...\")\n\n    while datetime.now() - start_time &lt; timeout:\n        try:\n            status = self.get_stack_status(stack_name)\n            logger.debug(f\"Stack '{stack_name}' status: {status}\")\n\n            # Check for completion states\n            if status in self.SUCCESS_STATES:\n                logger.success(f\"Stack '{stack_name}' completed successfully with status: {status}\")\n                return True, status, \"Stack operation completed successfully\"\n\n            # Check for failure states\n            if status in self.FAILURE_STATES:\n                # Get more detailed error information\n                reason = self._get_stack_failure_reason(stack_name)\n                logger.error(f\"Stack '{stack_name}' failed with status: {status}. Reason: {reason}\")\n                return False, status, reason\n\n            # Still in progress - continue waiting\n            if status in self.IN_PROGRESS_STATES:\n                elapsed = datetime.now() - start_time\n                elapsed_str = f\"{int(elapsed.total_seconds())}s\"\n                logger.info(\n                    f\"Stack '{stack_name}' still {status.lower().replace('_', ' ')} ({elapsed_str} elapsed)...\"\n                )\n                time.sleep(poll_interval)\n                continue\n\n            # Unexpected status\n            logger.warning(f\"Stack '{stack_name}' has unexpected status: {status}\")\n            time.sleep(poll_interval)\n\n        except Exception as e:\n            if \"does not exist\" in str(e):\n                # Stack was deleted\n                return True, self.DELETE_COMPLETE, \"Stack was deleted\"\n\n            logger.error(f\"Error checking stack status: {str(e)}\")\n            time.sleep(poll_interval)\n\n    # Timeout reached\n    try:\n        final_status = self.get_stack_status(stack_name)\n    except Exception:\n        final_status = \"UNKNOWN\"\n\n    timeout_msg = f\"Timeout after {timeout_minutes} minutes waiting for stack completion\"\n    logger.error(f\"Stack '{stack_name}' operation timed out. Final status: {final_status}\")\n    return False, final_status, timeout_msg\n</code></pre>"},{"location":"reference/agentcore_cli/utils/command_executor/","title":"agentcore_cli.utils.command_executor","text":""},{"location":"reference/agentcore_cli/utils/command_executor/#agentcore_cli.utils.command_executor","title":"<code>agentcore_cli.utils.command_executor</code>","text":"<p>Command execution utilities with security validation for AgentCore CLI.</p> <p>This module provides a centralized utility for executing shell commands with security validation. It ensures that all subprocess calls consistently capture stdout and stderr while maintaining proper error handling and security validation for AgentCore CLI use cases.</p> <p>The module is designed to be used as a utility for other modules in the AgentCore CLI.</p>"},{"location":"reference/agentcore_cli/utils/command_executor/#agentcore_cli.utils.command_executor.execute_command","title":"<code>execute_command(cmd, check=False, text=True, log_cmd=True, log_output=True)</code>","text":"<p>Execute a shell command and capture all output with security validation.</p> <p>This is a centralized utility to ensure all subprocess calls consistently capture stdout and stderr while maintaining proper error handling and security validation for AgentCore CLI use cases.</p> <p>Parameters:</p> Name Type Description Default <code>cmd</code> <code>Union[list[str], str]</code> <p>Command to execute, either as list of arguments or shell string</p> required <code>check</code> <code>bool</code> <p>Whether to raise an exception if command fails</p> <code>False</code> <code>text</code> <code>bool</code> <p>Whether to decode output as text (vs bytes)</p> <code>True</code> <code>log_cmd</code> <code>bool</code> <p>Whether to log the command being executed</p> <code>True</code> <code>log_output</code> <code>bool</code> <p>Whether to log command output</p> <code>True</code> <p>Returns:</p> Type Description <code>tuple[int, str, str]</code> <p>Tuple[int, str, str]: (return_code, stdout, stderr)</p> Source code in <code>agentcore_cli/utils/command_executor.py</code> Python<pre><code>def execute_command(\n    cmd: Union[list[str], str], check: bool = False, text: bool = True, log_cmd: bool = True, log_output: bool = True\n) -&gt; tuple[int, str, str]:\n    \"\"\"Execute a shell command and capture all output with security validation.\n\n    This is a centralized utility to ensure all subprocess calls consistently capture\n    stdout and stderr while maintaining proper error handling and security validation\n    for AgentCore CLI use cases.\n\n    Args:\n        cmd: Command to execute, either as list of arguments or shell string\n        check: Whether to raise an exception if command fails\n        text: Whether to decode output as text (vs bytes)\n        log_cmd: Whether to log the command being executed\n        log_output: Whether to log command output\n\n    Returns:\n        Tuple[int, str, str]: (return_code, stdout, stderr)\n    \"\"\"\n    if log_cmd:\n        if isinstance(cmd, list):\n            logger.info(f\"Executing: {' '.join(cmd)}\")\n        else:\n            logger.info(f\"Executing: {cmd}\")\n\n    # Validate command for security\n    is_valid, error_msg = _validate_command_security(cmd)\n    if not is_valid:\n        logger.warning(f\"Command rejected by security validation: {error_msg}\")\n        return -1, \"\", f\"Command rejected: {error_msg}\"\n\n    try:\n        # Handle shell commands with pipes for AWS ECR authentication\n        if isinstance(cmd, str) and \"|\" in cmd and \"aws ecr get-login-password\" in cmd:\n            # Special case for ECR authentication command - requires shell=True for pipe\n            # nosemgrep: subprocess-shell-true\n            result = subprocess.run(cmd, shell=True, check=check, text=text, capture_output=True)  # nosec: B602 inputs are validated\n        else:\n            # Standard execution without shell for security\n            result = subprocess.run(cmd, shell=False, check=check, text=text, capture_output=True)  # nosec: B603 inputs are validated\n\n        if log_output:\n            if result.returncode == 0:\n                if result.stdout and result.stdout.strip():\n                    logger.debug(f\"Command output: {result.stdout.strip()}\")\n            else:\n                if result.stderr and result.stderr.strip():\n                    logger.error(f\"Command error: {result.stderr.strip()}\")\n\n        return result.returncode, result.stdout, result.stderr\n    except subprocess.CalledProcessError as e:\n        logger.error(f\"Command failed with exit code {e.returncode}: {e.stderr}\")\n        return e.returncode, e.stdout or \"\", e.stderr or \"\"\n    except Exception as e:\n        logger.error(f\"Error executing command: {str(e)}\")\n        return -1, \"\", str(e)\n</code></pre>"},{"location":"reference/agentcore_cli/utils/observability/","title":"agentcore_cli.utils.observability","text":""},{"location":"reference/agentcore_cli/utils/observability/#agentcore_cli.utils.observability","title":"<code>agentcore_cli.utils.observability</code>","text":"<p>Observability utilities for AgentCore Platform CLI.</p> <p>This module provides utilities for setting up and managing AWS observability features including CloudWatch Transaction Search for cost-effective tracing.</p>"},{"location":"reference/agentcore_cli/utils/observability/#agentcore_cli.utils.observability.TransactionSearchManager","title":"<code>TransactionSearchManager</code>","text":"<p>Manages AWS CloudWatch Transaction Search configuration.</p> Source code in <code>agentcore_cli/utils/observability.py</code> Python<pre><code>class TransactionSearchManager:\n    \"\"\"Manages AWS CloudWatch Transaction Search configuration.\"\"\"\n\n    def __init__(self, region: str):\n        \"\"\"Initialize the Transaction Search manager.\n\n        Args:\n            region: AWS region to operate in\n        \"\"\"\n        self.region = region\n\n        # Validate AWS credentials first\n        if not validate_aws_credentials():\n            raise ValueError(\"AWS credentials not configured\")\n\n        # Validate region format\n        is_valid, error_msg = validate_region(region)\n        if not is_valid:\n            raise ValueError(f\"Invalid region: {error_msg}\")\n\n        # Create AWS clients using the session utility\n        session = get_aws_session(region=region)\n        self.xray_client = session.client(\"xray\")\n        self.logs_client = session.client(\"logs\")\n        self.account_id = get_aws_account_id()\n\n    def is_transaction_search_enabled(self) -&gt; tuple[bool, str | None]:\n        \"\"\"Check if Transaction Search is enabled.\n\n        Returns:\n            Tuple of (is_enabled, status_message)\n        \"\"\"\n        try:\n            response = self.xray_client.get_trace_segment_destination()\n            destination = response.get(\"Destination\")\n            status = response.get(\"Status\")\n\n            if destination == \"CloudWatchLogs\" and status == \"ACTIVE\":\n                return True, \"Transaction Search is enabled and active\"\n            else:\n                return False, f\"Transaction Search status: destination={destination}, status={status}\"\n\n        except ClientError as e:\n            error_code = e.response.get(\"Error\", {}).get(\"Code\", \"Unknown\")\n            if error_code == \"ResourceNotFoundException\":\n                return False, \"Transaction Search not configured\"\n            else:\n                return False, f\"Error checking Transaction Search: {e}\"\n\n    def create_resource_policy(self) -&gt; bool:\n        \"\"\"Create the resource policy for X-Ray to send traces to CloudWatch Logs.\n\n        Returns:\n            True if policy was created successfully, False otherwise\n        \"\"\"\n        try:\n            policy_document = {\n                \"Version\": \"2012-10-17\",\n                \"Statement\": [\n                    {\n                        \"Sid\": \"TransactionSearchXRayAccess\",\n                        \"Effect\": \"Allow\",\n                        \"Principal\": {\"Service\": \"xray.amazonaws.com\"},\n                        \"Action\": \"logs:PutLogEvents\",\n                        \"Resource\": [\n                            f\"arn:aws:logs:{self.region}:{self.account_id}:log-group:aws/spans:*\",\n                            f\"arn:aws:logs:{self.region}:{self.account_id}:log-group:/aws/application-signals/data:*\",\n                        ],\n                        \"Condition\": {\n                            \"ArnLike\": {\"aws:SourceArn\": f\"arn:aws:logs:{self.region}:{self.account_id}:*\"},\n                            \"StringEquals\": {\"aws:SourceAccount\": self.account_id},\n                        },\n                    }\n                ],\n            }\n\n            self.logs_client.put_resource_policy(\n                policyName=\"AgentCoreTransactionSearchPolicy\", policyDocument=json.dumps(policy_document)\n            )\n\n            return True\n\n        except ClientError as e:\n            click.echo(f\"   \u274c Failed to create resource policy: {e}\")\n            return False\n\n    def configure_trace_destination(self) -&gt; bool:\n        \"\"\"Configure X-Ray to send traces to CloudWatch Logs.\n\n        Returns:\n            True if destination was configured successfully, False otherwise\n        \"\"\"\n        try:\n            self.xray_client.update_trace_segment_destination(Destination=\"CloudWatchLogs\")\n            return True\n\n        except ClientError as e:\n            click.echo(f\"   \u274c Failed to configure trace destination: {e}\")\n            return False\n\n    def configure_indexing_rule(self, sampling_percentage: float = 1.0) -&gt; bool:\n        \"\"\"Configure the span indexing rule.\n\n        Args:\n            sampling_percentage: Percentage of spans to index (default 1.0 for free tier)\n\n        Returns:\n            True if indexing rule was configured successfully, False otherwise\n        \"\"\"\n        try:\n            self.xray_client.update_indexing_rule(\n                Name=\"Default\", Rule={\"Probabilistic\": {\"DesiredSamplingPercentage\": sampling_percentage}}\n            )\n            return True\n\n        except ClientError as e:\n            click.echo(f\"   \u274c Failed to configure indexing rule: {e}\")\n            return False\n\n    def enable_transaction_search(self, sampling_percentage: float = 1.0) -&gt; bool:\n        \"\"\"Enable Transaction Search with all required configuration.\n\n        Args:\n            sampling_percentage: Percentage of spans to index (default 1.0 for free tier)\n\n        Returns:\n            True if Transaction Search was enabled successfully, False otherwise\n        \"\"\"\n        click.echo(\"   \ud83d\udd04 Enabling Transaction Search...\")\n\n        # Step 1: Create resource policy\n        click.echo(\"   \ud83d\udccb Creating resource policy...\")\n        if not self.create_resource_policy():\n            return False\n\n        # Step 2: Configure trace destination\n        click.echo(\"   \ud83c\udfaf Configuring trace destination...\")\n        if not self.configure_trace_destination():\n            return False\n\n        # Step 3: Configure indexing rule\n        click.echo(f\"   \ud83d\udcca Configuring indexing rule ({sampling_percentage}% sampling)...\")\n        if not self.configure_indexing_rule(sampling_percentage):\n            return False\n\n        # Step 4: Wait a moment for configuration to propagate\n        click.echo(\"   \u23f3 Waiting for configuration to propagate...\")\n        time.sleep(5)\n\n        # Step 5: Verify configuration\n        is_enabled, status_msg = self.is_transaction_search_enabled()\n        if is_enabled:\n            click.echo(\"   \u2705 Transaction Search enabled successfully\")\n            click.echo(\"   \ud83d\udcdd Note: It may take up to 10 minutes for spans to become available for search\")\n            return True\n        else:\n            click.echo(f\"   \u274c Transaction Search enablement verification failed: {status_msg}\")\n            return False\n</code></pre>"},{"location":"reference/agentcore_cli/utils/observability/#agentcore_cli.utils.observability.TransactionSearchManager.__init__","title":"<code>__init__(region)</code>","text":"<p>Initialize the Transaction Search manager.</p> <p>Parameters:</p> Name Type Description Default <code>region</code> <code>str</code> <p>AWS region to operate in</p> required Source code in <code>agentcore_cli/utils/observability.py</code> Python<pre><code>def __init__(self, region: str):\n    \"\"\"Initialize the Transaction Search manager.\n\n    Args:\n        region: AWS region to operate in\n    \"\"\"\n    self.region = region\n\n    # Validate AWS credentials first\n    if not validate_aws_credentials():\n        raise ValueError(\"AWS credentials not configured\")\n\n    # Validate region format\n    is_valid, error_msg = validate_region(region)\n    if not is_valid:\n        raise ValueError(f\"Invalid region: {error_msg}\")\n\n    # Create AWS clients using the session utility\n    session = get_aws_session(region=region)\n    self.xray_client = session.client(\"xray\")\n    self.logs_client = session.client(\"logs\")\n    self.account_id = get_aws_account_id()\n</code></pre>"},{"location":"reference/agentcore_cli/utils/observability/#agentcore_cli.utils.observability.TransactionSearchManager.configure_indexing_rule","title":"<code>configure_indexing_rule(sampling_percentage=1.0)</code>","text":"<p>Configure the span indexing rule.</p> <p>Parameters:</p> Name Type Description Default <code>sampling_percentage</code> <code>float</code> <p>Percentage of spans to index (default 1.0 for free tier)</p> <code>1.0</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if indexing rule was configured successfully, False otherwise</p> Source code in <code>agentcore_cli/utils/observability.py</code> Python<pre><code>def configure_indexing_rule(self, sampling_percentage: float = 1.0) -&gt; bool:\n    \"\"\"Configure the span indexing rule.\n\n    Args:\n        sampling_percentage: Percentage of spans to index (default 1.0 for free tier)\n\n    Returns:\n        True if indexing rule was configured successfully, False otherwise\n    \"\"\"\n    try:\n        self.xray_client.update_indexing_rule(\n            Name=\"Default\", Rule={\"Probabilistic\": {\"DesiredSamplingPercentage\": sampling_percentage}}\n        )\n        return True\n\n    except ClientError as e:\n        click.echo(f\"   \u274c Failed to configure indexing rule: {e}\")\n        return False\n</code></pre>"},{"location":"reference/agentcore_cli/utils/observability/#agentcore_cli.utils.observability.TransactionSearchManager.configure_trace_destination","title":"<code>configure_trace_destination()</code>","text":"<p>Configure X-Ray to send traces to CloudWatch Logs.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if destination was configured successfully, False otherwise</p> Source code in <code>agentcore_cli/utils/observability.py</code> Python<pre><code>def configure_trace_destination(self) -&gt; bool:\n    \"\"\"Configure X-Ray to send traces to CloudWatch Logs.\n\n    Returns:\n        True if destination was configured successfully, False otherwise\n    \"\"\"\n    try:\n        self.xray_client.update_trace_segment_destination(Destination=\"CloudWatchLogs\")\n        return True\n\n    except ClientError as e:\n        click.echo(f\"   \u274c Failed to configure trace destination: {e}\")\n        return False\n</code></pre>"},{"location":"reference/agentcore_cli/utils/observability/#agentcore_cli.utils.observability.TransactionSearchManager.create_resource_policy","title":"<code>create_resource_policy()</code>","text":"<p>Create the resource policy for X-Ray to send traces to CloudWatch Logs.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if policy was created successfully, False otherwise</p> Source code in <code>agentcore_cli/utils/observability.py</code> Python<pre><code>def create_resource_policy(self) -&gt; bool:\n    \"\"\"Create the resource policy for X-Ray to send traces to CloudWatch Logs.\n\n    Returns:\n        True if policy was created successfully, False otherwise\n    \"\"\"\n    try:\n        policy_document = {\n            \"Version\": \"2012-10-17\",\n            \"Statement\": [\n                {\n                    \"Sid\": \"TransactionSearchXRayAccess\",\n                    \"Effect\": \"Allow\",\n                    \"Principal\": {\"Service\": \"xray.amazonaws.com\"},\n                    \"Action\": \"logs:PutLogEvents\",\n                    \"Resource\": [\n                        f\"arn:aws:logs:{self.region}:{self.account_id}:log-group:aws/spans:*\",\n                        f\"arn:aws:logs:{self.region}:{self.account_id}:log-group:/aws/application-signals/data:*\",\n                    ],\n                    \"Condition\": {\n                        \"ArnLike\": {\"aws:SourceArn\": f\"arn:aws:logs:{self.region}:{self.account_id}:*\"},\n                        \"StringEquals\": {\"aws:SourceAccount\": self.account_id},\n                    },\n                }\n            ],\n        }\n\n        self.logs_client.put_resource_policy(\n            policyName=\"AgentCoreTransactionSearchPolicy\", policyDocument=json.dumps(policy_document)\n        )\n\n        return True\n\n    except ClientError as e:\n        click.echo(f\"   \u274c Failed to create resource policy: {e}\")\n        return False\n</code></pre>"},{"location":"reference/agentcore_cli/utils/observability/#agentcore_cli.utils.observability.TransactionSearchManager.enable_transaction_search","title":"<code>enable_transaction_search(sampling_percentage=1.0)</code>","text":"<p>Enable Transaction Search with all required configuration.</p> <p>Parameters:</p> Name Type Description Default <code>sampling_percentage</code> <code>float</code> <p>Percentage of spans to index (default 1.0 for free tier)</p> <code>1.0</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if Transaction Search was enabled successfully, False otherwise</p> Source code in <code>agentcore_cli/utils/observability.py</code> Python<pre><code>def enable_transaction_search(self, sampling_percentage: float = 1.0) -&gt; bool:\n    \"\"\"Enable Transaction Search with all required configuration.\n\n    Args:\n        sampling_percentage: Percentage of spans to index (default 1.0 for free tier)\n\n    Returns:\n        True if Transaction Search was enabled successfully, False otherwise\n    \"\"\"\n    click.echo(\"   \ud83d\udd04 Enabling Transaction Search...\")\n\n    # Step 1: Create resource policy\n    click.echo(\"   \ud83d\udccb Creating resource policy...\")\n    if not self.create_resource_policy():\n        return False\n\n    # Step 2: Configure trace destination\n    click.echo(\"   \ud83c\udfaf Configuring trace destination...\")\n    if not self.configure_trace_destination():\n        return False\n\n    # Step 3: Configure indexing rule\n    click.echo(f\"   \ud83d\udcca Configuring indexing rule ({sampling_percentage}% sampling)...\")\n    if not self.configure_indexing_rule(sampling_percentage):\n        return False\n\n    # Step 4: Wait a moment for configuration to propagate\n    click.echo(\"   \u23f3 Waiting for configuration to propagate...\")\n    time.sleep(5)\n\n    # Step 5: Verify configuration\n    is_enabled, status_msg = self.is_transaction_search_enabled()\n    if is_enabled:\n        click.echo(\"   \u2705 Transaction Search enabled successfully\")\n        click.echo(\"   \ud83d\udcdd Note: It may take up to 10 minutes for spans to become available for search\")\n        return True\n    else:\n        click.echo(f\"   \u274c Transaction Search enablement verification failed: {status_msg}\")\n        return False\n</code></pre>"},{"location":"reference/agentcore_cli/utils/observability/#agentcore_cli.utils.observability.TransactionSearchManager.is_transaction_search_enabled","title":"<code>is_transaction_search_enabled()</code>","text":"<p>Check if Transaction Search is enabled.</p> <p>Returns:</p> Type Description <code>tuple[bool, str | None]</code> <p>Tuple of (is_enabled, status_message)</p> Source code in <code>agentcore_cli/utils/observability.py</code> Python<pre><code>def is_transaction_search_enabled(self) -&gt; tuple[bool, str | None]:\n    \"\"\"Check if Transaction Search is enabled.\n\n    Returns:\n        Tuple of (is_enabled, status_message)\n    \"\"\"\n    try:\n        response = self.xray_client.get_trace_segment_destination()\n        destination = response.get(\"Destination\")\n        status = response.get(\"Status\")\n\n        if destination == \"CloudWatchLogs\" and status == \"ACTIVE\":\n            return True, \"Transaction Search is enabled and active\"\n        else:\n            return False, f\"Transaction Search status: destination={destination}, status={status}\"\n\n    except ClientError as e:\n        error_code = e.response.get(\"Error\", {}).get(\"Code\", \"Unknown\")\n        if error_code == \"ResourceNotFoundException\":\n            return False, \"Transaction Search not configured\"\n        else:\n            return False, f\"Error checking Transaction Search: {e}\"\n</code></pre>"},{"location":"reference/agentcore_cli/utils/observability/#agentcore_cli.utils.observability.get_transaction_search_status","title":"<code>get_transaction_search_status(region='us-west-2')</code>","text":"<p>Get detailed Transaction Search status information.</p> <p>Parameters:</p> Name Type Description Default <code>region</code> <code>str</code> <p>AWS region to check</p> <code>'us-west-2'</code> <p>Returns:</p> Type Description <code>dict[str, str | bool | None]</code> <p>Dictionary with status information</p> Source code in <code>agentcore_cli/utils/observability.py</code> Python<pre><code>def get_transaction_search_status(region: str = \"us-west-2\") -&gt; dict[str, str | bool | None]:\n    \"\"\"Get detailed Transaction Search status information.\n\n    Args:\n        region: AWS region to check\n\n    Returns:\n        Dictionary with status information\n    \"\"\"\n    try:\n        manager = TransactionSearchManager(region)\n        is_enabled, status_msg = manager.is_transaction_search_enabled()\n\n        return {\n            \"enabled\": is_enabled,\n            \"status_message\": status_msg,\n            \"region\": region,\n            \"account_id\": get_aws_account_id(),\n        }\n    except Exception as e:\n        return {\"enabled\": False, \"status_message\": f\"Error checking status: {e}\", \"region\": region, \"account_id\": None}\n</code></pre>"},{"location":"reference/agentcore_cli/utils/observability/#agentcore_cli.utils.observability.validate_and_enable_transaction_search","title":"<code>validate_and_enable_transaction_search(region='us-west-2', interactive=True)</code>","text":"<p>Validate Transaction Search status and enable if needed.</p> <p>Parameters:</p> Name Type Description Default <code>region</code> <code>str</code> <p>AWS region to check/configure</p> <code>'us-west-2'</code> <code>interactive</code> <code>bool</code> <p>Whether to prompt user for confirmation</p> <code>True</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if Transaction Search is enabled (or was enabled successfully), False otherwise</p> Source code in <code>agentcore_cli/utils/observability.py</code> Python<pre><code>def validate_and_enable_transaction_search(region: str = \"us-west-2\", interactive: bool = True) -&gt; bool:\n    \"\"\"Validate Transaction Search status and enable if needed.\n\n    Args:\n        region: AWS region to check/configure\n        interactive: Whether to prompt user for confirmation\n\n    Returns:\n        True if Transaction Search is enabled (or was enabled successfully), False otherwise\n    \"\"\"\n    try:\n        manager = TransactionSearchManager(region)\n\n        # Check current status\n        is_enabled, status_msg = manager.is_transaction_search_enabled()\n\n        if is_enabled:\n            click.echo(\"   \u2705 Transaction Search is already enabled\")\n            return True\n\n        click.echo(f\"   \u2139\ufe0f  Transaction Search status: {status_msg}\")\n\n        if interactive:\n            enable_search = click.confirm(\n                \"   Would you like to enable Transaction Search for cost-effective observability?\", default=True\n            )\n            if not enable_search:\n                click.echo(\"   \u23ed\ufe0f  Skipped Transaction Search setup\")\n                return False\n\n        # Get sampling percentage if interactive\n        sampling_percentage = 1.0\n        if interactive:\n            custom_sampling = click.confirm(\n                \"   Use custom sampling percentage? (default: 1% - free tier)\", default=False\n            )\n            if custom_sampling:\n                sampling_percentage = click.prompt(\"   Enter sampling percentage (1-100)\", default=1.0, type=float)\n                if sampling_percentage &lt; 1 or sampling_percentage &gt; 100:\n                    click.echo(\"   \u274c Sampling percentage must be between 1 and 100\")\n                    sampling_percentage = 1.0\n\n        # Enable Transaction Search\n        return manager.enable_transaction_search(sampling_percentage)\n\n    except ValueError as e:\n        click.echo(f\"   \u274c {e}\")\n        return False\n    except Exception as e:\n        click.echo(f\"   \u274c Unexpected error: {e}\")\n        return False\n</code></pre>"},{"location":"reference/agentcore_cli/utils/rich_utils/","title":"agentcore_cli.utils.rich_utils","text":""},{"location":"reference/agentcore_cli/utils/rich_utils/#agentcore_cli.utils.rich_utils","title":"<code>agentcore_cli.utils.rich_utils</code>","text":"<p>Rich utilities for consistent CLI formatting and styling.</p> <p>This module provides centralized Rich utilities for beautiful terminal output without using progress bars (which can be glitchy).</p>"},{"location":"reference/agentcore_cli/utils/rich_utils/#agentcore_cli.utils.rich_utils.confirm_action","title":"<code>confirm_action(message, style='yellow')</code>","text":"<p>Rich-styled confirmation prompt.</p> Source code in <code>agentcore_cli/utils/rich_utils.py</code> Python<pre><code>def confirm_action(message: str, style: str = \"yellow\") -&gt; bool:\n    \"\"\"Rich-styled confirmation prompt.\"\"\"\n    from rich.prompt import Confirm\n\n    return Confirm.ask(f\"[{style}]{message}[/{style}]\")\n</code></pre>"},{"location":"reference/agentcore_cli/utils/rich_utils/#agentcore_cli.utils.rich_utils.create_status_tree","title":"<code>create_status_tree(title, items)</code>","text":"<p>Create a tree view for hierarchical status information.</p> Source code in <code>agentcore_cli/utils/rich_utils.py</code> Python<pre><code>def create_status_tree(title: str, items: dict[str, Any]) -&gt; Tree:\n    \"\"\"Create a tree view for hierarchical status information.\"\"\"\n    tree = Tree(f\"[bold blue]{title}[/bold blue]\")\n\n    for key, value in items.items():\n        if isinstance(value, dict):\n            branch = tree.add(f\"[cyan]{key}[/cyan]\")\n            for sub_key, sub_value in value.items():\n                branch.add(f\"{sub_key}: [bold]{sub_value}[/bold]\")\n        elif isinstance(value, list):\n            branch = tree.add(f\"[cyan]{key}[/cyan]\")\n            for item in value:\n                branch.add(f\"\u2022 {item}\")\n        else:\n            tree.add(f\"[cyan]{key}[/cyan]: [bold]{value}[/bold]\")\n\n    return tree\n</code></pre>"},{"location":"reference/agentcore_cli/utils/rich_utils/#agentcore_cli.utils.rich_utils.create_table","title":"<code>create_table(title, columns, rows, show_header=True, show_lines=False)</code>","text":"<p>Create a Rich table with consistent styling.</p> Source code in <code>agentcore_cli/utils/rich_utils.py</code> Python<pre><code>def create_table(\n    title: str, columns: list[str], rows: list[list[str]], show_header: bool = True, show_lines: bool = False\n) -&gt; Table:\n    \"\"\"Create a Rich table with consistent styling.\"\"\"\n    table = Table(title=title, show_header=show_header, show_lines=show_lines)\n\n    # Add columns\n    for column in columns:\n        table.add_column(column, style=\"cyan\")\n\n    # Add rows\n    for row in rows:\n        table.add_row(*row)\n\n    return table\n</code></pre>"},{"location":"reference/agentcore_cli/utils/rich_utils/#agentcore_cli.utils.rich_utils.extract_response_content","title":"<code>extract_response_content(response, prefer_markdown=True)</code>","text":"<p>Extract only the response content for piping (no formatting, headers, or JSON structure).</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>dict | str</code> <p>The response data (JSON string or dict)</p> required <code>prefer_markdown</code> <code>bool</code> <p>If True, return detected markdown content; if False, return full JSON</p> <code>True</code> <p>Returns:</p> Type Description <code>str</code> <p>The extracted content as a plain string</p> Source code in <code>agentcore_cli/utils/rich_utils.py</code> Python<pre><code>def extract_response_content(response: dict | str, prefer_markdown: bool = True) -&gt; str:\n    \"\"\"Extract only the response content for piping (no formatting, headers, or JSON structure).\n\n    Args:\n        response: The response data (JSON string or dict)\n        prefer_markdown: If True, return detected markdown content; if False, return full JSON\n\n    Returns:\n        The extracted content as a plain string\n    \"\"\"\n    try:\n        # Handle string that might be JSON\n        if isinstance(response, str):\n            data = json.loads(response)\n        else:\n            data = response\n\n        if prefer_markdown and isinstance(data, dict):\n            # Find all markdown content recursively\n            markdown_content = _find_markdown_fields(data)\n\n            if markdown_content:\n                # Return all markdown content concatenated\n                contents = []\n                for path, (content, display_name) in markdown_content.items():\n                    contents.append(content)\n                return \"\\n\\n\".join(contents)\n\n        # If no markdown found or prefer_markdown is False, return the JSON\n        if isinstance(data, (dict, list)):\n            return json.dumps(data, indent=2, ensure_ascii=False)\n        else:\n            return str(data)\n\n    except (json.JSONDecodeError, TypeError):\n        # If not valid JSON, return as-is\n        return str(response)\n</code></pre>"},{"location":"reference/agentcore_cli/utils/rich_utils/#agentcore_cli.utils.rich_utils.format_file_syntax","title":"<code>format_file_syntax(file_path, content, language='json')</code>","text":"<p>Create syntax-highlighted content for files.</p> Source code in <code>agentcore_cli/utils/rich_utils.py</code> Python<pre><code>def format_file_syntax(file_path: str, content: str, language: str = \"json\") -&gt; Syntax:\n    \"\"\"Create syntax-highlighted content for files.\"\"\"\n    return Syntax(content, language, theme=\"monokai\", line_numbers=True)\n</code></pre>"},{"location":"reference/agentcore_cli/utils/rich_utils/#agentcore_cli.utils.rich_utils.get_console","title":"<code>get_console()</code>","text":"<p>Get the global Rich console instance.</p> Source code in <code>agentcore_cli/utils/rich_utils.py</code> Python<pre><code>def get_console() -&gt; Console:\n    \"\"\"Get the global Rich console instance.\"\"\"\n    return console\n</code></pre>"},{"location":"reference/agentcore_cli/utils/rich_utils/#agentcore_cli.utils.rich_utils.is_markdown_content","title":"<code>is_markdown_content(text)</code>","text":"<p>Detect if text contains markdown formatting.</p> Source code in <code>agentcore_cli/utils/rich_utils.py</code> Python<pre><code>def is_markdown_content(text: str) -&gt; bool:\n    \"\"\"Detect if text contains markdown formatting.\"\"\"\n\n    # Common markdown patterns\n    markdown_patterns = [\n        r\"#{1,6}\\s+\",  # Headers\n        r\"\\*\\*.*?\\*\\*\",  # Bold\n        r\"\\*.*?\\*\",  # Italic\n        r\"`.*?`\",  # Inline code\n        r\"```.*?```\",  # Code blocks\n        r\"\\[.*?\\]\\(.*?\\)\",  # Links\n        r\"^\\s*[-*+]\\s+\",  # Lists\n        r\"^\\s*\\d+\\.\\s+\",  # Numbered lists\n        r\"^\\s*&gt;\\s+\",  # Blockquotes\n    ]\n\n    return any(re.search(pattern, text, re.MULTILINE | re.DOTALL) for pattern in markdown_patterns)\n</code></pre>"},{"location":"reference/agentcore_cli/utils/rich_utils/#agentcore_cli.utils.rich_utils.print_agent_response","title":"<code>print_agent_response(response, title='Agent Response')</code>","text":"<p>Print agent response with intelligent markdown rendering.</p> Source code in <code>agentcore_cli/utils/rich_utils.py</code> Python<pre><code>def print_agent_response(response: dict | str, title: str = \"Agent Response\") -&gt; None:\n    \"\"\"Print agent response with intelligent markdown rendering.\"\"\"\n    print_json_with_markdown(response, title=title, render_markdown_fields=True)\n</code></pre>"},{"location":"reference/agentcore_cli/utils/rich_utils/#agentcore_cli.utils.rich_utils.print_agent_response_raw","title":"<code>print_agent_response_raw(response, title='Agent Response')</code>","text":"<p>Print agent response with markdown extracted but shown as raw text for clipboard usability.</p> Source code in <code>agentcore_cli/utils/rich_utils.py</code> Python<pre><code>def print_agent_response_raw(response: dict | str, title: str = \"Agent Response\") -&gt; None:\n    \"\"\"Print agent response with markdown extracted but shown as raw text for clipboard usability.\"\"\"\n    if title:\n        console.print(f\"\\n[bold]{title}[/bold]\")\n\n    try:\n        # Handle string that might be JSON\n        if isinstance(response, str):\n            data = json.loads(response)\n        else:\n            data = response\n\n        if isinstance(data, dict):\n            # Find all markdown content recursively\n            markdown_content = _find_markdown_fields(data)\n\n            if markdown_content:\n                # Print the JSON structure first (without markdown fields)\n                display_data = json.loads(json.dumps(data))  # Deep copy\n\n                for path, (content, display_name) in markdown_content.items():\n                    _set_nested_value(display_data, path, \"[Raw markdown shown below]\")\n\n                # Show JSON structure\n                json_obj = JSON.from_data(display_data)\n                console.print(json_obj)\n\n                # Show raw markdown content (not rendered)\n                for path, (content, display_name) in markdown_content.items():\n                    console.print()\n                    console.print(f\"[bold]{display_name} (Raw Markdown):[/bold]\")\n                    console.print(\"\u2500\" * (len(display_name) + 15))\n                    console.print(content)\n\n                return\n\n        # Default JSON rendering if no markdown found\n        json_obj = JSON.from_data(data)\n        console.print(json_obj)\n    except (json.JSONDecodeError, TypeError):\n        # If not valid JSON, print as plain text\n        console.print(str(response))\n</code></pre>"},{"location":"reference/agentcore_cli/utils/rich_utils/#agentcore_cli.utils.rich_utils.print_ascii_banner","title":"<code>print_ascii_banner(subtitle=None)</code>","text":"<p>Print the main AgentCore CLI ASCII art banner.</p> Source code in <code>agentcore_cli/utils/rich_utils.py</code> Python<pre><code>def print_ascii_banner(subtitle: str | None = None) -&gt; None:\n    \"\"\"Print the main AgentCore CLI ASCII art banner.\"\"\"\n    try:\n        from agentcore_cli.static.banner import banner_ascii\n\n        console.print()\n        console.print(f\"[bright_blue]{banner_ascii}[/bright_blue]\")\n        if subtitle:\n            console.print(f\"[bright_blue bold]   {subtitle}[/bright_blue bold]\")\n        console.print()\n    except ImportError:\n        # Fallback if ASCII art can't be loaded\n        print_banner(\"AgentCore CLI\", subtitle, emoji=\"\ud83d\ude80\")\n</code></pre>"},{"location":"reference/agentcore_cli/utils/rich_utils/#agentcore_cli.utils.rich_utils.print_banner","title":"<code>print_banner(title, subtitle=None, emoji='\ud83d\ude80', use_ascii=False)</code>","text":"<p>Print an attractive banner for major sections (clipboard-friendly).</p> Source code in <code>agentcore_cli/utils/rich_utils.py</code> Python<pre><code>def print_banner(title: str, subtitle: str | None = None, emoji: str = \"\ud83d\ude80\", use_ascii: bool = False) -&gt; None:\n    \"\"\"Print an attractive banner for major sections (clipboard-friendly).\"\"\"\n    console.print()\n\n    if use_ascii:\n        try:\n            from agentcore_cli.static.banner import banner_ascii\n\n            console.print(f\"[bright_blue]{banner_ascii}[/bright_blue]\")\n            if subtitle:\n                console.print(f\"[bright_blue bold]   {subtitle}[/bright_blue bold]\")\n        except ImportError:\n            # Fallback to regular banner if ASCII art can't be loaded\n            banner_text = f\"[bright_blue bold]{emoji} {title}[/bright_blue bold]\"\n            console.print(banner_text)\n            if subtitle:\n                console.print(f\"[bright_blue]   {subtitle}[/bright_blue]\")\n    else:\n        banner_text = f\"[bright_blue bold]{emoji} {title}[/bright_blue bold]\"\n        console.print(banner_text)\n        if subtitle:\n            console.print(f\"[bright_blue]   {subtitle}[/bright_blue]\")\n        console.print(\"\u2550\" * (len(title) + 3), style=\"bright_blue\")\n\n    console.print()\n</code></pre>"},{"location":"reference/agentcore_cli/utils/rich_utils/#agentcore_cli.utils.rich_utils.print_columns","title":"<code>print_columns(items, title=None)</code>","text":"<p>Print items in columns for compact display.</p> Source code in <code>agentcore_cli/utils/rich_utils.py</code> Python<pre><code>def print_columns(items: list[str], title: str | None = None) -&gt; None:\n    \"\"\"Print items in columns for compact display.\"\"\"\n    if title:\n        console.print(f\"\\n[bold]{title}[/bold]\")\n\n    columns = Columns(items, equal=True, expand=True)\n    console.print(columns)\n</code></pre>"},{"location":"reference/agentcore_cli/utils/rich_utils/#agentcore_cli.utils.rich_utils.print_command","title":"<code>print_command(command, description=None)</code>","text":"<p>Print a command that users can copy and run.</p> Source code in <code>agentcore_cli/utils/rich_utils.py</code> Python<pre><code>def print_command(command: str, description: str | None = None) -&gt; None:\n    \"\"\"Print a command that users can copy and run.\"\"\"\n    if description:\n        console.print(f\"[dim]{description}[/dim]\")\n    console.print(f\"[bold green]$[/bold green] [cyan]{command}[/cyan]\")\n</code></pre>"},{"location":"reference/agentcore_cli/utils/rich_utils/#agentcore_cli.utils.rich_utils.print_command_examples","title":"<code>print_command_examples(examples)</code>","text":"<p>Print command examples with syntax highlighting.</p> Source code in <code>agentcore_cli/utils/rich_utils.py</code> Python<pre><code>def print_command_examples(examples: list[tuple[str, str]]) -&gt; None:\n    \"\"\"Print command examples with syntax highlighting.\"\"\"\n    print_section_header(\"Examples\", \"\ud83d\udca1\")\n    for command, description in examples:\n        console.print(f\"   \u2022 {description}:\")\n        console.print(f\"     [bold cyan]{command}[/bold cyan]\")\n</code></pre>"},{"location":"reference/agentcore_cli/utils/rich_utils/#agentcore_cli.utils.rich_utils.print_commands","title":"<code>print_commands(commands, title=None)</code>","text":"<p>Print multiple commands with descriptions.</p> Source code in <code>agentcore_cli/utils/rich_utils.py</code> Python<pre><code>def print_commands(commands: list[tuple[str, str | None]], title: str | None = None) -&gt; None:\n    \"\"\"Print multiple commands with descriptions.\"\"\"\n    if title:\n        print_section_header(title)\n\n    for command, description in commands:\n        print_command(command, description)\n    console.print()\n</code></pre>"},{"location":"reference/agentcore_cli/utils/rich_utils/#agentcore_cli.utils.rich_utils.print_copyable_value","title":"<code>print_copyable_value(label, value, description=None)</code>","text":"<p>Print a value that users commonly need to copy (clipboard-friendly).</p> Source code in <code>agentcore_cli/utils/rich_utils.py</code> Python<pre><code>def print_copyable_value(label: str, value: str, description: str | None = None) -&gt; None:\n    \"\"\"Print a value that users commonly need to copy (clipboard-friendly).\"\"\"\n    console.print(f\"[bold cyan]{label}:[/bold cyan] {value}\")\n    if description:\n        console.print(f\"   [dim]{description}[/dim]\")\n</code></pre>"},{"location":"reference/agentcore_cli/utils/rich_utils/#agentcore_cli.utils.rich_utils.print_copyable_values","title":"<code>print_copyable_values(values, title=None)</code>","text":"<p>Print multiple copyable values (clipboard-friendly).</p> Source code in <code>agentcore_cli/utils/rich_utils.py</code> Python<pre><code>def print_copyable_values(values: dict[str, str], title: str | None = None) -&gt; None:\n    \"\"\"Print multiple copyable values (clipboard-friendly).\"\"\"\n    if title:\n        print_section_header(title)\n\n    for label, value in values.items():\n        print_copyable_value(label, value)\n    console.print()\n</code></pre>"},{"location":"reference/agentcore_cli/utils/rich_utils/#agentcore_cli.utils.rich_utils.print_error","title":"<code>print_error(message, details=None)</code>","text":"<p>Print an error message with consistent styling.</p> Source code in <code>agentcore_cli/utils/rich_utils.py</code> Python<pre><code>def print_error(message: str, details: str | None = None) -&gt; None:\n    \"\"\"Print an error message with consistent styling.\"\"\"\n    text = Text(\"\u274c \", style=\"red\") + Text(message, style=\"red bold\")\n    console.print(text)\n    if details:\n        console.print(f\"   {details}\", style=\"dim red\")\n</code></pre>"},{"location":"reference/agentcore_cli/utils/rich_utils/#agentcore_cli.utils.rich_utils.print_file_content","title":"<code>print_file_content(file_path, content, language='json')</code>","text":"<p>Print file content with syntax highlighting.</p> Source code in <code>agentcore_cli/utils/rich_utils.py</code> Python<pre><code>def print_file_content(file_path: str, content: str, language: str = \"json\") -&gt; None:\n    \"\"\"Print file content with syntax highlighting.\"\"\"\n    syntax = format_file_syntax(file_path, content, language)\n    console.print(f\"\\n\ud83d\udcc4 [bold]{file_path}[/bold]\")\n    console.print(syntax)\n</code></pre>"},{"location":"reference/agentcore_cli/utils/rich_utils/#agentcore_cli.utils.rich_utils.print_info","title":"<code>print_info(message, details=None)</code>","text":"<p>Print an info message with consistent styling.</p> Source code in <code>agentcore_cli/utils/rich_utils.py</code> Python<pre><code>def print_info(message: str, details: str | None = None) -&gt; None:\n    \"\"\"Print an info message with consistent styling.\"\"\"\n    text = Text(\"\ud83d\udca1 \", style=\"blue\") + Text(message, style=\"blue bold\")\n    console.print(text)\n    if details:\n        console.print(f\"   {details}\", style=\"dim\")\n</code></pre>"},{"location":"reference/agentcore_cli/utils/rich_utils/#agentcore_cli.utils.rich_utils.print_json","title":"<code>print_json(data, title=None)</code>","text":"<p>Print JSON data with beautiful formatting (legacy function for backward compatibility).</p> Source code in <code>agentcore_cli/utils/rich_utils.py</code> Python<pre><code>def print_json(data: dict | list | str, title: str | None = None) -&gt; None:\n    \"\"\"Print JSON data with beautiful formatting (legacy function for backward compatibility).\"\"\"\n    print_json_with_markdown(data, title, render_markdown_fields=False)\n</code></pre>"},{"location":"reference/agentcore_cli/utils/rich_utils/#agentcore_cli.utils.rich_utils.print_json_with_markdown","title":"<code>print_json_with_markdown(data, title=None, render_markdown_fields=True)</code>","text":"<p>Print JSON data with automatic markdown rendering for text fields.</p> Source code in <code>agentcore_cli/utils/rich_utils.py</code> Python<pre><code>def print_json_with_markdown(\n    data: dict | list | str, title: str | None = None, render_markdown_fields: bool = True\n) -&gt; None:\n    \"\"\"Print JSON data with automatic markdown rendering for text fields.\"\"\"\n    if title:\n        console.print(f\"\\n[bold]{title}[/bold]\")\n\n    try:\n        # Handle string that might be JSON\n        if isinstance(data, str):\n            data = json.loads(data)\n\n        if render_markdown_fields and isinstance(data, dict):\n            # Find all markdown content recursively\n            markdown_content = _find_markdown_fields(data)\n\n            if markdown_content:\n                # Print the JSON structure first (without markdown fields)\n                display_data = json.loads(json.dumps(data))  # Deep copy\n\n                for path, (content, display_name) in markdown_content.items():\n                    _set_nested_value(display_data, path, \"[Rendered as markdown below]\")\n\n                # Show JSON structure\n                json_obj = JSON.from_data(display_data)\n                console.print(json_obj)\n\n                # Render markdown content separately\n                for path, (content, display_name) in markdown_content.items():\n                    console.print()\n                    print_markdown(content, title=f\"{display_name} (Markdown)\")\n\n                return\n\n        # Default JSON rendering\n        json_obj = JSON.from_data(data)\n        console.print(json_obj)\n    except (json.JSONDecodeError, TypeError):\n        # If not valid JSON, try to render as markdown or plain text\n        print_smart_content(str(data), title)\n</code></pre>"},{"location":"reference/agentcore_cli/utils/rich_utils/#agentcore_cli.utils.rich_utils.print_key_value_pairs","title":"<code>print_key_value_pairs(pairs, title=None)</code>","text":"<p>Print key-value pairs with consistent formatting.</p> Source code in <code>agentcore_cli/utils/rich_utils.py</code> Python<pre><code>def print_key_value_pairs(pairs: dict[str, Any], title: str | None = None) -&gt; None:\n    \"\"\"Print key-value pairs with consistent formatting.\"\"\"\n    if title:\n        print_section_header(title)\n\n    for key, value in pairs.items():\n        # Mask sensitive values\n        display_value = (\n            \"***\"\n            if any(sensitive in key.lower() for sensitive in [\"key\", \"secret\", \"token\", \"password\"])\n            else str(value)\n        )\n        console.print(f\"   {key}: [bold]{display_value}[/bold]\")\n</code></pre>"},{"location":"reference/agentcore_cli/utils/rich_utils/#agentcore_cli.utils.rich_utils.print_markdown","title":"<code>print_markdown(content, title=None)</code>","text":"<p>Print markdown content with Rich rendering.</p> Source code in <code>agentcore_cli/utils/rich_utils.py</code> Python<pre><code>def print_markdown(content: str, title: str | None = None) -&gt; None:\n    \"\"\"Print markdown content with Rich rendering.\"\"\"\n    if title:\n        console.print(f\"\\n[bold]{title}[/bold]\")\n\n    markdown = Markdown(content)\n    console.print(markdown)\n</code></pre>"},{"location":"reference/agentcore_cli/utils/rich_utils/#agentcore_cli.utils.rich_utils.print_next_steps","title":"<code>print_next_steps(steps)</code>","text":"<p>Print next steps with consistent formatting.</p> Source code in <code>agentcore_cli/utils/rich_utils.py</code> Python<pre><code>def print_next_steps(steps: list[str]) -&gt; None:\n    \"\"\"Print next steps with consistent formatting.\"\"\"\n    print_section_header(\"Next Steps\", \"\ud83d\ude80\")\n    for i, step in enumerate(steps, 1):\n        console.print(f\"   {i}. {step}\")\n</code></pre>"},{"location":"reference/agentcore_cli/utils/rich_utils/#agentcore_cli.utils.rich_utils.print_section_block","title":"<code>print_section_block(content, title=None, style='blue')</code>","text":"<p>Print content in a simple block format (clipboard-friendly).</p> Source code in <code>agentcore_cli/utils/rich_utils.py</code> Python<pre><code>def print_section_block(content: str, title: str | None = None, style: str = \"blue\") -&gt; None:\n    \"\"\"Print content in a simple block format (clipboard-friendly).\"\"\"\n    if title:\n        console.print(f\"\\n[{style} bold]{title}[/{style} bold]\")\n        console.print(\"\u2500\" * len(title), style=style)\n    console.print(f\"[{style}]{content}[/{style}]\")\n</code></pre>"},{"location":"reference/agentcore_cli/utils/rich_utils/#agentcore_cli.utils.rich_utils.print_section_header","title":"<code>print_section_header(title, emoji='\ud83d\udccb')</code>","text":"<p>Print a section header with consistent styling.</p> Source code in <code>agentcore_cli/utils/rich_utils.py</code> Python<pre><code>def print_section_header(title: str, emoji: str = \"\ud83d\udccb\") -&gt; None:\n    \"\"\"Print a section header with consistent styling.\"\"\"\n    text = Text(f\"{emoji} \", style=\"bright_blue\") + Text(title, style=\"bright_blue bold\")\n    console.print()\n    console.print(text)\n</code></pre>"},{"location":"reference/agentcore_cli/utils/rich_utils/#agentcore_cli.utils.rich_utils.print_smart_content","title":"<code>print_smart_content(content, title=None)</code>","text":"<p>Intelligently print content as markdown or plain text.</p> Source code in <code>agentcore_cli/utils/rich_utils.py</code> Python<pre><code>def print_smart_content(content: str, title: str | None = None) -&gt; None:\n    \"\"\"Intelligently print content as markdown or plain text.\"\"\"\n    if is_markdown_content(content):\n        print_markdown(content, title)\n    else:\n        if title:\n            console.print(f\"\\n[bold]{title}[/bold]\")\n        console.print(content)\n</code></pre>"},{"location":"reference/agentcore_cli/utils/rich_utils/#agentcore_cli.utils.rich_utils.print_status_tree","title":"<code>print_status_tree(title, items)</code>","text":"<p>Print a tree view for hierarchical status information.</p> Source code in <code>agentcore_cli/utils/rich_utils.py</code> Python<pre><code>def print_status_tree(title: str, items: dict[str, Any]) -&gt; None:\n    \"\"\"Print a tree view for hierarchical status information.\"\"\"\n    tree = create_status_tree(title, items)\n    console.print(tree)\n</code></pre>"},{"location":"reference/agentcore_cli/utils/rich_utils/#agentcore_cli.utils.rich_utils.print_step","title":"<code>print_step(step_number, message, details=None)</code>","text":"<p>Print a step message with consistent styling.</p> Source code in <code>agentcore_cli/utils/rich_utils.py</code> Python<pre><code>def print_step(step_number: int, message: str, details: str | None = None) -&gt; None:\n    \"\"\"Print a step message with consistent styling.\"\"\"\n    text = Text(f\"\ud83d\udd04 Step {step_number}: \", style=\"cyan\") + Text(message, style=\"cyan bold\")\n    console.print(text)\n    if details:\n        console.print(f\"   {details}\", style=\"dim\")\n</code></pre>"},{"location":"reference/agentcore_cli/utils/rich_utils/#agentcore_cli.utils.rich_utils.print_success","title":"<code>print_success(message, details=None)</code>","text":"<p>Print a success message with consistent styling.</p> Source code in <code>agentcore_cli/utils/rich_utils.py</code> Python<pre><code>def print_success(message: str, details: str | None = None) -&gt; None:\n    \"\"\"Print a success message with consistent styling.\"\"\"\n    text = Text(\"\u2705 \", style=\"green\") + Text(message, style=\"green bold\")\n    console.print(text)\n    if details:\n        console.print(f\"   {details}\", style=\"dim\")\n</code></pre>"},{"location":"reference/agentcore_cli/utils/rich_utils/#agentcore_cli.utils.rich_utils.print_summary_box","title":"<code>print_summary_box(title, items, style='green')</code>","text":"<p>Print a summary with key information (clipboard-friendly).</p> Source code in <code>agentcore_cli/utils/rich_utils.py</code> Python<pre><code>def print_summary_box(title: str, items: dict[str, str], style: str = \"green\") -&gt; None:\n    \"\"\"Print a summary with key information (clipboard-friendly).\"\"\"\n    console.print()\n    console.print(f\"[{style} bold]\ud83d\udccb {title}[/{style} bold]\")\n    console.print(\"\u2500\" * (len(title) + 3), style=style)\n\n    for key, value in items.items():\n        console.print(f\"[bold]{key}:[/bold] {value}\")\n    console.print()\n</code></pre>"},{"location":"reference/agentcore_cli/utils/rich_utils/#agentcore_cli.utils.rich_utils.print_table","title":"<code>print_table(title, columns, rows, show_header=True, show_lines=False)</code>","text":"<p>Print a table with Rich formatting.</p> Source code in <code>agentcore_cli/utils/rich_utils.py</code> Python<pre><code>def print_table(\n    title: str, columns: list[str], rows: list[list[str]], show_header: bool = True, show_lines: bool = False\n) -&gt; None:\n    \"\"\"Print a table with Rich formatting.\"\"\"\n    table = create_table(title, columns, rows, show_header, show_lines)\n    console.print(table)\n</code></pre>"},{"location":"reference/agentcore_cli/utils/rich_utils/#agentcore_cli.utils.rich_utils.print_warning","title":"<code>print_warning(message, details=None)</code>","text":"<p>Print a warning message with consistent styling.</p> Source code in <code>agentcore_cli/utils/rich_utils.py</code> Python<pre><code>def print_warning(message: str, details: str | None = None) -&gt; None:\n    \"\"\"Print a warning message with consistent styling.\"\"\"\n    text = Text(\"\u26a0\ufe0f  \", style=\"yellow\") + Text(message, style=\"yellow bold\")\n    console.print(text)\n    if details:\n        console.print(f\"   {details}\", style=\"dim yellow\")\n</code></pre>"},{"location":"reference/agentcore_cli/utils/rich_utils/#agentcore_cli.utils.rich_utils.prompt_input","title":"<code>prompt_input(message, default=None)</code>","text":"<p>Rich-styled input prompt.</p> Source code in <code>agentcore_cli/utils/rich_utils.py</code> Python<pre><code>def prompt_input(message: str, default: str | None = None) -&gt; str | None:\n    \"\"\"Rich-styled input prompt.\"\"\"\n    from rich.prompt import Prompt\n\n    return Prompt.ask(f\"[cyan]{message}[/cyan]\", default=default)\n</code></pre>"},{"location":"reference/agentcore_cli/utils/session_utils/","title":"agentcore_cli.utils.session_utils","text":""},{"location":"reference/agentcore_cli/utils/session_utils/#agentcore_cli.utils.session_utils","title":"<code>agentcore_cli.utils.session_utils</code>","text":"<p>Session utilities for AgentCore CLI.</p>"},{"location":"reference/agentcore_cli/utils/session_utils/#agentcore_cli.utils.session_utils.generate_session_id","title":"<code>generate_session_id(prefix=None)</code>","text":"<p>Generate a unique session ID for agent runtime invocations.</p> <p>Parameters:</p> Name Type Description Default <code>prefix</code> <code>str | None</code> <p>Optional prefix to add to the session ID.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A string of at least 33 characters as required by AgentCore.</p> Source code in <code>agentcore_cli/utils/session_utils.py</code> Python<pre><code>def generate_session_id(prefix: str | None = None) -&gt; str:\n    \"\"\"Generate a unique session ID for agent runtime invocations.\n\n    Args:\n        prefix: Optional prefix to add to the session ID.\n\n    Returns:\n        str: A string of at least 33 characters as required by AgentCore.\n    \"\"\"\n    # Prefix with timestamp for sortability\n    timestamp = int(datetime.now().timestamp())\n\n    # Use UUID4 for uniqueness (36 chars)\n    unique_id = str(uuid.uuid4())\n\n    # Add custom prefix if provided\n    if prefix:\n        # Combine for a session ID that's guaranteed to be &gt; 33 chars\n        return f\"{prefix}-{timestamp}-{unique_id}\"\n\n    # Combine for a session ID that's guaranteed to be &gt; 33 chars\n    return f\"{timestamp}-{unique_id}\"\n</code></pre>"},{"location":"reference/agentcore_cli/utils/validation/","title":"agentcore_cli.utils.validation","text":""},{"location":"reference/agentcore_cli/utils/validation/#agentcore_cli.utils.validation","title":"<code>agentcore_cli.utils.validation</code>","text":"<p>Validation utilities for AgentCore CLI.</p>"},{"location":"reference/agentcore_cli/utils/validation/#agentcore_cli.utils.validation.validate_agent_name","title":"<code>validate_agent_name(name)</code>","text":"<p>Validate agent name.</p> <p>Agent names must be 3-64 characters, start with a letter, and contain only letters, numbers, hyphens, and underscores.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Agent name to validate.</p> required <p>Returns:</p> Type Description <code>tuple[bool, str]</code> <p>Tuple[bool, str]: Success status and error message if any.</p> Source code in <code>agentcore_cli/utils/validation.py</code> Python<pre><code>def validate_agent_name(name: str) -&gt; tuple[bool, str]:\n    \"\"\"Validate agent name.\n\n    Agent names must be 3-64 characters, start with a letter, and contain only\n    letters, numbers, hyphens, and underscores.\n\n    Args:\n        name: Agent name to validate.\n\n    Returns:\n        Tuple[bool, str]: Success status and error message if any.\n    \"\"\"\n    pattern: re.Pattern = re.compile(r\"^[a-zA-Z][a-zA-Z0-9_-]{2,63}$\")\n\n    if not pattern.match(name):\n        return False, (\n            \"Agent names must be 3-64 characters, start with a letter, \"\n            \"and contain only letters, numbers, hyphens, and underscores.\"\n        )\n\n    return True, \"\"\n</code></pre>"},{"location":"reference/agentcore_cli/utils/validation/#agentcore_cli.utils.validation.validate_arn","title":"<code>validate_arn(arn)</code>","text":"<p>Validate AWS ARN format.</p> <p>Parameters:</p> Name Type Description Default <code>arn</code> <code>str</code> <p>ARN to validate.</p> required <p>Returns:</p> Type Description <code>tuple[bool, str]</code> <p>Tuple[bool, str]: Success status and error message if any.</p> Source code in <code>agentcore_cli/utils/validation.py</code> Python<pre><code>def validate_arn(arn: str) -&gt; tuple[bool, str]:\n    \"\"\"Validate AWS ARN format.\n\n    Args:\n        arn: ARN to validate.\n\n    Returns:\n        Tuple[bool, str]: Success status and error message if any.\n    \"\"\"\n    pattern: re.Pattern = re.compile(r\"^arn:(?:aws|aws-cn|aws-us-gov):([^:]*):([^:]*):([^:]*):([^:]*)(?::(.*))?$\")\n\n    if not pattern.match(arn):\n        return False, \"Invalid ARN format. Expected: arn:partition:service:region:account-id:resource\"\n\n    return True, \"\"\n</code></pre>"},{"location":"reference/agentcore_cli/utils/validation/#agentcore_cli.utils.validation.validate_aws_cli","title":"<code>validate_aws_cli()</code>","text":"<p>Check if AWS CLI is available on the system.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if AWS CLI is available, False otherwise.</p> Source code in <code>agentcore_cli/utils/validation.py</code> Python<pre><code>def validate_aws_cli() -&gt; bool:\n    \"\"\"Check if AWS CLI is available on the system.\n\n    Returns:\n        bool: True if AWS CLI is available, False otherwise.\n    \"\"\"\n    try:\n        returncode, _, _ = execute_command([\"aws\", \"--version\"], log_output=False)\n        return returncode == 0\n    except FileNotFoundError:\n        return False\n</code></pre>"},{"location":"reference/agentcore_cli/utils/validation/#agentcore_cli.utils.validation.validate_region","title":"<code>validate_region(region)</code>","text":"<p>Validate AWS region format.</p> <p>Parameters:</p> Name Type Description Default <code>region</code> <code>str</code> <p>AWS region to validate.</p> required <p>Returns:</p> Type Description <code>tuple[bool, str]</code> <p>Tuple[bool, str]: Success status and error message if any.</p> Source code in <code>agentcore_cli/utils/validation.py</code> Python<pre><code>def validate_region(region: str) -&gt; tuple[bool, str]:\n    \"\"\"Validate AWS region format.\n\n    Args:\n        region: AWS region to validate.\n\n    Returns:\n        Tuple[bool, str]: Success status and error message if any.\n    \"\"\"\n    pattern: re.Pattern = re.compile(r\"^[a-z]{2}-[a-z]+-\\d+$\")\n\n    if not pattern.match(region):\n        return False, \"Invalid region format. Expected: e.g., us-east-1, eu-west-2\"\n\n    return True, \"\"\n</code></pre>"},{"location":"reference/agentcore_cli/utils/validation/#agentcore_cli.utils.validation.validate_repo_name","title":"<code>validate_repo_name(repo_name)</code>","text":"<p>Validate ECR repository name.</p> <p>Repository names must match: <code>[a-z0-9][a-z0-9._-]{0,254}</code></p> <p>Parameters:</p> Name Type Description Default <code>repo_name</code> <code>str</code> <p>Repository name to validate.</p> required <p>Returns:</p> Type Description <code>tuple[bool, str]</code> <p>uple[bool, str]: Success status and error message if any.</p> Source code in <code>agentcore_cli/utils/validation.py</code> Python<pre><code>def validate_repo_name(repo_name: str) -&gt; tuple[bool, str]:\n    \"\"\"Validate ECR repository name.\n\n    Repository names must match: `[a-z0-9][a-z0-9._-]{0,254}`\n\n    Args:\n        repo_name: Repository name to validate.\n\n    Returns:\n        uple[bool, str]: Success status and error message if any.\n    \"\"\"\n    pattern: re.Pattern = re.compile(r\"^[a-z0-9][a-z0-9._-]{0,254}$\")\n\n    if not pattern.match(repo_name):\n        return False, \"Repository names must match: [a-z0-9][a-z0-9._-]{0,254}\"\n\n    return True, \"\"\n</code></pre>"}]}